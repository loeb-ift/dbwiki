[
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "):\n            self.milvus_client.delete(collection_name="
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "\"\n        # Regular expression to find 'select' (ignoring case) and capture until '"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "', '```', or end of string\n        pattern = re.compile(r"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ", re.IGNORECASE | re.DOTALL)\n\n        match = pattern.search(text)\n        if match:\n            # Remove three backticks from the matched string if they exist\n            return match.group(0).replace(\"```\", \"\")\n        else:\n            return text\n\n    def generate_sql(self, question: str, **kwargs) -> str:\n        # Use the super generate_sql\n        sql = super().generate_sql(question, **kwargs)\n\n        # Replace \"\\_\" with"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "):\n            id = id.replace('-sql', '')\n            success = self.weaviate_client.collections.get(self.training_data_cluster['sql']).data.delete_by_id(id)\n        elif id.endswith("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "):\n            self.mq.index(\"vanna-sql\").delete_documents(ids=[id])\n            return True\n        elif id.endswith("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ", ids=[id])\n            return True\n        elif id.endswith("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "**Example**\n```python\nvn.run_sql = lambda sql: pd.read_sql(sql, engine)\n```\n\nSet the SQL to DataFrame function for Vanna.AI. This is used in the [`vn.ask(...)`][vanna.ask] function.\nInstead of setting this directly you can also use [`vn.connect_to_snowflake(...)`][vanna.connect_to_snowflake] to set this.\n\n\"\"\"\n\n__org: Union[str, None] = None  # Organization name for Vanna.AI\n\n_unauthenticated_endpoint = \"https://ask.vanna.ai/unauthenticated_rpc\"\n\ndef error_deprecation():\n    raise Exception(\"\"\"\nPlease switch to the following method for initializing Vanna:\n\nfrom vanna.remote import VannaDefault\n\napi_key = # Your API key from https://vanna.ai/account/profile \nvanna_model_name = # Your model name from https://vanna.ai/account/profile\n                    \nvn = VannaDefault(model=vanna_model_name, api_key=api_key)\n\"\"\")\n\ndef __unauthenticated_rpc_call(method, params):\n    headers = {\n        \"Content-Type\": \"application/json\",\n    }\n    data = {\"method\": method, \"params\": [__dataclass_to_dict(obj) for obj in params]}\n\n    response = requests.post(\n        _unauthenticated_endpoint, headers=headers, data=json.dumps(data)\n    )\n    return response.json()\n\n\n\ndef __dataclass_to_dict(obj):\n    return dataclasses.asdict(obj)\n\n\ndef get_api_key(email: str, otp_code: Union[str, None] = None) -> str:\n    \"\"\"\n    **Example:**\n    ```python\n    vn.get_api_key(email=\"my-email@example.com\")\n    ```\n\n    Login to the Vanna.AI API.\n\n    Args:\n        email (str): The email address to login with.\n        otp_code (Union[str, None]): The OTP code to login with. If None, an OTP code will be sent to the email address.\n\n    Returns:\n        str: The API key.\n    \"\"\"\n    vanna_api_key = os.environ.get(\"VANNA_API_KEY\", None)\n\n    if vanna_api_key is not None:\n        return vanna_api_key\n\n    if email == \"my-email@example.com\":\n        raise ValidationError(\n            \"Please replace 'my-email@example.com' with your email address.\"\n        )\n\n    if otp_code is None:\n        params = [UserEmail(email=email)]\n\n        d = __unauthenticated_rpc_call(method=\"send_otp\", params=params)\n\n        if \"result\" not in d:\n            raise OTPCodeError(\"Error sending OTP code.\")\n\n        status = Status(**d[\"result\"])\n\n        if not status.success:\n            raise OTPCodeError(f\"Error sending OTP code: {status.message}\")\n\n        otp_code = input(\"Check your email for the code and enter it here: \")\n\n    params = [UserOTP(email=email, otp=otp_code)]\n\n    d = __unauthenticated_rpc_call(method=\"verify_otp\", params=params)\n\n    if \"result\" not in d:\n        raise OTPCodeError(\"Error verifying OTP code.\")\n\n    key = ApiKey(**d[\"result\"])\n\n    if key is None:\n        raise OTPCodeError(\"Error verifying OTP code.\")\n\n    api_key = key.key\n\n    return api_key\n\n\ndef set_api_key(key: str) -> None:\n    error_deprecation()\n\n\ndef get_models() -> List[str]:\n    error_deprecation()\n\n\ndef create_model(model: str, db_type: str) -> bool:\n    error_deprecation()\n\n\ndef add_user_to_model(model: str, email: str, is_admin: bool) -> bool:\n    error_deprecation()\n\n\ndef update_model_visibility(public: bool) -> bool:\n    error_deprecation()\n\n\ndef set_model(model: str):\n    error_deprecation()\n\n\ndef add_sql(\n    question: str, sql: str, tag: Union[str, None] = \"Manually Trained\"\n) -> bool:\n    error_deprecation()\n\n\ndef add_ddl(ddl: str) -> bool:\n    error_deprecation()\n\n\ndef add_documentation(documentation: str) -> bool:\n    error_deprecation()\n\n\n@dataclass\nclass TrainingPlanItem:\n    item_type: str\n    item_group: str\n    item_name: str\n    item_value: str\n\n    def __str__(self):\n        if self.item_type == self.ITEM_TYPE_SQL:\n            return f\"Train on SQL: {self.item_group} {self.item_name}\"\n        elif self.item_type == self.ITEM_TYPE_DDL:\n            return f\"Train on DDL: {self.item_group} {self.item_name}\"\n        elif self.item_type == self.ITEM_TYPE_IS:\n            return f\"Train on Information Schema: {self.item_group} {self.item_name}\"\n\n    ITEM_TYPE_SQL = \"sql\"\n    ITEM_TYPE_DDL = \"ddl\"\n    ITEM_TYPE_IS = \"is\"\n\n\nclass TrainingPlan:"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "No such configuration file: {path}'\n        )\n\n    if not os.path.isfile(path):\n        raise ImproperlyConfigured(\n            f'Config should be a file: {path}'\n        )\n\n    if not os.access(path, os.R_OK):\n        raise ImproperlyConfigured(\n            f'Cannot read the config file. Please grant read privileges: {path}'\n        )\n\n\ndef sanitize_model_name(model_name):\n    try:\n        model_name = model_name.lower()\n\n        # Replace spaces with a hyphen\n        model_name = model_name.replace(\" \", \"-\")\n\n        if"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "in model_name:\n\n            # remove double hyphones\n            model_name = re.sub(r\"-+\", \"-\", model_name)\n            if '_' in model_name:\n                # If name contains both underscores and hyphen replace all underscores with hyphens\n                model_name = re.sub(r"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "Define the interface for a cache that can be used to store data in a Flask app.\n    \"\"\"\n\n    @abstractmethod\n    def generate_id(self, *args, **kwargs):\n        \"\"\"\n        Generate a unique ID for the cache.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def get(self, id, field):\n        \"\"\"\n        Get a value from the cache.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def get_all(self, field_list) -> list:\n        \"\"\"\n        Get all values from the cache.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def set(self, id, field, value):\n        \"\"\"\n        Set a value in the cache.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def delete(self, id):\n        \"\"\"\n        Delete a value from the cache.\n        \"\"\"\n        pass\n\n\nclass MemoryCache(Cache):\n    def __init__(self):\n        self.cache = {}\n\n    def generate_id(self, *args, **kwargs):\n        return str(uuid.uuid4())\n\n    def set(self, id, field, value):\n        if id not in self.cache:\n            self.cache[id] = {}\n\n        self.cache[id][field] = value\n\n    def get(self, id, field):\n        if id not in self.cache:\n            return None\n\n        if field not in self.cache[id]:\n            return None\n\n        return self.cache[id][field]\n\n    def get_all(self, field_list) -> list:\n        return [\n            {\"id\": id, **{field: self.get(id=id, field=field) for field in field_list}}\n            for id in self.cache\n        ]\n\n    def delete(self, id):\n        if id in self.cache:\n            del self.cache[id]\n\n\nclass VannaFlaskAPI:\n    flask_app = None\n\n    def requires_cache(self, required_fields, optional_fields=[]):\n        def decorator(f):\n            @wraps(f)\n            def decorated(*args, **kwargs):\n                id = request.args.get(\"id\")\n\n                if id is None:\n                    id = request.json.get(\"id\")\n                    if id is None:\n                        return jsonify({\"type\": \"error\", \"error\": \"No id provided\"})\n\n                for field in required_fields:\n                    if self.cache.get(id=id, field=field) is None:\n                        return jsonify({\"type\": \"error\", \"error\": f\"No {field} found\"})\n\n                field_values = {\n                    field: self.cache.get(id=id, field=field) for field in required_fields\n                }\n\n                for field in optional_fields:\n                    field_values[field] = self.cache.get(id=id, field=field)\n\n                # Add the id to the field_values\n                field_values[\"id\"] = id\n\n                return f(*args, **field_values, **kwargs)\n\n            return decorated\n\n        return decorator\n\n    def requires_auth(self, f):\n        @wraps(f)\n        def decorated(*args, **kwargs):\n            user = self.auth.get_user(flask.request)\n\n            if not self.auth.is_logged_in(user):\n                return jsonify({\"type\": \"not_logged_in\", \"html\": self.auth.login_form()})\n\n            # Pass the user to the function\n            return f(*args, user=user, **kwargs)\n\n        return decorated\n\n    def __init__(\n        self,\n        vn: VannaBase,\n        cache: Cache = MemoryCache(),\n        auth: AuthInterface = NoAuth(),\n        debug=True,\n        allow_llm_to_see_data=False,\n        chart=True,\n    ):\n        \"\"\"\n        Expose a Flask API that can be used to interact with a Vanna instance.\n\n        Args:\n            vn: The Vanna instance to interact with.\n            cache: The cache to use. Defaults to MemoryCache, which uses an in-memory cache. You can also pass in a custom cache that implements the Cache interface.\n            auth: The authentication method to use. Defaults to NoAuth, which doesn't require authentication. You can also pass in a custom authentication method that implements the AuthInterface interface.\n            debug: Show the debug console. Defaults to True.\n            allow_llm_to_see_data: Whether to allow the LLM to see data. Defaults to False.\n            chart: Whether to show the chart output in the UI. Defaults to True.\n\n        Returns:\n            None\n        \"\"\"\n\n        self.flask_app = Flask(__name__)\n\n        self.swagger = Swagger(\n          self.flask_app, template={\"info\": {\"title\": \"Vanna API\"}}\n        )\n        self.sock = Sock(self.flask_app)\n        self.ws_clients = []\n        self.vn = vn\n        self.auth = auth\n        self.cache = cache\n        self.debug = debug\n        self.allow_llm_to_see_data = allow_llm_to_see_data\n        self.chart = chart\n        self.config = {\n          \"debug\": debug,\n          \"allow_llm_to_see_data\": allow_llm_to_see_data,\n          \"chart\": chart,\n        }\n        log = logging.getLogger(\"werkzeug\")\n        log.setLevel(logging.ERROR)\n\n        if \"google.colab\" in sys.modules:\n            self.debug = False\n            print(\"Google Colab doesn't support running websocket servers. Disabling debug mode.\")\n\n        if self.debug:\n            def log(message, title=\"Info\"):\n                [ws.send(json.dumps({'message': message, 'title': title})) for ws in self.ws_clients]\n\n            self.vn.log = log\n\n        @self.flask_app.route(\"/api/v0/get_config\", methods=[\"GET\"])\n        @self.requires_auth\n        def get_config(user: any):\n            \"\"\"\n            Get the configuration for a user\n            \n            parameters:\n              - name: user\n                in: query\n            responses:\n              200:\n                schema:\n                  type: object\n                  properties:\n                    type:\n                      type: string\n                      default: config\n                    config:\n                      type: object\n            \"\"\"\n            config = self.auth.override_config_for_user(user, self.config)\n            return jsonify(\n                {\n                    \"type\": \"config\",\n                    \"config\": config\n                }\n            )\n\n        @self.flask_app.route(\"/api/v0/generate_questions\", methods=[\"GET\"])\n        @self.requires_auth\n        def generate_questions(user: any):\n            \"\"\"\n            Generate questions\n            \n            parameters:\n              - name: user\n                in: query\n            responses:\n              200:\n                schema:\n                  type: object\n                  properties:\n                    type:\n                      type: string\n                      default: question_list\n                    questions:\n                      type: array\n                      items:\n                        type: string\n                    header:\n                      type: string\n                      default: Here are some questions you can ask\n            \"\"\"\n            # If self has an _model attribute and model=='chinook'\n            if hasattr(self.vn, \"_model\") and self.vn._model == \"chinook\":\n                return jsonify(\n                    {\n                        \"type\": \"question_list\",\n                        \"questions\": [\n                            \"What are the top 10 artists by sales?\",\n                            \"What are the total sales per year by country?\",\n                            \"Who is the top selling artist in each genre? Show the sales numbers.\",\n                            \"How do the employees rank in terms of sales performance?\",\n                            \"Which 5 cities have the most customers?\",\n                        ],\n                        \"header\": \"Here are some questions you can ask:\",\n                    }\n                )\n\n            training_data = vn.get_training_data()\n\n            # If training data is None or empty\n            if training_data is None or len(training_data) == 0:\n                return jsonify(\n                    {\n                        \"type\": \"error\",\n                        \"error\": \"No training data found. Please add some training data first.\",\n                    }\n                )\n\n            # Get the questions from the training data\n            try:\n                # Filter training data to only include questions where the question is not null\n                questions = (\n                    training_data[training_data[\"question\"].notnull()]\n                    .sample(5)[\"question\"]\n                    .tolist()\n                )\n\n                # Temporarily this will just return an empty list\n                return jsonify(\n                    {\n                        \"type\": \"question_list\",\n                        \"questions\": questions,\n                        \"header\": \"Here are some questions you can ask\",\n                    }\n                )\n            except Exception as e:\n                return jsonify(\n                    {\n                        \"type\": \"question_list\",\n                        \"questions\": [],\n                        \"header\": \"Go ahead and ask a question\",\n                    }\n                )\n\n        @self.flask_app.route(\"/api/v0/generate_sql\", methods=[\"GET\"])\n        @self.requires_auth\n        def generate_sql(user: any):\n            \"\"\"\n            Generate SQL from a question\n            \n            parameters:\n              - name: user\n                in: query\n              - name: question\n                in: query\n                type: string\n                required: true\n            responses:\n              200:\n                schema:\n                  type: object\n                  properties:\n                    type:\n                      type: string\n                      default: sql\n                    id:\n                      type: string\n                    text:\n                      type: string\n            \"\"\"\n            question = flask.request.args.get(\"question\")\n\n            if question is None:\n                return jsonify({\"type\": \"error\", \"error\": \"No question provided\"})\n\n            id = self.cache.generate_id(question=question)\n            sql = vn.generate_sql(question=question, allow_llm_to_see_data=self.allow_llm_to_see_data)\n\n            self.cache.set(id=id, field=\"question\", value=question)\n            self.cache.set(id=id, field=\"sql\", value=sql)\n\n            if vn.is_sql_valid(sql=sql):\n                return jsonify(\n                    {\n                        \"type\": \"sql\",\n                        \"id\": id,\n                        \"text\": sql,\n                    }\n                )\n            else:\n                return jsonify(\n                    {\n                        \"type\": \"text\",\n                        \"id\": id,\n                        \"text\": sql,\n                    }\n                )\n\n        @self.flask_app.route(\"/api/v0/generate_rewritten_question\", methods=[\"GET\"])\n        @self.requires_auth\n        def generate_rewritten_question(user: any):\n            \"\"\"\n            Generate a rewritten question\n            \n            parameters:\n              - name: last_question\n                in: query\n                type: string\n                required: true\n              - name: new_question\n                in: query\n                type: string\n                required: true\n            \"\"\"\n\n            last_question = flask.request.args.get(\"last_question\")\n            new_question = flask.request.args.get(\"new_question\")\n\n            rewritten_question = self.vn.generate_rewritten_question(last_question, new_question)\n\n            return jsonify({\"type\": \"rewritten_question\", \"question\": rewritten_question})\n\n        @self.flask_app.route(\"/api/v0/get_function\", methods=[\"GET\"])\n        @self.requires_auth\n        def get_function(user: any):\n            \"\"\"\n            Get a function from a question\n            \n            parameters:\n              - name: user\n                in: query\n              - name: question\n                in: query\n                type: string\n                required: true\n            responses:\n              200:\n                schema:\n                  type: object\n                  properties:\n                    type:\n                      type: string\n                      default: function\n                    id:\n                      type: object\n                    function:\n                      type: string\n            \"\"\"\n            question = flask.request.args.get(\"question\")\n\n            if question is None:\n                return jsonify({\"type\": \"error\", \"error\": \"No question provided\"})\n\n            if not hasattr(vn, \"get_function\"):\n                return jsonify({\"type\": \"error\", \"error\": \"This setup does not support function generation.\"})\n\n            id = self.cache.generate_id(question=question)\n            function = vn.get_function(question=question)\n\n            if function is None:\n                return jsonify({\"type\": \"error\", \"error\": \"No function found\"})\n\n            if 'instantiated_sql' not in function:\n                self.vn.log(f\"No instantiated SQL found for {question} in {function}\")\n                return jsonify({\"type\": \"error\", \"error\": \"No instantiated SQL found\"})\n\n            self.cache.set(id=id, field=\"question\", value=question)\n            self.cache.set(id=id, field=\"sql\", value=function['instantiated_sql'])\n\n            if 'instantiated_post_processing_code' in function and function['instantiated_post_processing_code'] is not None and len(function['instantiated_post_processing_code']) > 0:\n                self.cache.set(id=id, field=\"plotly_code\", value=function['instantiated_post_processing_code'])\n\n            return jsonify(\n                {\n                    \"type\": \"function\",\n                    \"id\": id,\n                    \"function\": function,\n                }\n            )\n\n        @self.flask_app.route(\"/api/v0/get_all_functions\", methods=[\"GET\"])\n        @self.requires_auth\n        def get_all_functions(user: any):\n            \"\"\"\n            Get all the functions\n            \n            parameters:\n              - name: user\n                in: query\n            responses:\n              200:\n                schema:\n                  type: object\n                  properties:\n                    type:\n                      type: string\n                      default: functions\n                    functions:\n                      type: array\n            \"\"\"\n            if not hasattr(vn, \"get_all_functions\"):\n                return jsonify({\"type\": \"error\", \"error\": \"This setup does not support function generation.\"})\n\n            functions = vn.get_all_functions()\n\n            return jsonify(\n                {\n                    \"type\": \"functions\",\n                    \"functions\": functions,\n                }\n            )\n\n        @self.flask_app.route(\"/api/v0/run_sql\", methods=[\"GET\"])\n        @self.requires_auth\n        @self.requires_cache([\"sql\"])\n        def run_sql(user: any, id: str, sql: str):\n            \"\"\"\n            Run SQL\n            \n            parameters:\n              - name: user\n                in: query\n              - name: id\n                in: query|body\n                type: string\n                required: true\n            responses:\n              200:\n                schema:\n                  type: object\n                  properties:\n                    type:\n                      type: string\n                      default: df\n                    id:\n                      type: string\n                    df:\n                      type: object\n                    should_generate_chart:\n                      type: boolean\n            \"\"\"\n            try:\n                if not vn.run_sql_is_set:\n                    return jsonify(\n                        {\n                            \"type\": \"error\",\n                            \"error\": \"Please connect to a database using vn.connect_to_... in order to run SQL queries.\",\n                        }\n                    )\n\n                df = vn.run_sql(sql=sql)\n\n                self.cache.set(id=id, field=\"df\", value=df)\n\n                return jsonify(\n                    {\n                        \"type\": \"df\",\n                        \"id\": id,\n                        \"df\": df.head(10).to_json(orient='records', date_format='iso'),\n                        \"should_generate_chart\": self.chart and vn.should_generate_chart(df),\n                    }\n                )\n\n            except Exception as e:\n                return jsonify({\"type\": \"sql_error\", \"error\": str(e)})\n\n        @self.flask_app.route(\"/api/v0/fix_sql\", methods=[\"POST\"])\n        @self.requires_auth\n        @self.requires_cache([\"question\", \"sql\"])\n        def fix_sql(user: any, id: str, question: str, sql: str):\n            \"\"\"\n            Fix SQL\n            \n            parameters:\n              - name: user\n                in: query\n              - name: id\n                in: query|body\n                type: string\n                required: true\n              - name: error\n                in: body\n                type: string\n                required: true\n            responses:\n              200:\n                schema:\n                  type: object\n                  properties:\n                    type:\n                      type: string\n                      default: sql\n                    id:\n                      type: string\n                    text:\n                      type: string\n            \"\"\"\n            error = flask.request.json.get(\"error\")\n\n            if error is None:\n                return jsonify({\"type\": \"error\", \"error\": \"No error provided\"})\n\n            question = f\"I have an error: {error}\\n\\nHere is the SQL I tried to run: {sql}\\n\\nThis is the question I was trying to answer: {question}\\n\\nCan you rewrite the SQL to fix the error?\"\n\n            fixed_sql = vn.generate_sql(question=question)\n\n            self.cache.set(id=id, field=\"sql\", value=fixed_sql)\n\n            return jsonify(\n                {\n                    \"type\": \"sql\",\n                    \"id\": id,\n                    \"text\": fixed_sql,\n                }\n            )\n\n\n        @self.flask_app.route('/api/v0/update_sql', methods=['POST'])\n        @self.requires_auth\n        @self.requires_cache([])\n        def update_sql(user: any, id: str):"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "sql = flask.request.json.get('sql')\n\n            if sql is None:\n                return jsonify({\"type\": \"error\", \"error\": \"No sql provided\"})\n\n            self.cache.set(id=id, field='sql', value=sql)\n\n            return jsonify(\n                {\n                    \"type\": \"sql\",\n                    \"id\": id,\n                    \"text\": sql,\n                })\n\n        @self.flask_app.route(\"/api/v0/download_csv\", methods=[\"GET\"])\n        @self.requires_auth\n        @self.requires_cache([\"df\"])\n        def download_csv(user: any, id: str, df):\n            \"\"\"\n            Download CSV\n            \n            parameters:\n              - name: user\n                in: query\n              - name: id\n                in: query|body\n                type: string\n                required: true\n            responses:\n              200:\n                description: download CSV\n            \"\"\"\n            csv = df.to_csv()\n\n            return Response(\n                csv,\n                mimetype=\"text/csv\",\n                headers={\"Content-disposition\": f\"attachment"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "filename={id}.csv\"},\n            )\n\n        @self.flask_app.route(\"/api/v0/generate_plotly_figure\", methods=[\"GET\"])\n        @self.requires_auth\n        @self.requires_cache([\"df\", \"question\", \"sql\"])\n        def generate_plotly_figure(user: any, id: str, df, question, sql):\n            \"\"\"\n            Generate plotly figure\n            \n            parameters:\n              - name: user\n                in: query\n              - name: id\n                in: query|body\n                type: string\n                required: true\n              - name: chart_instructions\n                in: body\n                type: string\n            responses:\n              200:\n                schema:\n                  type: object\n                  properties:\n                    type:\n                      type: string\n                      default: plotly_figure\n                    id:\n                      type: string\n                    fig:\n                      type: object\n            \"\"\"\n            chart_instructions = flask.request.args.get('chart_instructions')\n\n            try:\n                # If chart_instructions is not set then attempt to retrieve the code from the cache\n                if chart_instructions is None or len(chart_instructions) == 0:\n                    code = self.cache.get(id=id, field=\"plotly_code\")\n                else:\n                    question = f\"{question}. When generating the chart, use these special instructions: {chart_instructions}\"\n                    code = vn.generate_plotly_code(\n                        question=question,\n                        sql=sql,\n                        df_metadata=f\"Running df.dtypes gives:\\n {df.dtypes}\",\n                    )\n                    self.cache.set(id=id, field=\"plotly_code\", value=code)\n\n                fig = vn.get_plotly_figure(plotly_code=code, df=df, dark_mode=False)\n                fig_json = fig.to_json()\n\n                self.cache.set(id=id, field=\"fig_json\", value=fig_json)\n\n                return jsonify(\n                    {\n                        \"type\": \"plotly_figure\",\n                        \"id\": id,\n                        \"fig\": fig_json,\n                    }\n                )\n            except Exception as e:\n                # Print the stack trace\n                import traceback\n\n                traceback.print_exc()\n\n                return jsonify({\"type\": \"error\", \"error\": str(e)})\n\n        @self.flask_app.route(\"/api/v0/get_training_data\", methods=[\"GET\"])\n        @self.requires_auth\n        def get_training_data(user: any):\n            \"\"\"\n            Get all training data\n            \n            parameters:\n              - name: user\n                in: query\n            responses:\n              200:\n                schema:\n                  type: object\n                  properties:\n                    type:\n                      type: string\n                      default: df\n                    id:\n                      type: string\n                      default: training_data\n                    df:\n                      type: object\n            \"\"\"\n            df = vn.get_training_data()\n\n            if df is None or len(df) == 0:\n                return jsonify(\n                    {\n                        \"type\": \"error\",\n                        \"error\": \"No training data found. Please add some training data first.\",\n                    }\n                )\n\n            return jsonify(\n                {\n                    \"type\": \"df\",\n                    \"id\": \"training_data\",\n                    \"df\": df.to_json(orient=\"records\"),\n                }\n            )\n\n        @self.flask_app.route(\"/api/v0/remove_training_data\", methods=[\"POST\"])\n        @self.requires_auth\n        def remove_training_data(user: any):\n            \"\"\"\n            Remove training data\n            \n            parameters:\n              - name: user\n                in: query\n              - name: id\n                in: body\n                type: string\n                required: true\n            responses:\n              200:\n                schema:\n                  type: object\n                  properties:\n                    success:\n                      type: boolean\n            \"\"\"\n            # Get id from the JSON body\n            id = flask.request.json.get(\"id\")\n\n            if id is None:\n                return jsonify({\"type\": \"error\", \"error\": \"No id provided\"})\n\n            if vn.remove_training_data(id=id):\n                return jsonify({\"success\": True})\n            else:\n                return jsonify(\n                    {\"type\": \"error\", \"error\": \"Couldn't remove training data\"}\n                )\n\n        @self.flask_app.route(\"/api/v0/train\", methods=[\"POST\"])\n        @self.requires_auth\n        def add_training_data(user: any):\n            \"\"\"\n            Add training data\n            \n            parameters:\n              - name: user\n                in: query\n              - name: question\n                in: body\n                type: string\n              - name: sql\n                in: body\n                type: string\n              - name: ddl\n                in: body\n                type: string\n              - name: documentation\n                in: body\n                type: string\n            responses:\n              200:\n                schema:\n                  type: object\n                  properties:\n                    id:\n                      type: string\n            \"\"\"\n            question = flask.request.json.get(\"question\")\n            sql = flask.request.json.get(\"sql\")\n            ddl = flask.request.json.get(\"ddl\")\n            documentation = flask.request.json.get(\"documentation\")\n\n            try:\n                id = vn.train(\n                    question=question, sql=sql, ddl=ddl, documentation=documentation\n                )\n\n                return jsonify({\"id\": id})\n            except Exception as e:\n                print(\"TRAINING ERROR\", e)\n                return jsonify({\"type\": \"error\", \"error\": str(e)})\n\n        @self.flask_app.route(\"/api/v0/create_function\", methods=[\"GET\"])\n        @self.requires_auth\n        @self.requires_cache([\"question\", \"sql\"])\n        def create_function(user: any, id: str, question: str, sql: str):\n            \"\"\"\n            Create function\n            \n            parameters:\n              - name: user\n                in: query\n              - name: id\n                in: query|body\n                type: string\n                required: true\n            responses:\n              200:\n                schema:\n                  type: object\n                  properties:\n                    type:\n                      type: string\n                      default: function_template\n                    id:\n                      type: string\n                    function_template:\n                      type: object\n            \"\"\"\n            plotly_code = self.cache.get(id=id, field=\"plotly_code\")\n\n            if plotly_code is None:\n                plotly_code = \"\"\n\n            function_data = self.vn.create_function(question=question, sql=sql, plotly_code=plotly_code)\n\n            return jsonify(\n                {\n                    \"type\": \"function_template\",\n                    \"id\": id,\n                    \"function_template\": function_data,\n                }\n            )\n\n        @self.flask_app.route(\"/api/v0/update_function\", methods=[\"POST\"])\n        @self.requires_auth\n        def update_function(user: any):"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "old_function_name = flask.request.json.get(\"old_function_name\")\n            updated_function = flask.request.json.get(\"updated_function\")\n\n            print(\"old_function_name\", old_function_name)\n            print(\"updated_function\", updated_function)\n\n            updated = vn.update_function(old_function_name=old_function_name, updated_function=updated_function)\n\n            return jsonify({\"success\": updated})\n\n        @self.flask_app.route(\"/api/v0/delete_function\", methods=[\"POST\"])\n        @self.requires_auth\n        def delete_function(user: any):"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function_name = flask.request.json.get(\"function_name\")\n\n            return jsonify({\"success\": vn.delete_function(function_name=function_name)})\n\n        @self.flask_app.route(\"/api/v0/generate_followup_questions\", methods=[\"GET\"])\n        @self.requires_auth\n        @self.requires_cache([\"df\", \"question\", \"sql\"])\n        def generate_followup_questions(user: any, id: str, df, question, sql):"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if self.allow_llm_to_see_data:\n                followup_questions = vn.generate_followup_questions(\n                    question=question, sql=sql, df=df\n                )\n                if followup_questions is not None and len(followup_questions) > 5:\n                    followup_questions = followup_questions[:5]\n\n                self.cache.set(id=id, field=\"followup_questions\", value=followup_questions)\n\n                return jsonify(\n                    {\n                        \"type\": \"question_list\",\n                        \"id\": id,\n                        \"questions\": followup_questions,\n                        \"header\": \"Here are some potential followup questions:\",\n                    }\n                )\n            else:\n                self.cache.set(id=id, field=\"followup_questions\", value=[])\n                return jsonify(\n                    {\n                        \"type\": \"question_list\",\n                        \"id\": id,\n                        \"questions\": [],\n                        \"header\": \"Followup Questions can be enabled if you set allow_llm_to_see_data=True\",\n                    }\n                )\n\n        @self.flask_app.route(\"/api/v0/generate_summary\", methods=[\"GET\"])\n        @self.requires_auth\n        @self.requires_cache([\"df\", \"question\"])\n        def generate_summary(user: any, id: str, df, question):\n            \"\"\"\n            Generate summary\n            \n            parameters:\n              - name: user\n                in: query\n              - name: id\n                in: query|body\n                type: string\n                required: true\n            responses:\n              200:\n                schema:\n                  type: object\n                  properties:\n                    type:\n                      type: string\n                      default: text\n                    id:\n                      type: string\n                    text:\n                      type: string\n            \"\"\"\n            if self.allow_llm_to_see_data:\n                summary = vn.generate_summary(question=question, df=df)\n\n                self.cache.set(id=id, field=\"summary\", value=summary)\n\n                return jsonify(\n                    {\n                        \"type\": \"text\",\n                        \"id\": id,\n                        \"text\": summary,\n                    }\n                )\n            else:\n                return jsonify(\n                    {\n                        \"type\": \"text\",\n                        \"id\": id,\n                        \"text\": \"Summarization can be enabled if you set allow_llm_to_see_data=True\",\n                    }\n                )\n\n        @self.flask_app.route(\"/api/v0/load_question\", methods=[\"GET\"])\n        @self.requires_auth\n        @self.requires_cache(\n            [\"question\", \"sql\", \"df\"],\n            optional_fields=[\"summary\", \"fig_json\"]\n        )\n        def load_question(user: any, id: str, question, sql, df, fig_json, summary):\n            \"\"\"\n            Load question\n            \n            parameters:\n              - name: user\n                in: query\n              - name: id\n                in: query|body\n                type: string\n                required: true\n            responses:\n              200:\n                schema:\n                  type: object\n                  properties:\n                    type:\n                      type: string\n                      default: question_cache\n                    id:\n                      type: string\n                    question:\n                      type: string\n                    sql:\n                      type: string\n                    df:\n                      type: object\n                    fig:\n                      type: object\n                    summary:\n                      type: string\n            \"\"\"\n            try:\n                return jsonify(\n                    {\n                        \"type\": \"question_cache\",\n                        \"id\": id,\n                        \"question\": question,\n                        \"sql\": sql,\n                        \"df\": df.head(10).to_json(orient=\"records\", date_format=\"iso\"),\n                        \"fig\": fig_json,\n                        \"summary\": summary,\n                    }\n                )\n\n            except Exception as e:\n                return jsonify({\"type\": \"error\", \"error\": str(e)})\n\n        @self.flask_app.route(\"/api/v0/get_question_history\", methods=[\"GET\"])\n        @self.requires_auth\n        def get_question_history(user: any):\n            \"\"\"\n            Get question history\n            \n            parameters:\n              - name: user\n                in: query\n            responses:\n              200:\n                schema:\n                  type: object\n                  properties:\n                    type:\n                      type: string\n                      default: question_history\n                    questions:\n                      type: array\n                      items:\n                        type: string\n            \"\"\"\n            return jsonify(\n                {\n                    \"type\": \"question_history\",\n                    \"questions\": cache.get_all(field_list=[\"question\"]),\n                }\n            )\n\n        @self.flask_app.route(\"/api/v0/<path:catch_all>\", methods=[\"GET\", \"POST\"])\n        def catch_all(catch_all):\n            return jsonify(\n                {\"type\": \"error\", \"error\": \"The rest of the API is not ported yet.\"}\n            )\n\n        if self.debug:\n            @self.sock.route(\"/api/v0/log\")\n            def sock_log(ws):\n                self.ws_clients.append(ws)\n\n                try:\n                    while True:\n                        message = ws.receive()  # This example just reads and ignores to keep the socket open\n                finally:\n                    self.ws_clients.remove(ws)\n\n    def run(self, *args, **kwargs):\n        \"\"\"\n        Run the Flask app.\n\n        Args:\n            *args: Arguments to pass to Flask's run method.\n            **kwargs: Keyword arguments to pass to Flask's run method.\n\n        Returns:\n            None\n        \"\"\"\n        if args or kwargs:\n            self.flask_app.run(*args, **kwargs)\n\n        else:\n            try:\n                from google.colab import output\n\n                output.serve_kernel_port_as_window(8084)\n                from google.colab.output import eval_js\n\n                print(\"Your app is running at:\")\n                print(eval_js(\"google.colab.kernel.proxyPort(8084)\"))\n            except:\n                print(\"Your app is running at:\")\n                print(\"http://localhost:8084\")\n\n            self.flask_app.run(host=\"0.0.0.0\", port=8084, debug=self.debug, use_reloader=False)\n\n\nclass VannaFlaskApp(VannaFlaskAPI):\n    def __init__(\n        self,\n        vn: VannaBase,\n        cache: Cache = MemoryCache(),\n        auth: AuthInterface = NoAuth(),\n        debug=True,\n        allow_llm_to_see_data=False,\n        logo=\"https://img.vanna.ai/vanna-flask.svg\",\n        title=\"Welcome to Vanna.AI\",\n        subtitle=\"Your AI-powered copilot for SQL queries.\",\n        show_training_data=True,\n        suggested_questions=True,\n        sql=True,\n        table=True,\n        csv_download=True,\n        chart=True,\n        redraw_chart=True,\n        auto_fix_sql=True,\n        ask_results_correct=True,\n        followup_questions=True,\n        summarization=True,\n        function_generation=True,\n        index_html_path=None,\n        assets_folder=None,\n    ):\n        \"\"\"\n        Expose a Flask app that can be used to interact with a Vanna instance.\n\n        Args:\n            vn: The Vanna instance to interact with.\n            cache: The cache to use. Defaults to MemoryCache, which uses an in-memory cache. You can also pass in a custom cache that implements the Cache interface.\n            auth: The authentication method to use. Defaults to NoAuth, which doesn't require authentication. You can also pass in a custom authentication method that implements the AuthInterface interface.\n            debug: Show the debug console. Defaults to True.\n            allow_llm_to_see_data: Whether to allow the LLM to see data. Defaults to False.\n            logo: The logo to display in the UI. Defaults to the Vanna logo.\n            title: The title to display in the UI. Defaults to \"Welcome to Vanna.AI\".\n            subtitle: The subtitle to display in the UI. Defaults to \"Your AI-powered copilot for SQL queries.\".\n            show_training_data: Whether to show the training data in the UI. Defaults to True.\n            suggested_questions: Whether to show suggested questions in the UI. Defaults to True.\n            sql: Whether to show the SQL input in the UI. Defaults to True.\n            table: Whether to show the table output in the UI. Defaults to True.\n            csv_download: Whether to allow downloading the table output as a CSV file. Defaults to True.\n            chart: Whether to show the chart output in the UI. Defaults to True.\n            redraw_chart: Whether to allow redrawing the chart. Defaults to True.\n            auto_fix_sql: Whether to allow auto-fixing SQL errors. Defaults to True.\n            ask_results_correct: Whether to ask the user if the results are correct. Defaults to True.\n            followup_questions: Whether to show followup questions. Defaults to True.\n            summarization: Whether to show summarization. Defaults to True.\n            index_html_path: Path to the index.html. Defaults to None, which will use the default index.html\n            assets_folder: The location where you'd like to serve the static assets from. Defaults to None, which will use hardcoded Python variables.\n\n        Returns:\n            None"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "<!doctype html>\n<html lang=\"en\" translate>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vanna.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link href=\"https://fonts.googleapis.com/css2?family=Roboto+Slab:wght@350&display=swap\" rel=\"stylesheet\">\n    <script src=\"https://cdn.plot.ly/plotly-latest.min.js\" type=\"text/javascript\"></script>\n    <title>Vanna.AI</title>\n    <script type=\"module\" crossorigin src=\"/assets/index-35bab439.js\"></script>\n    <link rel=\"stylesheet\" href=\"/assets/index-f228f78f.css\">\n  </head>\n  <body class=\"bg-white dark:bg-slate-900\">\n    <div id=\"app\"></div>\n    \n  </body>\n</html>\n'''\n\ncss_content = '''.nav-title{font-family:Roboto Slab,serif}*,:before,:after{box-sizing:border-box"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "border-width:0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "border-style:solid"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "border-color:#e5e7eb}:before,:after{\n\n\n\nvar Rn=Object.defineProperty"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "var nn=(E,e,T)=>e in E?Rn(E,e,{enumerable:!0,configurable:!0,writable:!0,value:T}):E[e]=T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "var wt=(E,e,T)=>(nn(E,typeof e!=\"symbol\"?e+\"\":e,T),T)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "(function(){const e=document.createElement(\"link\").relList"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(e&&e.supports&&e.supports(\"modulepreload\"))return"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(const r of document.querySelectorAll('link[rel=\"modulepreload\"]'))t(r)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "new MutationObserver(r=>{for(const R of r)if(R.type===\"childList\")for(const n of R.addedNodes)n.tagName===\"LINK\"&&n.rel===\"modulepreload\"&&t(n)}).observe(document,{childList:!0,subtree:!0})"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function T(r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return r.integrity&&(R.integrity=r.integrity),r.referrerPolicy&&(R.referrerPolicy=r.referrerPolicy),r.crossOrigin===\"use-credentials\"?R.credentials=\"include\":r.crossOrigin===\"anonymous\"?R.credentials=\"omit\":R.credentials=\"same-origin\",R}function t(r){if(r.ep)return"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r.ep=!0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const R=T(r)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "fetch(r.href,R)}})()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function j(){}function An(E,e){for(const T in e)E[T]=e[T]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return E}function cR(E){return E()}function YT(){return Object.create(null)}function NE(E){E.forEach(cR)}function zE(E){return typeof E==\"function\"}function _e(E,e){return E!=E?e==e:E!==e||E&&typeof E==\"object\"||typeof E==\"function\"}let ut"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function VT(E,e){return E===e?!0:(ut||(ut=document.createElement(\"a\")),ut.href=e,E===ut.href)}function sn(E){return Object.keys(E).length===0}function fR(E,...e){if(E==null){for(const t of e)t(void 0)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return j}const T=E.subscribe(...e)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return T.unsubscribe?()=>T.unsubscribe():T}function uE(E){let e"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return fR(E,T=>e=T)(),e}function eE(E,e,T){E.$$.on_destroy.push(fR(e,T))}function Ut(E,e,T,t){if(E){const r=PR(E,e,T,t)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return E[0](r)}}function PR(E,e,T,t){return E[1]&&t?An(T.ctx.slice(),E[1](t(e))):T.ctx}function mt(E,e,T,t){if(E[2]&&t){const r=E[2](t(T))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(e.dirty===void 0)return r"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(typeof r==\"object\"){const R=[],n=Math.max(e.dirty.length,r.length)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let s=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "s<n"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "s+=1)R[s]=e.dirty[s]|r[s]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return R}return e.dirty|r}return e.dirty}function ht(E,e,T,t,r,R){if(r){const n=PR(e,T,t,R)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "E.p(n,r)}}function Gt(E){if(E.ctx.length>32){const e=[],T=E.ctx.length/32"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let t=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "t<T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "t++)e[t]=-1"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e}return-1}function OT(E,e,T){return E.set(T),e}function l(E,e){E.appendChild(e)}function V(E,e,T){E.insertBefore(e,T||null)}function Y(E){E.parentNode&&E.parentNode.removeChild(E)}function nE(E,e){for(let T=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "T<E.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "T+=1)E[T]&&E[T].d(e)}function f(E){return document.createElement(E)}function OE(E){return document.createElementNS(\"http://www.w3.org/2000/svg\",E)}function te(E){return document.createTextNode(E)}function $(){return te(\" \")}function je(){return te(\"\")}function Ne(E,e,T,t){return E.addEventListener(e,T,t),()=>E.removeEventListener(e,T,t)}function a(E,e,T){T==null?E.removeAttribute(e):E.getAttribute(e)!==T&&E.setAttribute(e,T)}function Sn(E){let e"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{p(...T){e=T,e.forEach(t=>E.push(t))},r(){e.forEach(T=>E.splice(E.indexOf(T),1))}}}function on(E){return Array.from(E.childNodes)}function Le(E,e){e=\"\"+e,E.data!==e&&(E.data=e)}function Ye(E,e){E.value=e??\"\"}function ct(E,e,T,t){T==null?E.style.removeProperty(e):E.style.setProperty(e,T,t?\"important\":\"\")}function WT(E,e,T){for(let t=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "t<E.options.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "t+=1){const r=E.options[t]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(r.__value===e){r.selected=!0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return}}(!T||e!==void 0)&&(E.selectedIndex=-1)}function On(E){const e=E.querySelector(\":checked\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e&&e.__value}let Ot"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function st(E){Ot=E}function an(){if(!Ot)throw new Error(\"Function called outside component initialization\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return Ot}function DR(E){an().$$.on_mount.push(E)}const jE=[],iT=[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let et=[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const aT=[],In=Promise.resolve()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let IT=!1"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function Nn(){IT||(IT=!0,In.then(dR))}function dt(E){et.push(E)}function ln(E){aT.push(E)}const $t=new Set"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let JE=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function dR(){if(JE!==0)return"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const E=Ot"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "do{try{for("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "JE<jE.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "){const e=jE[JE]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "JE++,st(e),_n(e.$$)}}catch(e){throw jE.length=0,JE=0,e}for(st(null),jE.length=0,JE=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "iT.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ")iT.pop()()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let e=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "e<et.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "e+=1){const T=et[e]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "$t.has(T)||($t.add(T),T())}et.length=0}while(jE.length)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "aT.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ")aT.pop()()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "IT=!1,$t.clear(),st(E)}function _n(E){if(E.fragment!==null){E.update(),NE(E.before_update)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const e=E.dirty"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "E.dirty=[-1],E.fragment&&E.fragment.p(E.ctx,e),E.after_update.forEach(dt)}}function Ln(E){const e=[],T=[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "et.forEach(t=>E.indexOf(t)===-1?e.push(t):T.push(t)),T.forEach(t=>t()),et=e}const ft=new Set"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let vE"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function Ge(){vE={r:0,c:[],p:vE}}function ge(){vE.r||NE(vE.c),vE=vE.p}function m(E,e){E&&E.i&&(ft.delete(E),E.i(e))}function y(E,e,T,t){if(E&&E.o){if(ft.has(E))return"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "ft.add(E),vE.c.push(()=>{ft.delete(E),t&&(T&&E.d(1),t())}),E.o(e)}else t&&t()}function De(E){return(E==null?void 0:E.length)!==void 0?E:Array.from(E)}function Cn(E,e){E.d(1),e.delete(E.key)}function un(E,e,T,t,r,R,n,s,S,A,o,i){let _=E.length,c=R.length,P=_"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const p={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "P\n              Functions`,a(T,\"class\",\"flex items-center gap-x-3 py-2 px-3 text-sm text-slate-700 rounded-md hover:bg-gray-100 dark:hover:bg-gray-900 dark:text-slate-400 dark:hover:text-slate-300 border border-gray-200 dark:border-gray-700 w-full\")},m(R,n){V(R,e,n),l(e,T),t||(r=Ne(T,\"click\",cT),t=!0)},d(R){R&&Y(e),t=!1,r()}}}function XT(E){let e,T,t,r"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=f(\"li\"),T=f(\"button\"),T.innerHTML=`<svg class=\"w-3.5 h-3.5\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4.26 10.147a60.436 60.436 0 00-.491 6.347A48.627 48.627 0 0112 20.904a48.627 48.627 0 018.232-4.41 60.46 60.46 0 00-.491-6.347m-15.482 0a50.57 50.57 0 00-2.658-.813A59.905 59.905 0 0112 3.493a59.902 59.902 0 0110.399 5.84c-.896.248-1.783.52-2.658.814m-15.482 0A50.697 50.697 0 0112 13.489a50.702 50.702 0 017.74-3.342M6.75 15a.75.75 0 100-1.5.75.75 0 000 1.5zm0 0v-3.675A55.378 55.378 0 0112 8.443m-7.007 11.55A5.981 5.981 0 006.75 15.75v-1.5\"></path></svg>\n              Training Data`,a(T,\"class\",\"flex items-center gap-x-3 py-2 px-3 text-sm text-slate-700 rounded-md hover:bg-gray-100 dark:hover:bg-gray-900 dark:text-slate-400 dark:hover:text-slate-300 border border-gray-200 dark:border-gray-700 w-full\")},m(R,n){V(R,e,n),l(e,T),t||(r=Ne(T,\"click\",hR),t=!0)},d(R){R&&Y(e),t=!1,r()}}}function kT(E){let e,T,t,r,R,n=E[3].question+\"\",s,S,A,o"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function i(){return E[2](E[3])}return{c(){e=f(\"li\"),T=f(\"button\"),t=OE(\"svg\"),r=OE(\"path\"),R=$(),s=te(n),S=$(),a(r,\"stroke-linecap\",\"round\"),a(r,\"stroke-linejoin\",\"round\"),a(r,\"d\",\"M7.5 8.25h9m-9 3H12m-9.75 1.51c0 1.6 1.123 2.994 2.707 3.227 1.129.166 2.27.293 3.423.379.35.026.67.21.865.501L12 21l2.755-4.133a1.14 1.14 0 01.865-.501 48.172 48.172 0 003.423-.379c1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0012 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018z\"),a(t,\"class\",\"w-3.5 h-3.5\"),a(t,\"fill\",\"none\"),a(t,\"stroke\",\"currentColor\"),a(t,\"stroke-width\",\"1.5\"),a(t,\"viewBox\",\"0 0 24 24\"),a(t,\"xmlns\",\"http://www.w3.org/2000/svg\"),a(t,\"aria-hidden\",\"true\"),a(T,\"class\",\"flex items-center text-left gap-x-3 py-2 px-3 text-sm text-slate-700 rounded-md hover:bg-gray-100 dark:hover:bg-gray-900 dark:text-slate-400 dark:hover:text-slate-300\")},m(_,c){V(_,e,c),l(e,T),l(T,t),l(t,r),l(T,R),l(T,s),l(e,S),A||(o=Ne(T,\"click\",i),A=!0)},p(_,c){E=_,c&2&&n!==(n=E[3].question+\"\")&&Le(s,n)},d(_){_&&Y(e),A=!1,o()}}}function Xn(E){let e,T,t,r,R,n,s,S,A,o,i,_,c,P,p,C,L,I,u,H,b,M=E[0].version+\"\",O,N,D,B,h,G=E[0].function_generation&&xT(),F=E[0].show_training_data&&XT(),W=De(E[1]),x=[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let J=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "J<W.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "J+=1)x[J]=kT($T(E,W,J))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=f(\"div\"),T=f(\"nav\"),t=f(\"div\"),r=f(\"img\"),n=$(),s=f(\"div\"),s.innerHTML='<button type=\"button\" class=\"w-8 h-8 inline-flex justify-center items-center gap-2 rounded-md text-gray-700 align-middle focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-white focus:ring-blue-600 transition-all dark:text-gray-400 dark:focus:ring-offset-gray-800\" data-hs-overlay=\"#application-sidebar\" aria-controls=\"application-sidebar\" aria-label=\"Toggle navigation\"><svg class=\"w-4 h-4\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path d=\"M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z\"></path></svg> <span class=\"sr-only\">Sidebar</span></button>',S=$(),A=f(\"div\"),o=f(\"ul\"),G&&G.c(),i=$(),F&&F.c(),_=$(),c=f(\"li\"),P=f(\"button\"),P.innerHTML=`<svg class=\"w-3.5 h-3.5\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M8 2C8.47339 2 8.85714 2.38376 8.85714 2.85714V7.14286L13.1429 7.14286C13.6162 7.14286 14 7.52661 14 8C14 8.47339 13.6162 8.85714 13.1429 8.85714L8.85714 8.85715V13.1429C8.85714 13.6162 8.47339 14 8 14C7.52661 14 7.14286 13.6162 7.14286 13.1429V8.85715L2.85714 8.85715C2.38376 8.85715 2 8.4734 2 8.00001C2 7.52662 2.38376 7.14287 2.85714 7.14287L7.14286 7.14286V2.85714C7.14286 2.38376 7.52661 2 8 2Z\" fill=\"currentColor\"></path></svg>\n              New question`,p=$()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let J=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "J<x.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "J+=1)x[J].c()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "C=$(),L=f(\"div\"),I=f(\"div\"),u=f(\"p\"),H=f(\"span\"),b=te(`\n            v`),O=te(M),N=$(),D=f(\"div\"),D.innerHTML=`<a class=\"flex justify-between items-center gap-x-3 py-2 px-3 text-sm text-slate-700 rounded-md hover:bg-gray-100 dark:hover:bg-gray-900 dark:text-slate-400 dark:hover:text-slate-300\" href=\"/auth/logout\">Sign out\n            <svg class=\"w-3.5 h-3.5\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M10 3.5a.5.5 0 0 0-.5-.5h-8a.5.5 0 0 0-.5.5v9a.5.5 0 0 0 .5.5h8a.5.5 0 0 0 .5-.5v-2a.5.5 0 0 1 1 0v2A1.5 1.5 0 0 1 9.5 14h-8A1.5 1.5 0 0 1 0 12.5v-9A1.5 1.5 0 0 1 1.5 2h8A1.5 1.5 0 0 1 11 3.5v2a.5.5 0 0 1-1 0v-2z\"></path><path fill-rule=\"evenodd\" d=\"M4.146 8.354a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5H14.5a.5.5 0 0 1 0 1H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3z\"></path></svg></a>`,a(r,\"class\",\"w-28 h-auto\"),VT(r.src,R=E[0].logo)||a(r,\"src\",R),a(r,\"alt\",\"Vanna Logo\"),a(s,\"class\",\"lg:hidden\"),a(t,\"class\",\"flex items-center justify-between py-4 pr-4 pl-7\"),a(P,\"class\",\"w-full py-2 px-4 inline-flex items-center gap-x-2 text-sm font-semibold rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none\"),a(o,\"class\",\"space-y-1.5 p-4\"),a(A,\"class\",\"h-full\"),a(H,\"class\",\"block w-1.5 h-1.5 rounded-full bg-green-600\"),a(u,\"class\",\"inline-flex items-center gap-x-2 text-xs text-green-600\"),a(I,\"class\",\"py-2.5 px-7\"),a(D,\"class\",\"p-4 border-t border-gray-200 dark:border-gray-700\"),a(L,\"class\",\"mt-auto\"),a(T,\"class\",\"hs-accordion-group w-full h-full flex flex-col\"),a(T,\"data-hs-accordion-always-open\",\"\"),a(e,\"id\",\"application-sidebar\"),a(e,\"class\",\"hs-overlay hs-overlay-open:translate-x-0 -translate-x-full transition-all duration-300 transform hidden fixed top-0 left-0 bottom-0 z-[60] w-64 bg-white border-r border-gray-200 overflow-y-auto scrollbar-y lg:block lg:translate-x-0 lg:right-auto lg:bottom-0 dark:scrollbar-y dark:bg-slate-900 dark:border-gray-700\")},m(J,oe){V(J,e,oe),l(e,T),l(T,t),l(t,r),l(t,n),l(t,s),l(T,S),l(T,A),l(A,o),G&&G.m(o,null),l(o,i),F&&F.m(o,null),l(o,_),l(o,c),l(c,P),l(o,p)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let z=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "z<x.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "z+=1)x[z]&&x[z].m(o,null)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "l(T,C),l(T,L),l(L,I),l(I,u),l(u,H),l(u,b),l(u,O),l(L,N),l(L,D),B||(h=Ne(P,\"click\",it),B=!0)},p(J,[oe]){if(oe&1&&!VT(r.src,R=J[0].logo)&&a(r,\"src\",R),J[0].function_generation?G||(G=xT(),G.c(),G.m(o,i)):G&&(G.d(1),G=null),J[0].show_training_data?F||(F=XT(),F.c(),F.m(o,_)):F&&(F.d(1),F=null),oe&2){W=De(J[1])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let z"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(z=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "z<W.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "z+=1){const Oe=$T(J,W,z)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "x[z]?x[z].p(Oe,oe):(x[z]=kT(Oe),x[z].c(),x[z].m(o,null))}for("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "z<x.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "z+=1)x[z].d(1)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "x.length=W.length}oe&1&&M!==(M=J[0].version+\"\")&&Le(O,M)},i:j,o:j,d(J){J&&Y(e),G&&G.d(),F&&F.d(),nE(x,J),B=!1,h()}}}function kn(E,e,T){let t,r"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return eE(E,VE,n=>T(0,t=n)),eE(E,CT,n=>T(1,r=n)),[t,r,n=>{Mn(n.id)}]}class Kn extends ue{constructor(e){super(),Ce(this,e,kn,Xn,_e,{})}}var Jn=typeof globalThis<\"u\"?globalThis:typeof window<\"u\"?window:typeof global<\"u\"?global:typeof self<\"u\"?self:{}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function qn(E){return E&&E.__esModule&&Object.prototype.hasOwnProperty.call(E,\"default\")?E.default:E}var Qn={exports:{}}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "(function(E,e){(function(T,t){E.exports=t()})(self,function(){return(()=>{var T={661:(n,s,S)=>{function A(p){return A=typeof Symbol==\"function\"&&typeof Symbol.iterator==\"symbol\"?function(C){return typeof C}:function(C){return C&&typeof Symbol==\"function\"&&C.constructor===Symbol&&C!==Symbol.prototype?\"symbol\":typeof C},A(p)}function o(p,C){for(var L=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "L<C.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "L++){var I=C[L]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "I.enumerable=I.enumerable||!1,I.configurable=!0,\"value\"in I&&(I.writable=!0),Object.defineProperty(p,I.key,I)}}function i(p,C){return i=Object.setPrototypeOf||function(L,I){return L.__proto__=I,L},i(p,C)}function _(p,C){if(C&&(A(C)===\"object\"||typeof C==\"function\"))return C"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(C!==void 0)throw new TypeError(\"Derived constructors may only return object or undefined\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return function(L){if(L===void 0)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return L}(p)}function c(p){return c=Object.setPrototypeOf?Object.getPrototypeOf:function(C){return C.__proto__||Object.getPrototypeOf(C)},c(p)}var P=function(p){(function(M,O){if(typeof O!=\"function\"&&O!==null)throw new TypeError(\"Super expression must either be null or a function\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "M.prototype=Object.create(O&&O.prototype,{constructor:{value:M,writable:!0,configurable:!0}}),Object.defineProperty(M,\"prototype\",{writable:!1}),O&&i(M,O)})(b,p)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "var C,L,I,u,H=(I=b,u=function(){if(typeof Reflect>\"u\"||!Reflect.construct||Reflect.construct.sham)return!1"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(typeof Proxy==\"function\")return!0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch{return!1}}(),function(){var M,O=c(I)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(u){var N=c(this).constructor"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "M=Reflect.construct(O,arguments,N)}else M=O.apply(this,arguments)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return _(this,M)})"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function b(){return function(M,O){if(!(M instanceof O))throw new TypeError(\"Cannot call a class as a function\")}(this,b),H.call(this,\".hs-accordion\")}return C=b,(L=[{key:\"init\",value:function(){var M=this"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "document.addEventListener(\"click\",function(O){var N=O.target,D=N.closest(M.selector),B=N.closest(\".hs-accordion-toggle\"),h=N.closest(\".hs-accordion-group\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "D&&h&&B&&(M._hideAll(D),M.show(D))})}},{key:\"show\",value:function(M){var O=this"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(M.classList.contains(\"active\"))return this.hide(M)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "M.classList.add(\"active\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "var N=M.querySelector(\".hs-accordion-content\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "N.style.display=\"block\",N.style.height=0,setTimeout(function(){N.style.height=\"\".concat(N.scrollHeight,\"px\")}),this.afterTransition(N,function(){M.classList.contains(\"active\")&&(N.style.height=\"\",O._fireEvent(\"open\",M),O._dispatch(\"open.hs.accordion\",M,M))})}},{key:\"hide\",value:function(M){var O=this,N=M.querySelector(\".hs-accordion-content\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "N.style.height=\"\".concat(N.scrollHeight,\"px\"),setTimeout(function(){N.style.height=0}),this.afterTransition(N,function(){M.classList.contains(\"active\")||(N.style.display=\"\",O._fireEvent(\"hide\",M),O._dispatch(\"hide.hs.accordion\",M,M))}),M.classList.remove(\"active\")}},{key:\"_hideAll\",value:function(M){var O=this,N=M.closest(\".hs-accordion-group\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "N.hasAttribute(\"data-hs-accordion-always-open\")||N.querySelectorAll(this.selector).forEach(function(D){M!==D&&O.hide(D)})}}])&&o(C.prototype,L),Object.defineProperty(C,\"prototype\",{writable:!1}),b}(S(765).Z)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "window.HSAccordion=new P,document.addEventListener(\"load\",window.HSAccordion.init())},795:(n,s,S)=>{function A(C){return A=typeof Symbol==\"function\"&&typeof Symbol.iterator==\"symbol\"?function(L){return typeof L}:function(L){return L&&typeof Symbol==\"function\"&&L.constructor===Symbol&&L!==Symbol.prototype?\"symbol\":typeof L},A(C)}function o(C,L){(L==null||L>C.length)&&(L=C.length)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(var I=0,u=new Array(L)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "I<L"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "I++)u[I]=C[I]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return u}function i(C,L){for(var I=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "I<L.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "I++){var u=L[I]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "u.enumerable=u.enumerable||!1,u.configurable=!0,\"value\"in u&&(u.writable=!0),Object.defineProperty(C,u.key,u)}}function _(C,L){return _=Object.setPrototypeOf||function(I,u){return I.__proto__=u,I},_(C,L)}function c(C,L){if(L&&(A(L)===\"object\"||typeof L==\"function\"))return L"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(L!==void 0)throw new TypeError(\"Derived constructors may only return object or undefined\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return function(I){if(I===void 0)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return I}(C)}function P(C){return P=Object.setPrototypeOf?Object.getPrototypeOf:function(L){return L.__proto__||Object.getPrototypeOf(L)},P(C)}var p=function(C){(function(O,N){if(typeof N!=\"function\"&&N!==null)throw new TypeError(\"Super expression must either be null or a function\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "O.prototype=Object.create(N&&N.prototype,{constructor:{value:O,writable:!0,configurable:!0}}),Object.defineProperty(O,\"prototype\",{writable:!1}),N&&_(O,N)})(M,C)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "var L,I,u,H,b=(u=M,H=function(){if(typeof Reflect>\"u\"||!Reflect.construct||Reflect.construct.sham)return!1"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(typeof Proxy==\"function\")return!0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch{return!1}}(),function(){var O,N=P(u)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(H){var D=P(this).constructor"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "O=Reflect.construct(N,arguments,D)}else O=N.apply(this,arguments)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return c(this,O)})"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function M(){return function(O,N){if(!(O instanceof N))throw new TypeError(\"Cannot call a class as a function\")}(this,M),b.call(this,\"[data-hs-collapse]\")}return L=M,(I=[{key:\"init\",value:function(){var O=this"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "document.addEventListener(\"click\",function(N){var D=N.target.closest(O.selector)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(D){var B=document.querySelectorAll(D.getAttribute(\"data-hs-collapse\"))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "O.toggle(B)}})}},{key:\"toggle\",value:function(O){var N,D=this"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "O.length&&(N=O,function(B){if(Array.isArray(B))return o(B)}(N)||function(B){if(typeof Symbol<\"u\"&&B[Symbol.iterator]!=null||B[\"@@iterator\"]!=null)return Array.from(B)}(N)||function(B,h){if(B){if(typeof B==\"string\")return o(B,h)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "var G=Object.prototype.toString.call(B).slice(8,-1)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return G===\"Object\"&&B.constructor&&(G=B.constructor.name),G===\"Map\"||G===\"Set\"?Array.from(B):G===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(G)?o(B,h):void 0}}(N)||function(){throw new TypeError(`Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}()).forEach(function(B){B.classList.contains(\"hidden\")?D.show(B):D.hide(B)})}},{key:\"show\",value:function(O){var N=this"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "O.classList.add(\"open\"),O.classList.remove(\"hidden\"),O.style.height=0,document.querySelectorAll(this.selector).forEach(function(D){O.closest(D.getAttribute(\"data-hs-collapse\"))&&D.classList.add(\"open\")}),O.style.height=\"\".concat(O.scrollHeight,\"px\"),this.afterTransition(O,function(){O.classList.contains(\"open\")&&(O.style.height=\"\",N._fireEvent(\"open\",O),N._dispatch(\"open.hs.collapse\",O,O))})}},{key:\"hide\",value:function(O){var N=this"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "O.style.height=\"\".concat(O.scrollHeight,\"px\"),setTimeout(function(){O.style.height=0}),O.classList.remove(\"open\"),this.afterTransition(O,function(){O.classList.contains(\"open\")||(O.classList.add(\"hidden\"),O.style.height=null,N._fireEvent(\"hide\",O),N._dispatch(\"hide.hs.collapse\",O,O),O.querySelectorAll(\".hs-mega-menu-content.block\").forEach(function(D){D.classList.remove(\"block\"),D.classList.add(\"hidden\")}))}),document.querySelectorAll(this.selector).forEach(function(D){O.closest(D.getAttribute(\"data-hs-collapse\"))&&D.classList.remove(\"open\")})}}])&&i(L.prototype,I),Object.defineProperty(L,\"prototype\",{writable:!1}),M}(S(765).Z)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "window.HSCollapse=new p,document.addEventListener(\"load\",window.HSCollapse.init())},682:(n,s,S)=>{var A=S(714),o=S(765)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const i={historyIndex:-1,addHistory:function(H){this.historyIndex=H},existsInHistory:function(H){return H>this.historyIndex},clearHistory:function(){this.historyIndex=-1}}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function _(H){return _=typeof Symbol==\"function\"&&typeof Symbol.iterator==\"symbol\"?function(b){return typeof b}:function(b){return b&&typeof Symbol==\"function\"&&b.constructor===Symbol&&b!==Symbol.prototype?\"symbol\":typeof b},_(H)}function c(H){return function(b){if(Array.isArray(b))return P(b)}(H)||function(b){if(typeof Symbol<\"u\"&&b[Symbol.iterator]!=null||b[\"@@iterator\"]!=null)return Array.from(b)}(H)||function(b,M){if(b){if(typeof b==\"string\")return P(b,M)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "var O=Object.prototype.toString.call(b).slice(8,-1)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return O===\"Object\"&&b.constructor&&(O=b.constructor.name),O===\"Map\"||O===\"Set\"?Array.from(b):O===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(O)?P(b,M):void 0}}(H)||function(){throw new TypeError(`Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}()}function P(H,b){(b==null||b>H.length)&&(b=H.length)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(var M=0,O=new Array(b)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "M<b"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "M++)O[M]=H[M]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return O}function p(H,b){for(var M=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "M<b.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "M++){var O=b[M]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "O.enumerable=O.enumerable||!1,O.configurable=!0,\"value\"in O&&(O.writable=!0),Object.defineProperty(H,O.key,O)}}function C(H,b){return C=Object.setPrototypeOf||function(M,O){return M.__proto__=O,M},C(H,b)}function L(H,b){if(b&&(_(b)===\"object\"||typeof b==\"function\"))return b"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(b!==void 0)throw new TypeError(\"Derived constructors may only return object or undefined\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return function(M){if(M===void 0)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return M}(H)}function I(H){return I=Object.setPrototypeOf?Object.getPrototypeOf:function(b){return b.__proto__||Object.getPrototypeOf(b)},I(H)}var u=function(H){(function(h,G){if(typeof G!=\"function\"&&G!==null)throw new TypeError(\"Super expression must either be null or a function\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "h.prototype=Object.create(G&&G.prototype,{constructor:{value:h,writable:!0,configurable:!0}}),Object.defineProperty(h,\"prototype\",{writable:!1}),G&&C(h,G)})(B,H)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "var b,M,O,N,D=(O=B,N=function(){if(typeof Reflect>\"u\"||!Reflect.construct||Reflect.construct.sham)return!1"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(typeof Proxy==\"function\")return!0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch{return!1}}(),function(){var h,G=I(O)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(N){var F=I(this).constructor"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "h=Reflect.construct(G,arguments,F)}else h=G.apply(this,arguments)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return L(this,h)})"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function B(){var h"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return function(G,F){if(!(G instanceof F))throw new TypeError(\"Cannot call a class as a function\")}(this,B),(h=D.call(this,\".hs-dropdown\")).positions={top:\"top\",\"top-left\":\"top-start\",\"top-right\":\"top-end\",bottom:\"bottom\",\"bottom-left\":\"bottom-start\",\"bottom-right\":\"bottom-end\",right:\"right\",\"right-top\":\"right-start\",\"right-bottom\":\"right-end\",left:\"left\",\"left-top\":\"left-start\",\"left-bottom\":\"left-end\"},h.absoluteStrategyModifiers=function(G){return[{name:\"applyStyles\",fn:function(F){var W=(window.getComputedStyle(G).getPropertyValue(\"\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var ye,TE=!0,dE=!1"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{s:function(){z=z.call(J)},n:function(){var me=z.next()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return TE=me.done,me},e:function(me){dE=!0,ye=me},f:function(){try{TE||z.return==null||z.return()}finally{if(dE)throw ye}}}}(O.classList.values())"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "try{for(F.s()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "!(N=F.n()).done"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "){var W=N.value"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "W.startsWith(\"hs-overlay-backdrop-open:\")&&(G+=\" \".concat(W))}}catch(J){F.e(J)}finally{F.f()}var x=this.getClassProperty(O,\"\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}()}function i(L,I){(I==null||I>L.length)&&(I=L.length)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(var u=0,H=new Array(I)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "u<I"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "u++)H[u]=L[u]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return H}function _(L,I){for(var u=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "u<I.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "u++){var H=I[u]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "H.enumerable=H.enumerable||!1,H.configurable=!0,\"value\"in H&&(H.writable=!0),Object.defineProperty(L,H.key,H)}}function c(L,I){return c=Object.setPrototypeOf||function(u,H){return u.__proto__=H,u},c(L,I)}function P(L,I){if(I&&(A(I)===\"object\"||typeof I==\"function\"))return I"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(I!==void 0)throw new TypeError(\"Derived constructors may only return object or undefined\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return function(u){if(u===void 0)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return u}(L)}function p(L){return p=Object.setPrototypeOf?Object.getPrototypeOf:function(I){return I.__proto__||Object.getPrototypeOf(I)},p(L)}var C=function(L){(function(N,D){if(typeof D!=\"function\"&&D!==null)throw new TypeError(\"Super expression must either be null or a function\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "N.prototype=Object.create(D&&D.prototype,{constructor:{value:N,writable:!0,configurable:!0}}),Object.defineProperty(N,\"prototype\",{writable:!1}),D&&c(N,D)})(O,L)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "var I,u,H,b,M=(H=O,b=function(){if(typeof Reflect>\"u\"||!Reflect.construct||Reflect.construct.sham)return!1"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(typeof Proxy==\"function\")return!0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch{return!1}}(),function(){var N,D=p(H)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(b){var B=p(this).constructor"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "N=Reflect.construct(D,arguments,B)}else N=D.apply(this,arguments)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return P(this,N)})"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function O(){return function(N,D){if(!(N instanceof D))throw new TypeError(\"Cannot call a class as a function\")}(this,O),M.call(this,\"[data-hs-tab]\")}return I=O,(u=[{key:\"init\",value:function(){var N=this"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "document.addEventListener(\"keydown\",this._keyboardSupport.bind(this)),document.addEventListener(\"click\",function(D){var B=D.target.closest(N.selector)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "B&&N.open(B)}),document.querySelectorAll(\"[hs-data-tab-select]\").forEach(function(D){var B=document.querySelector(D.getAttribute(\"hs-data-tab-select\"))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "B&&B.addEventListener(\"change\",function(h){var G=document.querySelector('[data-hs-tab=\"'.concat(h.target.value,'\"]'))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "G&&N.open(G)})})}},{key:\"open\",value:function(N){var D=document.querySelector(N.getAttribute(\"data-hs-tab\")),B=o(N.parentElement.children),h=o(D.parentElement.children),G=N.closest(\"[hs-data-tab-select]\"),F=G?document.querySelector(G.getAttribute(\"data-hs-tab\")):null"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "B.forEach(function(W){return W.classList.remove(\"active\")}),h.forEach(function(W){return W.classList.add(\"hidden\")}),N.classList.add(\"active\"),D.classList.remove(\"hidden\"),this._fireEvent(\"change\",N),this._dispatch(\"change.hs.tab\",N,N),F&&(F.value=N.getAttribute(\"data-hs-tab\"))}},{key:\"_keyboardSupport\",value:function(N){var D=N.target.closest(this.selector)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(D){var B=D.closest('[role=\"tablist\"]').getAttribute(\"data-hs-tabs-vertical\")===\"true\""
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return(B?N.keyCode===38:N.keyCode===37)?(N.preventDefault(),this._left(D)):(B?N.keyCode===40:N.keyCode===39)?(N.preventDefault(),this._right(D)):N.keyCode===36?(N.preventDefault(),this._start(D)):N.keyCode===35?(N.preventDefault(),this._end(D)):void 0}}},{key:\"_right\",value:function(N){var D=N.closest('[role=\"tablist\"]')"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(D){var B=o(D.querySelectorAll(this.selector)).filter(function(F){return!F.disabled}),h=D.querySelector(\"button:focus\"),G=B.findIndex(function(F){return F===h})"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "G+1<B.length?G++:G=0,B[G].focus(),this.open(B[G])}}},{key:\"_left\",value:function(N){var D=N.closest('[role=\"tablist\"]')"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(D){var B=o(D.querySelectorAll(this.selector)).filter(function(F){return!F.disabled}).reverse(),h=D.querySelector(\"button:focus\"),G=B.findIndex(function(F){return F===h})"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "G+1<B.length?G++:G=0,B[G].focus(),this.open(B[G])}}},{key:\"_start\",value:function(N){var D=N.closest('[role=\"tablist\"]')"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(D){var B=o(D.querySelectorAll(this.selector)).filter(function(h){return!h.disabled})"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "B.length&&(B[0].focus(),this.open(B[0]))}}},{key:\"_end\",value:function(N){var D=N.closest('[role=\"tablist\"]')"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(D){var B=o(D.querySelectorAll(this.selector)).reverse().filter(function(h){return!h.disabled})"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "B.length&&(B[0].focus(),this.open(B[0]))}}}])&&_(I.prototype,u),Object.defineProperty(I,\"prototype\",{writable:!1}),O}(S(765).Z)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "window.HSTabs=new C,document.addEventListener(\"load\",window.HSTabs.init())},185:(n,s,S)=>{var A=S(765),o=S(714)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function i(L){return i=typeof Symbol==\"function\"&&typeof Symbol.iterator==\"symbol\"?function(I){return typeof I}:function(I){return I&&typeof Symbol==\"function\"&&I.constructor===Symbol&&I!==Symbol.prototype?\"symbol\":typeof I},i(L)}function _(L,I){for(var u=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "u<I.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "u++){var H=I[u]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "H.enumerable=H.enumerable||!1,H.configurable=!0,\"value\"in H&&(H.writable=!0),Object.defineProperty(L,H.key,H)}}function c(L,I){return c=Object.setPrototypeOf||function(u,H){return u.__proto__=H,u},c(L,I)}function P(L,I){if(I&&(i(I)===\"object\"||typeof I==\"function\"))return I"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(I!==void 0)throw new TypeError(\"Derived constructors may only return object or undefined\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return function(u){if(u===void 0)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return u}(L)}function p(L){return p=Object.setPrototypeOf?Object.getPrototypeOf:function(I){return I.__proto__||Object.getPrototypeOf(I)},p(L)}var C=function(L){(function(N,D){if(typeof D!=\"function\"&&D!==null)throw new TypeError(\"Super expression must either be null or a function\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "N.prototype=Object.create(D&&D.prototype,{constructor:{value:N,writable:!0,configurable:!0}}),Object.defineProperty(N,\"prototype\",{writable:!1}),D&&c(N,D)})(O,L)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "var I,u,H,b,M=(H=O,b=function(){if(typeof Reflect>\"u\"||!Reflect.construct||Reflect.construct.sham)return!1"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(typeof Proxy==\"function\")return!0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch{return!1}}(),function(){var N,D=p(H)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(b){var B=p(this).constructor"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "N=Reflect.construct(D,arguments,B)}else N=D.apply(this,arguments)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return P(this,N)})"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function O(){return function(N,D){if(!(N instanceof D))throw new TypeError(\"Cannot call a class as a function\")}(this,O),M.call(this,\".hs-tooltip\")}return I=O,(u=[{key:\"init\",value:function(){var N=this"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "document.addEventListener(\"click\",function(D){var B=D.target.closest(N.selector)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "B&&N.getClassProperty(B,\"\n          Download`),a(r,\"class\",\"mr-3 flex-1 w-0 truncate\"),a(S,\"d\",\"M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z\"),a(A,\"d\",\"M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z\"),a(s,\"class\",\"flex-shrink-0 w-3 h-3\"),a(s,\"width\",\"16\"),a(s,\"height\",\"16\"),a(s,\"viewBox\",\"0 0 16 16\"),a(s,\"fill\",\"currentColor\"),a(n,\"class\",\"flex items-center gap-x-2 text-gray-500 hover:text-blue-500 whitespace-nowrap\"),a(n,\"href\",i=\"/api/v0/download_csv?id=\"+E[0]),a(t,\"class\",\"w-full flex justify-between truncate\"),a(T,\"class\",\"flex items-center gap-x-2 p-3 text-sm bg-white border text-gray-800 first:rounded-t-lg first:mt-0 last:rounded-b-lg dark:bg-slate-900 dark:border-gray-700 dark:text-gray-200\"),a(e,\"class\",\"flex flex-col justify-end text-start -space-y-px\")},m(_,c){V(_,e,c),l(e,T),l(T,t),l(t,r),l(t,R),l(t,n),l(n,s),l(s,S),l(s,A),l(n,o)},p(_,[c]){c&1&&i!==(i=\"/api/v0/download_csv?id=\"+_[0])&&a(n,\"href\",i)},i:j,o:j,d(_){_&&Y(e)}}}function MA(E,e,T){let{id:t}=e"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return E.$$set=r=>{\"id\"in r&&T(0,t=r.id)},[t]}class UA extends ue{constructor(e){super(),Ce(this,e,MA,pA,_e,{id:0})}}function KT(E,e,T){const t=E.slice()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return t[5]=e[T],t}function JT(E,e,T){const t=E.slice()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return t[8]=e[T],t}function qT(E,e,T){const t=E.slice()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return t[8]=e[T],t}function QT(E){let e,T,t,r"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=f(\"th\"),T=f(\"div\"),t=f(\"span\"),t.textContent=`${E[8]}`,r=$(),a(t,\"class\",\"text-xs font-semibold uppercase tracking-wide text-gray-800 dark:text-gray-200\"),a(T,\"class\",\"flex items-center gap-x-2\"),a(e,\"scope\",\"col\"),a(e,\"class\",\"px-6 py-3 text-left\")},m(R,n){V(R,e,n),l(e,T),l(T,t),l(e,r)},p:j,d(R){R&&Y(e)}}}function ZT(E){let e,T,t"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=f(\"td\"),T=f(\"div\"),t=f(\"span\"),t.textContent=`${E[5][E[8]]}`,a(t,\"class\",\"text-gray-800 dark:text-gray-200\"),a(T,\"class\",\"px-6 py-3\"),a(e,\"class\",\"h-px w-px whitespace-nowrap\")},m(r,R){V(r,e,R),l(e,T),l(T,t)},p:j,d(r){r&&Y(e)}}}function jT(E){let e,T,t=De(E[3]),r=[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let R=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "R<t.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "R+=1)r[R]=ZT(JT(E,t,R))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=f(\"tr\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let R=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "R<r.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "R+=1)r[R].c()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "T=$()},m(R,n){V(R,e,n)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let s=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "s<r.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "s+=1)r[s]&&r[s].m(e,null)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "l(e,T)},p(R,n){if(n&12){t=De(R[3])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let s"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(s=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "s<t.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "s+=1){const S=JT(R,t,s)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r[s]?r[s].p(S,n):(r[s]=ZT(S),r[s].c(),r[s].m(e,T))}for("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "s<r.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "s+=1)r[s].d(1)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r.length=t.length}},d(R){R&&Y(e),nE(r,R)}}}function zT(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new UA({props:{id:E[0]}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&1&&(R.id=t[0]),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function mA(E){let e,T,t,r,R,n,s,S,A,o,i,_=De(E[3]),c=[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let L=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "L<_.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "L+=1)c[L]=QT(qT(E,_,L))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let P=De(E[2]),p=[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let L=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "L<P.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "L+=1)p[L]=jT(KT(E,P,L))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let C=E[1].csv_download&&zT(E)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=f(\"div\"),T=f(\"div\"),t=f(\"div\"),r=f(\"table\"),R=f(\"thead\"),n=f(\"tr\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let L=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "L<c.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "L+=1)c[L].c()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "s=$(),S=f(\"tbody\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let L=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "L<p.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "L+=1)p[L].c()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "A=$(),C&&C.c(),o=je(),a(R,\"class\",\"bg-gray-50 dark:bg-slate-800\"),a(S,\"class\",\"divide-y divide-gray-200 dark:divide-gray-700\"),a(r,\"class\",\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\"),a(t,\"class\",\"p-1.5 min-w-full inline-block align-middle\"),a(T,\"class\",\"-m-1.5 overflow-x-auto\"),a(e,\"class\",\"bg-white border border-gray-200 rounded-xl shadow-sm overflow-hidden dark:bg-slate-900 dark:border-gray-700\")},m(L,I){V(L,e,I),l(e,T),l(T,t),l(t,r),l(r,R),l(R,n)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let u=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "u<c.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "u+=1)c[u]&&c[u].m(n,null)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "l(r,s),l(r,S)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let u=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "u<p.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "u+=1)p[u]&&p[u].m(S,null)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "V(L,A,I),C&&C.m(L,I),V(L,o,I),i=!0},p(L,[I]){if(I&8){_=De(L[3])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let u"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(u=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "u<_.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "u+=1){const H=qT(L,_,u)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "c[u]?c[u].p(H,I):(c[u]=QT(H),c[u].c(),c[u].m(n,null))}for("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "u<c.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "u+=1)c[u].d(1)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "c.length=_.length}if(I&12){P=De(L[2])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let u"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(u=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "u<P.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "u+=1){const H=KT(L,P,u)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "p[u]?p[u].p(H,I):(p[u]=jT(H),p[u].c(),p[u].m(S,null))}for("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "u<p.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "u+=1)p[u].d(1)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "p.length=P.length}L[1].csv_download?C?(C.p(L,I),I&2&&m(C,1)):(C=zT(L),C.c(),m(C,1),C.m(o.parentNode,o)):C&&(Ge(),y(C,1,1,()=>{C=null}),ge())},i(L){i||(m(C),i=!0)},o(L){y(C),i=!1},d(L){L&&(Y(e),Y(A),Y(o)),nE(c,L),nE(p,L),C&&C.d(L)}}}function hA(E,e,T){let t"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "eE(E,VE,S=>T(1,t=S))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let{id:r}=e,{df:R}=e,n=JSON.parse(R),s=n.length>0?Object.keys(n[0]):[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return E.$$set=S=>{\"id\"in S&&T(0,r=S.id),\"df\"in S&&T(4,R=S.df)},[r,t,n,s,R]}class gR extends ue{constructor(e){super(),Ce(this,e,hA,mA,_e,{id:0,df:4})}}function GA(E){let e"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=f(\"div\"),a(e,\"id\",E[0])},m(T,t){V(T,e,t)},p:j,i:j,o:j,d(T){T&&Y(e)}}}function gA(E,e,T){let{fig:t}=e,r=JSON.parse(t),R=Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return DR(()=>{Plotly.newPlot(document.getElementById(R),r,{responsive:!0})}),E.$$set=n=>{\"fig\"in n&&T(1,t=n.fig)},[R,t]}class HR extends ue{constructor(e){super(),Ce(this,e,gA,GA,_e,{fig:1})}}function HA(E){let e,T,t,r"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=f(\"button\"),T=te(E[0]),a(e,\"type\",\"button\"),a(e,\"class\",\"mb-2.5 mr-1.5 py-3 px-4 inline-flex justify-center items-center gap-2 rounded-md border-2 border-green-200 font-semibold text-green-500 hover:text-white hover:bg-green-500 hover:border-green-500 focus:outline-none focus:ring-2 focus:ring-green-200 focus:ring-offset-2 transition-all text-sm dark:focus:ring-offset-gray-800\")},m(R,n){V(R,e,n),l(e,T),t||(r=Ne(e,\"click\",E[1]),t=!0)},p(R,[n]){n&1&&Le(T,R[0])},i:j,o:j,d(R){R&&Y(e),t=!1,r()}}}function bA(E,e,T){let{message:t}=e,{onSubmit:r}=e"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function R(){r(t)}return E.$$set=n=>{\"message\"in n&&T(0,t=n.message),\"onSubmit\"in n&&T(2,r=n.onSubmit)},[t,R,r]}class yA extends ue{constructor(e){super(),Ce(this,e,bA,HA,_e,{message:0,onSubmit:2})}}function BA(E){let e,T,t,r,R,n,s,S,A"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=f(\"div\"),T=f(\"div\"),t=f(\"div\"),t.innerHTML='<svg class=\"h-4 w-4 text-yellow-400 mt-0.5\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path d=\"M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z\"></path></svg>',r=$(),R=f(\"div\"),n=f(\"h3\"),n.textContent=\"Error\",s=$(),S=f(\"div\"),A=te(E[0]),a(t,\"class\",\"flex-shrink-0\"),a(n,\"class\",\"text-sm text-yellow-800 font-semibold\"),a(S,\"class\",\"mt-1 text-sm text-yellow-700\"),a(R,\"class\",\"ml-4\"),a(T,\"class\",\"flex\"),a(e,\"class\",\"bg-yellow-50 border border-yellow-200 rounded-md p-4\"),a(e,\"role\",\"alert\")},m(o,i){V(o,e,i),l(e,T),l(T,t),l(T,r),l(T,R),l(R,n),l(R,s),l(R,S),l(S,A)},p(o,[i]){i&1&&Le(A,o[0])},i:j,o:j,d(o){o&&Y(e)}}}function vA(E,e,T){let{message:t}=e"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return E.$$set=r=>{\"message\"in r&&T(0,t=r.message)},[t]}let PT=class extends ue{constructor(e){super(),Ce(this,e,vA,BA,_e,{message:0})}}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function FA(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const t=E[1].default,r=Ut(t,E,E[0],null)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=f(\"div\"),r&&r.c(),a(e,\"class\",\"font-mono whitespace-pre-wrap\")},m(R,n){V(R,e,n),r&&r.m(e,null),T=!0},p(R,[n]){r&&r.p&&(!T||n&1)&&ht(r,t,R,R[0],T?mt(t,R[0],n,null):Gt(R[0]),null)},i(R){T||(m(r,R),T=!0)},o(R){y(r,R),T=!1},d(R){R&&Y(e),r&&r.d(R)}}}function YA(E,e,T){let{$$slots:t={},$$scope:r}=e"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return E.$$set=R=>{\"$$scope\"in R&&T(0,r=R.$$scope)},[r,t]}class bR extends ue{constructor(e){super(),Ce(this,e,YA,FA,_e,{})}}function VA(E){let e"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=te(E[1])},m(T,t){V(T,e,t)},p(T,t){t&2&&Le(e,T[1])},d(T){T&&Y(e)}}}function WA(E){let e,T,t,r,R,n,s,S"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return t=new IE({props:{message:\"Run SQL\",onSubmit:E[3]}}),R=new aE({props:{$$slots:{default:[VA]},$$scope:{ctx:E}}}),{c(){e=f(\"textarea\"),T=$(),K(t.$$.fragment),r=$(),K(R.$$.fragment),a(e,\"rows\",\"6\"),a(e,\"class\",\"block p-2.5 w-full text-blue-600 hover:text-blue-500 dark:text-blue-500 dark:hover:text-blue-400 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500 font-mono\"),a(e,\"placeholder\",\"SELECT col1, col2, col3 FROM ...\")},m(A,o){V(A,e,o),Ye(e,E[1]),V(A,T,o),X(t,A,o),V(A,r,o),X(R,A,o),n=!0,s||(S=Ne(e,\"input\",E[2]),s=!0)},p(A,[o]){o&2&&Ye(e,A[1])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const i={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "o&3&&(i.onSubmit=A[3]),t.$set(i)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const _={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "o&18&&(_.$$scope={dirty:o,ctx:A}),R.$set(_)},i(A){n||(m(t.$$.fragment,A),m(R.$$.fragment,A),n=!0)},o(A){y(t.$$.fragment,A),y(R.$$.fragment,A),n=!1},d(A){A&&(Y(e),Y(T),Y(r)),k(t,A),k(R,A),s=!1,S()}}}function wA(E,e,T){let t"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "eE(E,Et,s=>T(1,t=s))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let{onSubmit:r}=e"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function R(){t=this.value,Et.set(t)}const n=()=>r(t)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return E.$$set=s=>{\"onSubmit\"in s&&T(0,r=s.onSubmit)},[r,t,R,n]}class $A extends ue{constructor(e){super(),Ce(this,e,wA,WA,_e,{onSubmit:0})}}function xA(E){let e,T,t,r,R,n"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return t=new IE({props:{message:E[3],onSubmit:E[5]}}),{c(){e=f(\"textarea\"),T=$(),K(t.$$.fragment),a(e,\"rows\",\"6\"),a(e,\"class\",\"block p-2.5 w-full text-blue-600 hover:text-blue-500 dark:text-blue-500 dark:hover:text-blue-400 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500 font-mono\"),a(e,\"placeholder\",E[2])},m(s,S){V(s,e,S),Ye(e,E[0]),V(s,T,S),X(t,s,S),r=!0,R||(n=Ne(e,\"input\",E[4]),R=!0)},p(s,[S]){(!r||S&4)&&a(e,\"placeholder\",s[2]),S&1&&Ye(e,s[0])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const A={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "S&8&&(A.message=s[3]),S&3&&(A.onSubmit=s[5]),t.$set(A)},i(s){r||(m(t.$$.fragment,s),r=!0)},o(s){y(t.$$.fragment,s),r=!1},d(s){s&&(Y(e),Y(T)),k(t,s),R=!1,n()}}}function XA(E,e,T){let{onSubmit:t}=e,{currentValue:r}=e,{placeholder:R}=e,{buttonText:n}=e"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function s(){r=this.value,T(0,r)}const S=()=>t(r)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return E.$$set=A=>{\"onSubmit\"in A&&T(1,t=A.onSubmit),\"currentValue\"in A&&T(0,r=A.currentValue),\"placeholder\"in A&&T(2,R=A.placeholder),\"buttonText\"in A&&T(3,n=A.buttonText)},[r,t,R,n,s,S]}class kA extends ue{constructor(e){super(),Ce(this,e,XA,xA,_e,{onSubmit:1,currentValue:0,placeholder:2,buttonText:3})}}function KA(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new IE({props:{message:\"Play\",onSubmit:E[2]}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,[r]){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&1&&(R.onSubmit=t[2]),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function er(E){if(\"speechSynthesis\"in window){const e=new SpeechSynthesisUtterance(E)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "e.lang=\"en-US\",e.volume=1,e.rate=1,e.pitch=1,window.speechSynthesis.speak(e)}else console.error(\"SpeechSynthesis API is not supported in this browser.\")}function JA(E,e,T){let t"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "eE(E,pR,n=>T(1,t=n))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let{message:r}=e"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const R=()=>er(r)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return E.$$set=n=>{\"message\"in n&&T(0,r=n.message)},E.$$.update=()=>{E.$$.dirty&3&&t&&er(r)},[r,t,R]}class qA extends ue{constructor(e){super(),Ce(this,e,JA,KA,_e,{message:0})}}function QA(E){let e,T,t"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=f(\"button\"),e.textContent=\"Open Debugger\",T=$(),t=f(\"div\"),t.innerHTML='<div class=\"flex justify-between items-center py-3 px-4 border-b dark:border-neutral-700\"><h3 class=\"font-bold text-gray-800 dark:text-white\">Server Logs</h3> <button type=\"button\" class=\"flex justify-center items-center size-7 text-sm font-semibold rounded-full border border-transparent text-gray-800 hover:bg-gray-100 disabled:opacity-50 disabled:pointer-events-none dark:text-white dark:hover:bg-neutral-700\" data-hs-overlay=\"#hs-overlay-right\"><span class=\"sr-only\">Close modal</span> <svg class=\"flex-shrink-0 size-4\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M18 6 6 18\"></path><path d=\"m6 6 12 12\"></path></svg></button></div> <div class=\"p-4\"><p id=\"log-contents\" class=\"text-gray-800 dark:text-neutral-400\"></p></div>',a(e,\"type\",\"button\"),a(e,\"class\",\"absolute top-0 right-0 m-1 ms-0 py-3 px-4 inline-flex items-center gap-x-2 text-sm font-semibold rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none\"),a(e,\"data-hs-overlay\",\"#hs-overlay-right\"),a(t,\"id\",\"hs-overlay-right\"),a(t,\"class\",\"hs-overlay hs-overlay-open:translate-x-0 hidden translate-x-full fixed top-0 end-0 transition-all duration-300 transform h-full max-w-xs w-full z-[80] bg-white border-s dark:bg-neutral-800 dark:border-neutral-700 [\n`&&(this.line+=1,this.lastLineBreak=this.index),{value:A}}},R.prototype.save=function(){return{line:this.line,col:this.index-this.lastLineBreak}},R.prototype.formatError=function(A,o){var i=this.buffer"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(typeof i==\"string\"){var _=i.split(`\n`).slice(Math.max(0,this.line-5),this.line),c=i.indexOf(`\n`,this.index)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "c===-1&&(c=i.length)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "var P=this.index-this.lastLineBreak,p=String(this.line).length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return o+=\" at line \"+this.line+\" col \"+P+`:\n\n`,o+=_.map(function(L,I){return C(this.line-_.length+I+1,p)+\" \"+L},this).join(`\n`),o+=`\n`+C(\"\",p+P)+`^\n`,o}else return o+\" at index \"+(this.index-1)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function C(L,I){var u=String(L)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return Array(I-u.length+1).join(\" \")+u}}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function n(A,o,i){if(A instanceof r)var _=A,i=o"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "else var _=r.fromCompiled(A,o)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "this.grammar=_,this.options={keepHistory:!1,lexer:_.lexer||new R}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(var c in i||{})this.options[c]=i[c]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "this.lexer=this.options.lexer,this.lexerState=void 0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "var P=new t(_,0)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "this.table=[P],P.wants[_.start]=[],P.predict(_.start),P.process(),this.current=0}n.fail={},n.prototype.feed=function(A){var o=this.lexer"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "o.reset(A,this.lexerState)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(var i"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "){try{if(i=o.next(),!i)break}catch(O){var p=new t(this.grammar,this.current+1)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "this.table.push(p)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "var _=new Error(this.reportLexerError(O))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "throw _.offset=this.current,_.token=O.token,_}var c=this.table[this.current]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "this.options.keepHistory||delete this.table[this.current-1]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "var P=this.current+1,p=new t(this.grammar,P)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "this.table.push(p)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(var C=i.text!==void 0?i.text:i.value,L=o.constructor===R?i.value:i,I=c.scannable,u=I.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "u\n`),this.displayStateStack(c.states,i)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "else{i.push(\"Unexpected \"+o+`. Instead, I was expecting to see one of the following:\n`)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "var p=P.map(function(C){return this.buildFirstStateStack(C,[])||[C]},this)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "p.forEach(function(C){var L=C[0],I=L.rule.symbols[L.dot],u=this.getSymbolDisplay(I)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "i.push(\"A \"+u+\" based on:\"),this.displayStateStack(C,i)},this)}return i.push(\"\"),i.join(`\n`)},n.prototype.displayStateStack=function(A,o){for(var i,_=0,c=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "c<A.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "c++){var P=A[c],p=P.rule.toString(P.dot)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "p===i?_++:(_>0&&o.push(\"    ^ \"+_+\" more lines identical to this\"),_=0,o.push(\"    \"+p)),i=p}},n.prototype.getSymbolDisplay=function(A){return s(A)},n.prototype.buildFirstStateStack=function(A,o){if(o.indexOf(A)!==-1)return null"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(A.wantedBy.length===0)return[A]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "var i=A.wantedBy[0],_=[A].concat(o),c=this.buildFirstStateStack(i,_)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return c===null?null:[A].concat(c)},n.prototype.save=function(){var A=this.table[this.current]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return A.lexerState=this.lexerState,A},n.prototype.restore=function(A){var o=A.index"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "this.current=o,this.table[o]=A,this.table.splice(o+1),this.lexerState=A.lexerState,this.results=this.finish()},n.prototype.rewind=function(A){if(!this.options.keepHistory)throw new Error(\"set option `keepHistory` to enable rewinding\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "this.restore(this.table[A])},n.prototype.finish=function(){var A=[],o=this.grammar.start,i=this.table[this.table.length-1]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return i.states.forEach(function(_){_.rule.name===o&&_.dot===_.rule.symbols.length&&_.reference===0&&_.data!==n.fail&&A.push(_)}),A.map(function(_){return _.data})}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function s(A){var o=typeof A"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(o===\"string\")return A"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(o===\"object\"){if(A.literal)return JSON.stringify(A.literal)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(A instanceof RegExp)return\"character matching \"+A"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(A.type)return A.type+\" token\""
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(A.test)return\"token matching \"+String(A.test)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "throw new Error(\"Unknown symbol type: \"+A)}}function S(A){var o=typeof A"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(o===\"string\")return A"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(o===\"object\"){if(A.literal)return JSON.stringify(A.literal)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(A instanceof RegExp)return A.toString()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(A.type)return\"%\"+A.type"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(A.test)return\"<\"+String(A.test)+\">\""
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "throw new Error(\"Unknown symbol type: \"+A)}}return{Parser:n,Grammar:r,Rule:e}})})(yR)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "var jA=yR.exports"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const zA=qn(jA)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "var BR=Object.defineProperty,es=Object.defineProperties,Es=Object.getOwnPropertyDescriptors,Mt=Object.getOwnPropertySymbols,vR=Object.prototype.hasOwnProperty,FR=Object.prototype.propertyIsEnumerable,Er=(E,e,T)=>e in E?BR(E,e,{enumerable:!0,configurable:!0,writable:!0,value:T}):E[e]=T,EE=(E,e)=>{for(var T in e||(e={}))vR.call(e,T)&&Er(E,T,e[T])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(Mt)for(var T of Mt(e))FR.call(e,T)&&Er(E,T,e[T])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return E},AE=(E,e)=>es(E,Es(e)),ts=(E,e)=>{var T={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(var t in E)vR.call(E,t)&&e.indexOf(t)<0&&(T[t]=E[t])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(E!=null&&Mt)for(var t of Mt(E))e.indexOf(t)<0&&FR.call(E,t)&&(T[t]=E[t])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return T},Ts=(E,e)=>{for(var T in e)BR(E,T,{get:e[T],enumerable:!0})},YR={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "Ts(YR,{bigquery:()=>cs,db2:()=>bs,db2i:()=>$s,hive:()=>js,mariadb:()=>AS,mysql:()=>lS,n1ql:()=>bS,plsql:()=>$S,postgresql:()=>zS,redshift:()=>so,singlestoredb:()=>oO,snowflake:()=>CO,spark:()=>_o,sql:()=>vo,sqlite:()=>Uo,tidb:()=>dS,transactsql:()=>EO,trino:()=>ko})"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "var v=E=>E.flatMap(rs),rs=E=>Pt(ns(E)).map(Rs),Rs=E=>E.replace(/ +/g,\" \").trim(),ns=E=>({type:\"mandatory_block\",items:DT(E,0)[0]}),DT=(E,e,T)=>{const t=[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "E[e]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "){const[r,R]=As(E,e)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(t.push(r),e=R,E[e]===\"|\")e++"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "else if(E[e]===\"}\"||E[e]===\"]\"){if(T!==E[e])throw new Error(`Unbalanced parenthesis in: ${E}`)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e++,[t,e]}else if(e===E.length){if(T)throw new Error(`Unbalanced parenthesis in: ${E}`)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return[t,e]}else throw new Error(`Unexpected \"${E[e]}\"`)}return[t,e]},As=(E,e)=>{const T=[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "){const[t,r]=ss(E,e)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(t)T.push(t),e=r"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "else break}return T.length===1?[T[0],e]:[{type:\"concatenation\",items:T},e]},ss=(E,e)=>{if(E[e]===\"{\")return Ss(E,e+1)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(E[e]===\"[\")return os(E,e+1)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "{let T=\"\""
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "E[e]&&/[A-Za-z0-9_ ]/.test(E[e])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ")T+=E[e],e++"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return[T,e]}},Ss=(E,e)=>{const[T,t]=DT(E,e,\"}\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return[{type:\"mandatory_block\",items:T},t]},os=(E,e)=>{const[T,t]=DT(E,e,\"]\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return[{type:\"optional_block\",items:T},t]},Pt=E=>{if(typeof E==\"string\")return[E]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(E.type===\"concatenation\")return E.items.map(Pt).reduce(Os,[\"\"])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(E.type===\"mandatory_block\")return E.items.flatMap(Pt)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(E.type===\"optional_block\")return[\"\",...E.items.flatMap(Pt)]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "throw new Error(`Unknown node type: ${E}`)},Os=(E,e)=>{const T=[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(const t of E)for(const r of e)T.push(t+r)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return T},VR=(E=>(E.QUOTED_IDENTIFIER=\"QUOTED_IDENTIFIER\",E.IDENTIFIER=\"IDENTIFIER\",E.STRING=\"STRING\",E.VARIABLE=\"VARIABLE\",E.RESERVED_DATA_TYPE=\"RESERVED_DATA_TYPE\",E.RESERVED_PARAMETERIZED_DATA_TYPE=\"RESERVED_PARAMETERIZED_DATA_TYPE\",E.RESERVED_KEYWORD=\"RESERVED_KEYWORD\",E.RESERVED_FUNCTION_NAME=\"RESERVED_FUNCTION_NAME\",E.RESERVED_PHRASE=\"RESERVED_PHRASE\",E.RESERVED_SET_OPERATION=\"RESERVED_SET_OPERATION\",E.RESERVED_CLAUSE=\"RESERVED_CLAUSE\",E.RESERVED_SELECT=\"RESERVED_SELECT\",E.RESERVED_JOIN=\"RESERVED_JOIN\",E.ARRAY_IDENTIFIER=\"ARRAY_IDENTIFIER\",E.ARRAY_KEYWORD=\"ARRAY_KEYWORD\",E.CASE=\"CASE\",E.END=\"END\",E.WHEN=\"WHEN\",E.ELSE=\"ELSE\",E.THEN=\"THEN\",E.LIMIT=\"LIMIT\",E.BETWEEN=\"BETWEEN\",E.AND=\"AND\",E.OR=\"OR\",E.XOR=\"XOR\",E.OPERATOR=\"OPERATOR\",E.COMMA=\"COMMA\",E.ASTERISK=\"ASTERISK\",E.PROPERTY_ACCESS_OPERATOR=\"PROPERTY_ACCESS_OPERATOR\",E.OPEN_PAREN=\"OPEN_PAREN\",E.CLOSE_PAREN=\"CLOSE_PAREN\",E.LINE_COMMENT=\"LINE_COMMENT\",E.BLOCK_COMMENT=\"BLOCK_COMMENT\",E.DISABLE_COMMENT=\"DISABLE_COMMENT\",E.NUMBER=\"NUMBER\",E.NAMED_PARAMETER=\"NAMED_PARAMETER\",E.QUOTED_PARAMETER=\"QUOTED_PARAMETER\",E.NUMBERED_PARAMETER=\"NUMBERED_PARAMETER\",E.POSITIONAL_PARAMETER=\"POSITIONAL_PARAMETER\",E.CUSTOM_PARAMETER=\"CUSTOM_PARAMETER\",E.DELIMITER=\"DELIMITER\",E.EOF=\"EOF\",E))(VR||{}),WR=E=>({type:\"EOF\",raw:\"«EOF»\",text:\"«EOF»\",start:E}),tt=WR(1/0),QE=E=>e=>e.type===E.type&&e.text===E.text,FE={ARRAY:QE({text:\"ARRAY\",type:\"RESERVED_DATA_TYPE\"}),BY:QE({text:\"BY\",type:\"RESERVED_KEYWORD\"}),SET:QE({text:\"SET\",type:\"RESERVED_CLAUSE\"}),STRUCT:QE({text:\"STRUCT\",type:\"RESERVED_DATA_TYPE\"}),WINDOW:QE({text:\"WINDOW\",type:\"RESERVED_CLAUSE\"}),VALUES:QE({text:\"VALUES\",type:\"RESERVED_CLAUSE\"})},wR=E=>E===\"RESERVED_DATA_TYPE\"||E===\"RESERVED_KEYWORD\"||E===\"RESERVED_FUNCTION_NAME\"||E===\"RESERVED_PHRASE\"||E===\"RESERVED_CLAUSE\"||E===\"RESERVED_SELECT\"||E===\"RESERVED_SET_OPERATION\"||E===\"RESERVED_JOIN\"||E===\"ARRAY_KEYWORD\"||E===\"CASE\"||E===\"END\"||E===\"WHEN\"||E===\"ELSE\"||E===\"THEN\"||E===\"LIMIT\"||E===\"BETWEEN\"||E===\"AND\"||E===\"OR\"||E===\"XOR\",is=E=>E===\"AND\"||E===\"OR\"||E===\"XOR\",as=[\"KEYS.NEW_KEYSET\",\"KEYS.ADD_KEY_FROM_RAW_BYTES\",\"AEAD.DECRYPT_BYTES\",\"AEAD.DECRYPT_STRING\",\"AEAD.ENCRYPT\",\"KEYS.KEYSET_CHAIN\",\"KEYS.KEYSET_FROM_JSON\",\"KEYS.KEYSET_TO_JSON\",\"KEYS.ROTATE_KEYSET\",\"KEYS.KEYSET_LENGTH\",\"ANY_VALUE\",\"ARRAY_AGG\",\"AVG\",\"CORR\",\"COUNT\",\"COUNTIF\",\"COVAR_POP\",\"COVAR_SAMP\",\"MAX\",\"MIN\",\"ST_CLUSTERDBSCAN\",\"STDDEV_POP\",\"STDDEV_SAMP\",\"STRING_AGG\",\"SUM\",\"VAR_POP\",\"VAR_SAMP\",\"ANY_VALUE\",\"ARRAY_AGG\",\"ARRAY_CONCAT_AGG\",\"AVG\",\"BIT_AND\",\"BIT_OR\",\"BIT_XOR\",\"COUNT\",\"COUNTIF\",\"LOGICAL_AND\",\"LOGICAL_OR\",\"MAX\",\"MIN\",\"STRING_AGG\",\"SUM\",\"APPROX_COUNT_DISTINCT\",\"APPROX_QUANTILES\",\"APPROX_TOP_COUNT\",\"APPROX_TOP_SUM\",\"ARRAY_CONCAT\",\"ARRAY_LENGTH\",\"ARRAY_TO_STRING\",\"GENERATE_ARRAY\",\"GENERATE_DATE_ARRAY\",\"GENERATE_TIMESTAMP_ARRAY\",\"ARRAY_REVERSE\",\"OFFSET\",\"SAFE_OFFSET\",\"ORDINAL\",\"SAFE_ORDINAL\",\"BIT_COUNT\",\"PARSE_BIGNUMERIC\",\"PARSE_NUMERIC\",\"SAFE_CAST\",\"CURRENT_DATE\",\"EXTRACT\",\"DATE\",\"DATE_ADD\",\"DATE_SUB\",\"DATE_DIFF\",\"DATE_TRUNC\",\"DATE_FROM_UNIX_DATE\",\"FORMAT_DATE\",\"LAST_DAY\",\"PARSE_DATE\",\"UNIX_DATE\",\"CURRENT_DATETIME\",\"DATETIME\",\"EXTRACT\",\"DATETIME_ADD\",\"DATETIME_SUB\",\"DATETIME_DIFF\",\"DATETIME_TRUNC\",\"FORMAT_DATETIME\",\"LAST_DAY\",\"PARSE_DATETIME\",\"ERROR\",\"EXTERNAL_QUERY\",\"S2_CELLIDFROMPOINT\",\"S2_COVERINGCELLIDS\",\"ST_ANGLE\",\"ST_AREA\",\"ST_ASBINARY\",\"ST_ASGEOJSON\",\"ST_ASTEXT\",\"ST_AZIMUTH\",\"ST_BOUNDARY\",\"ST_BOUNDINGBOX\",\"ST_BUFFER\",\"ST_BUFFERWITHTOLERANCE\",\"ST_CENTROID\",\"ST_CENTROID_AGG\",\"ST_CLOSESTPOINT\",\"ST_CLUSTERDBSCAN\",\"ST_CONTAINS\",\"ST_CONVEXHULL\",\"ST_COVEREDBY\",\"ST_COVERS\",\"ST_DIFFERENCE\",\"ST_DIMENSION\",\"ST_DISJOINT\",\"ST_DISTANCE\",\"ST_DUMP\",\"ST_DWITHIN\",\"ST_ENDPOINT\",\"ST_EQUALS\",\"ST_EXTENT\",\"ST_EXTERIORRING\",\"ST_GEOGFROM\",\"ST_GEOGFROMGEOJSON\",\"ST_GEOGFROMTEXT\",\"ST_GEOGFROMWKB\",\"ST_GEOGPOINT\",\"ST_GEOGPOINTFROMGEOHASH\",\"ST_GEOHASH\",\"ST_GEOMETRYTYPE\",\"ST_INTERIORRINGS\",\"ST_INTERSECTION\",\"ST_INTERSECTS\",\"ST_INTERSECTSBOX\",\"ST_ISCOLLECTION\",\"ST_ISEMPTY\",\"ST_LENGTH\",\"ST_MAKELINE\",\"ST_MAKEPOLYGON\",\"ST_MAKEPOLYGONORIENTED\",\"ST_MAXDISTANCE\",\"ST_NPOINTS\",\"ST_NUMGEOMETRIES\",\"ST_NUMPOINTS\",\"ST_PERIMETER\",\"ST_POINTN\",\"ST_SIMPLIFY\",\"ST_SNAPTOGRID\",\"ST_STARTPOINT\",\"ST_TOUCHES\",\"ST_UNION\",\"ST_UNION_AGG\",\"ST_WITHIN\",\"ST_X\",\"ST_Y\",\"FARM_FINGERPRINT\",\"MD5\",\"SHA1\",\"SHA256\",\"SHA512\",\"HLL_COUNT.INIT\",\"HLL_COUNT.MERGE\",\"HLL_COUNT.MERGE_PARTIAL\",\"HLL_COUNT.EXTRACT\",\"MAKE_INTERVAL\",\"EXTRACT\",\"JUSTIFY_DAYS\",\"JUSTIFY_HOURS\",\"JUSTIFY_INTERVAL\",\"JSON_EXTRACT\",\"JSON_QUERY\",\"JSON_EXTRACT_SCALAR\",\"JSON_VALUE\",\"JSON_EXTRACT_ARRAY\",\"JSON_QUERY_ARRAY\",\"JSON_EXTRACT_STRING_ARRAY\",\"JSON_VALUE_ARRAY\",\"TO_JSON_STRING\",\"ABS\",\"SIGN\",\"IS_INF\",\"IS_NAN\",\"IEEE_DIVIDE\",\"RAND\",\"SQRT\",\"POW\",\"POWER\",\"EXP\",\"LN\",\"LOG\",\"LOG10\",\"GREATEST\",\"LEAST\",\"DIV\",\"SAFE_DIVIDE\",\"SAFE_MULTIPLY\",\"SAFE_NEGATE\",\"SAFE_ADD\",\"SAFE_SUBTRACT\",\"MOD\",\"ROUND\",\"TRUNC\",\"CEIL\",\"CEILING\",\"FLOOR\",\"COS\",\"COSH\",\"ACOS\",\"ACOSH\",\"SIN\",\"SINH\",\"ASIN\",\"ASINH\",\"TAN\",\"TANH\",\"ATAN\",\"ATANH\",\"ATAN2\",\"RANGE_BUCKET\",\"FIRST_VALUE\",\"LAST_VALUE\",\"NTH_VALUE\",\"LEAD\",\"LAG\",\"PERCENTILE_CONT\",\"PERCENTILE_DISC\",\"NET.IP_FROM_STRING\",\"NET.SAFE_IP_FROM_STRING\",\"NET.IP_TO_STRING\",\"NET.IP_NET_MASK\",\"NET.IP_TRUNC\",\"NET.IPV4_FROM_INT64\",\"NET.IPV4_TO_INT64\",\"NET.HOST\",\"NET.PUBLIC_SUFFIX\",\"NET.REG_DOMAIN\",\"RANK\",\"DENSE_RANK\",\"PERCENT_RANK\",\"CUME_DIST\",\"NTILE\",\"ROW_NUMBER\",\"SESSION_USER\",\"CORR\",\"COVAR_POP\",\"COVAR_SAMP\",\"STDDEV_POP\",\"STDDEV_SAMP\",\"STDDEV\",\"VAR_POP\",\"VAR_SAMP\",\"VARIANCE\",\"ASCII\",\"BYTE_LENGTH\",\"CHAR_LENGTH\",\"CHARACTER_LENGTH\",\"CHR\",\"CODE_POINTS_TO_BYTES\",\"CODE_POINTS_TO_STRING\",\"CONCAT\",\"CONTAINS_SUBSTR\",\"ENDS_WITH\",\"FORMAT\",\"FROM_BASE32\",\"FROM_BASE64\",\"FROM_HEX\",\"INITCAP\",\"INSTR\",\"LEFT\",\"LENGTH\",\"LPAD\",\"LOWER\",\"LTRIM\",\"NORMALIZE\",\"NORMALIZE_AND_CASEFOLD\",\"OCTET_LENGTH\",\"REGEXP_CONTAINS\",\"REGEXP_EXTRACT\",\"REGEXP_EXTRACT_ALL\",\"REGEXP_INSTR\",\"REGEXP_REPLACE\",\"REGEXP_SUBSTR\",\"REPLACE\",\"REPEAT\",\"REVERSE\",\"RIGHT\",\"RPAD\",\"RTRIM\",\"SAFE_CONVERT_BYTES_TO_STRING\",\"SOUNDEX\",\"SPLIT\",\"STARTS_WITH\",\"STRPOS\",\"SUBSTR\",\"SUBSTRING\",\"TO_BASE32\",\"TO_BASE64\",\"TO_CODE_POINTS\",\"TO_HEX\",\"TRANSLATE\",\"TRIM\",\"UNICODE\",\"UPPER\",\"CURRENT_TIME\",\"TIME\",\"EXTRACT\",\"TIME_ADD\",\"TIME_SUB\",\"TIME_DIFF\",\"TIME_TRUNC\",\"FORMAT_TIME\",\"PARSE_TIME\",\"CURRENT_TIMESTAMP\",\"EXTRACT\",\"STRING\",\"TIMESTAMP\",\"TIMESTAMP_ADD\",\"TIMESTAMP_SUB\",\"TIMESTAMP_DIFF\",\"TIMESTAMP_TRUNC\",\"FORMAT_TIMESTAMP\",\"PARSE_TIMESTAMP\",\"TIMESTAMP_SECONDS\",\"TIMESTAMP_MILLIS\",\"TIMESTAMP_MICROS\",\"UNIX_SECONDS\",\"UNIX_MILLIS\",\"UNIX_MICROS\",\"GENERATE_UUID\",\"COALESCE\",\"IF\",\"IFNULL\",\"NULLIF\",\"AVG\",\"BIT_AND\",\"BIT_OR\",\"BIT_XOR\",\"CORR\",\"COUNT\",\"COVAR_POP\",\"COVAR_SAMP\",\"EXACT_COUNT_DISTINCT\",\"FIRST\",\"GROUP_CONCAT\",\"GROUP_CONCAT_UNQUOTED\",\"LAST\",\"MAX\",\"MIN\",\"NEST\",\"NTH\",\"QUANTILES\",\"STDDEV\",\"STDDEV_POP\",\"STDDEV_SAMP\",\"SUM\",\"TOP\",\"UNIQUE\",\"VARIANCE\",\"VAR_POP\",\"VAR_SAMP\",\"BIT_COUNT\",\"BOOLEAN\",\"BYTES\",\"CAST\",\"FLOAT\",\"HEX_STRING\",\"INTEGER\",\"STRING\",\"COALESCE\",\"GREATEST\",\"IFNULL\",\"IS_INF\",\"IS_NAN\",\"IS_EXPLICITLY_DEFINED\",\"LEAST\",\"NVL\",\"CURRENT_DATE\",\"CURRENT_TIME\",\"CURRENT_TIMESTAMP\",\"DATE\",\"DATE_ADD\",\"DATEDIFF\",\"DAY\",\"DAYOFWEEK\",\"DAYOFYEAR\",\"FORMAT_UTC_USEC\",\"HOUR\",\"MINUTE\",\"MONTH\",\"MSEC_TO_TIMESTAMP\",\"NOW\",\"PARSE_UTC_USEC\",\"QUARTER\",\"SEC_TO_TIMESTAMP\",\"SECOND\",\"STRFTIME_UTC_USEC\",\"TIME\",\"TIMESTAMP\",\"TIMESTAMP_TO_MSEC\",\"TIMESTAMP_TO_SEC\",\"TIMESTAMP_TO_USEC\",\"USEC_TO_TIMESTAMP\",\"UTC_USEC_TO_DAY\",\"UTC_USEC_TO_HOUR\",\"UTC_USEC_TO_MONTH\",\"UTC_USEC_TO_WEEK\",\"UTC_USEC_TO_YEAR\",\"WEEK\",\"YEAR\",\"FORMAT_IP\",\"PARSE_IP\",\"FORMAT_PACKED_IP\",\"PARSE_PACKED_IP\",\"JSON_EXTRACT\",\"JSON_EXTRACT_SCALAR\",\"ABS\",\"ACOS\",\"ACOSH\",\"ASIN\",\"ASINH\",\"ATAN\",\"ATANH\",\"ATAN2\",\"CEIL\",\"COS\",\"COSH\",\"DEGREES\",\"EXP\",\"FLOOR\",\"LN\",\"LOG\",\"LOG2\",\"LOG10\",\"PI\",\"POW\",\"RADIANS\",\"RAND\",\"ROUND\",\"SIN\",\"SINH\",\"SQRT\",\"TAN\",\"TANH\",\"REGEXP_MATCH\",\"REGEXP_EXTRACT\",\"REGEXP_REPLACE\",\"CONCAT\",\"INSTR\",\"LEFT\",\"LENGTH\",\"LOWER\",\"LPAD\",\"LTRIM\",\"REPLACE\",\"RIGHT\",\"RPAD\",\"RTRIM\",\"SPLIT\",\"SUBSTR\",\"UPPER\",\"TABLE_DATE_RANGE\",\"TABLE_DATE_RANGE_STRICT\",\"TABLE_QUERY\",\"HOST\",\"DOMAIN\",\"TLD\",\"AVG\",\"COUNT\",\"MAX\",\"MIN\",\"STDDEV\",\"SUM\",\"CUME_DIST\",\"DENSE_RANK\",\"FIRST_VALUE\",\"LAG\",\"LAST_VALUE\",\"LEAD\",\"NTH_VALUE\",\"NTILE\",\"PERCENT_RANK\",\"PERCENTILE_CONT\",\"PERCENTILE_DISC\",\"RANK\",\"RATIO_TO_REPORT\",\"ROW_NUMBER\",\"CURRENT_USER\",\"EVERY\",\"FROM_BASE64\",\"HASH\",\"FARM_FINGERPRINT\",\"IF\",\"POSITION\",\"SHA1\",\"SOME\",\"TO_BASE64\",\"BQ.JOBS.CANCEL\",\"BQ.REFRESH_MATERIALIZED_VIEW\",\"OPTIONS\",\"PIVOT\",\"UNPIVOT\"],Is=[\"ALL\",\"AND\",\"ANY\",\"AS\",\"ASC\",\"ASSERT_ROWS_MODIFIED\",\"AT\",\"BETWEEN\",\"BY\",\"CASE\",\"CAST\",\"COLLATE\",\"CONTAINS\",\"CREATE\",\"CROSS\",\"CUBE\",\"CURRENT\",\"DEFAULT\",\"DEFINE\",\"DESC\",\"DISTINCT\",\"ELSE\",\"END\",\"ENUM\",\"ESCAPE\",\"EXCEPT\",\"EXCLUDE\",\"EXISTS\",\"EXTRACT\",\"FALSE\",\"FETCH\",\"FOLLOWING\",\"FOR\",\"FROM\",\"FULL\",\"GROUP\",\"GROUPING\",\"GROUPS\",\"HASH\",\"HAVING\",\"IF\",\"IGNORE\",\"IN\",\"INNER\",\"INTERSECT\",\"INTO\",\"IS\",\"JOIN\",\"LATERAL\",\"LEFT\",\"LIMIT\",\"LOOKUP\",\"MERGE\",\"NATURAL\",\"NEW\",\"NO\",\"NOT\",\"NULL\",\"NULLS\",\"OF\",\"ON\",\"OR\",\"ORDER\",\"OUTER\",\"OVER\",\"PARTITION\",\"PRECEDING\",\"PROTO\",\"RANGE\",\"RECURSIVE\",\"RESPECT\",\"RIGHT\",\"ROLLUP\",\"ROWS\",\"SELECT\",\"SET\",\"SOME\",\"TABLE\",\"TABLESAMPLE\",\"THEN\",\"TO\",\"TREAT\",\"TRUE\",\"UNBOUNDED\",\"UNION\",\"UNNEST\",\"USING\",\"WHEN\",\"WHERE\",\"WINDOW\",\"WITH\",\"WITHIN\",\"SAFE\",\"LIKE\",\"COPY\",\"CLONE\",\"IN\",\"OUT\",\"INOUT\",\"RETURNS\",\"LANGUAGE\",\"CASCADE\",\"RESTRICT\",\"DETERMINISTIC\"],Ns=[\"ARRAY\",\"BOOL\",\"BYTES\",\"DATE\",\"DATETIME\",\"GEOGRAPHY\",\"INTERVAL\",\"INT64\",\"INT\",\"SMALLINT\",\"INTEGER\",\"BIGINT\",\"TINYINT\",\"BYTEINT\",\"NUMERIC\",\"DECIMAL\",\"BIGNUMERIC\",\"BIGDECIMAL\",\"FLOAT64\",\"STRING\",\"STRUCT\",\"TIME\",\"TIMEZONE\"],ls=v([\"SELECT [ALL | DISTINCT] [AS STRUCT | AS VALUE]\"]),_s=v([\"WITH [RECURSIVE]\",\"FROM\",\"WHERE\",\"GROUP BY\",\"HAVING\",\"QUALIFY\",\"WINDOW\",\"PARTITION BY\",\"ORDER BY\",\"LIMIT\",\"OFFSET\",\"OMIT RECORD IF\",\"INSERT [INTO]\",\"VALUES\",\"SET\",\"MERGE [INTO]\",\"WHEN [NOT] MATCHED [BY SOURCE | BY TARGET] [THEN]\",\"UPDATE SET\",\"CLUSTER BY\",\"FOR SYSTEM_TIME AS OF\",\"WITH CONNECTION\",\"WITH PARTITION COLUMNS\",\"REMOTE WITH CONNECTION\"]),tr=v([\"CREATE [OR REPLACE] [TEMP|TEMPORARY|SNAPSHOT|EXTERNAL] TABLE [IF NOT EXISTS]\"]),xt=v([\"CREATE [OR REPLACE] [MATERIALIZED] VIEW [IF NOT EXISTS]\",\"UPDATE\",\"DELETE [FROM]\",\"DROP [SNAPSHOT | EXTERNAL] TABLE [IF EXISTS]\",\"ALTER TABLE [IF EXISTS]\",\"ADD COLUMN [IF NOT EXISTS]\",\"DROP COLUMN [IF EXISTS]\",\"RENAME TO\",\"ALTER COLUMN [IF EXISTS]\",\"SET DEFAULT COLLATE\",\"SET OPTIONS\",\"DROP NOT NULL\",\"SET DATA TYPE\",\"ALTER SCHEMA [IF EXISTS]\",\"ALTER [MATERIALIZED] VIEW [IF EXISTS]\",\"ALTER BI_CAPACITY\",\"TRUNCATE TABLE\",\"CREATE SCHEMA [IF NOT EXISTS]\",\"DEFAULT COLLATE\",\"CREATE [OR REPLACE] [TEMP|TEMPORARY|TABLE] FUNCTION [IF NOT EXISTS]\",\"CREATE [OR REPLACE] PROCEDURE [IF NOT EXISTS]\",\"CREATE [OR REPLACE] ROW ACCESS POLICY [IF NOT EXISTS]\",\"GRANT TO\",\"FILTER USING\",\"CREATE CAPACITY\",\"AS JSON\",\"CREATE RESERVATION\",\"CREATE ASSIGNMENT\",\"CREATE SEARCH INDEX [IF NOT EXISTS]\",\"DROP SCHEMA [IF EXISTS]\",\"DROP [MATERIALIZED] VIEW [IF EXISTS]\",\"DROP [TABLE] FUNCTION [IF EXISTS]\",\"DROP PROCEDURE [IF EXISTS]\",\"DROP ROW ACCESS POLICY\",\"DROP ALL ROW ACCESS POLICIES\",\"DROP CAPACITY [IF EXISTS]\",\"DROP RESERVATION [IF EXISTS]\",\"DROP ASSIGNMENT [IF EXISTS]\",\"DROP SEARCH INDEX [IF EXISTS]\",\"DROP [IF EXISTS]\",\"GRANT\",\"REVOKE\",\"DECLARE\",\"EXECUTE IMMEDIATE\",\"LOOP\",\"END LOOP\",\"REPEAT\",\"END REPEAT\",\"WHILE\",\"END WHILE\",\"BREAK\",\"LEAVE\",\"CONTINUE\",\"ITERATE\",\"FOR\",\"END FOR\",\"BEGIN\",\"BEGIN TRANSACTION\",\"COMMIT TRANSACTION\",\"ROLLBACK TRANSACTION\",\"RAISE\",\"RETURN\",\"CALL\",\"ASSERT\",\"EXPORT DATA\"]),Ls=v([\"UNION {ALL | DISTINCT}\",\"EXCEPT DISTINCT\",\"INTERSECT DISTINCT\"]),Cs=v([\"JOIN\",\"{LEFT | RIGHT | FULL} [OUTER] JOIN\",\"{INNER | CROSS} JOIN\"]),us=v([\"TABLESAMPLE SYSTEM\",\"ANY TYPE\",\"ALL COLUMNS\",\"NOT DETERMINISTIC\",\"{ROWS | RANGE} BETWEEN\",\"IS [NOT] DISTINCT FROM\"]),cs={name:\"bigquery\",tokenizerOptions:{reservedSelect:ls,reservedClauses:[..._s,...xt,...tr],reservedSetOperations:Ls,reservedJoins:Cs,reservedPhrases:us,reservedKeywords:Is,reservedDataTypes:Ns,reservedFunctionNames:as,extraParens:[\"[]\"],stringTypes:[{quote:'\"\"\"..\"\"\"',prefixes:[\"R\",\"B\",\"RB\",\"BR\"]},{quote:\"\\'\\'\\'..\\'\\'\\'\",prefixes:[\"R\",\"B\",\"RB\",\"BR\"]},'\"\"-bs',\"''-bs\",{quote:'\"\"-raw',prefixes:[\"R\",\"B\",\"RB\",\"BR\"],requirePrefix:!0},{quote:\"''-raw\",prefixes:[\"R\",\"B\",\"RB\",\"BR\"],requirePrefix:!0}],identTypes:[\"``\"],identChars:{dashes:!0},paramTypes:{positional:!0,named:[\"@\"],quoted:[\"@\"]},variableTypes:[{regex:String.raw`@@\\\\w+`}],lineCommentTypes:[\"\n|\\\\r|\n|$)`,\"uy\"),fr=(E,e=[])=>{const T=E===\"open\"?0:1,t=[\"()\",...e].map(r=>r[T])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return wE(t.map(CE).join(\"|\"))},Pr=E=>wE(`${$R(E).map(CE).join(\"|\")}`),DO=({rest:E,dashes:e})=>E||e?`(?![${E||\"\"}${e?\"-\":\"\"}])`:\"\",hE=(E,e={})=>{if(E.length===0)return/^\\\\b$/u"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const T=DO(e),t=$R(E).map(CE).join(\"|\").replace(/ /gu,\"\\\\\\\\s+\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return new RegExp(`(?:${t})${T}\\\\\\\\b`,\"iuy\")},sT=(E,e)=>{if(!E.length)return"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const T=E.map(CE).join(\"|\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return wE(`(?:${T})(?:${e})`)},dO=()=>{const E={\"<\":\">\",\"[\":\"]\",\"(\":\")\",\"{\":\"}\"},e=\"{left}(?:(?!{right}').)*?{right}\",T=Object.entries(E).map(([n,s])=>e.replace(/{left}/g,CE(n)).replace(/{right}/g,CE(s))),t=CE(Object.keys(E).join(\"\"))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return`[Qq]'(?:${String.raw`(?<tag>[^\\\\s${t}])(?:(?!\\\\k<tag>').)*?\\\\k<tag>`}|${T.join(\"|\")})'`},Dr={\"``\":\"(?:`[^`]*`)+\",\"[]\":String.raw`(?:\\\\[[^\\\\]]*\\\\])(?:\\\\][^\\\\]]*\\\\])*`,'\"\"-qq':String.raw`(?:\"[^\"]*\")+`,'\"\"-bs':String.raw`(?:\"[^\"\\\\\\\\]*(?:\\\\\\\\.[^\"\\\\\\\\]*)*\")`,'\"\"-qq-bs':String.raw`(?:\"[^\"\\\\\\\\]*(?:\\\\\\\\.[^\"\\\\\\\\]*)*\")+`,'\"\"-raw':String.raw`(?:\"[^\"]*\")`,\"''-qq\":String.raw`(?:'[^']*')+`,\"''-bs\":String.raw`(?:'[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*')`,\"''-qq-bs\":String.raw`(?:'[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*')+`,\"''-raw\":String.raw`(?:'[^']*')`,$$:String.raw`(?<tag>\\\\$\\\\w*\\\\$)[\\\\s\\\\S]*?\\\\k<tag>`,\"\\'\\'\\'..\\'\\'\\'\":String.raw`\\'\\'\\'[^\\\\\\\\]*?(?:\\\\\\\\.[^\\\\\\\\]*?)*?\\'\\'\\'`,'\"\"\"..\"\"\"':String.raw`\"\"\"[^\\\\\\\\]*?(?:\\\\\\\\.[^\\\\\\\\]*?)*?\"\"\"`,\"{}\":String.raw`(?:\\\\{[^\\\\}]*\\\\})`,\"q''\":dO()},xR=E=>typeof E==\"string\"?Dr[E]:\"regex\"in E?E.regex:fO(E)+Dr[E.quote],pO=E=>wE(E.map(e=>\"regex\"in e?e.regex:xR(e)).join(\"|\")),XR=E=>E.map(xR).join(\"|\"),dr=E=>wE(XR(E)),MO=(E={})=>wE(kR(E)),kR=({first:E,rest:e,dashes:T,allowFirstCharNumber:t}={})=>{const r=\"\\\\\\\\p{Alphabetic}\\\\\\\\p{Mark}_\",R=\"\\\\\\\\p{Decimal_Number}\",n=CE(E??\"\"),s=CE(e??\"\"),S=t?`[${r}${R}${n}][${r}${R}${s}]*`:`[${r}${n}][${r}${R}${s}]*`"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return T?cO(S):S}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function KR(E,e){const T=E.slice(0,e).split(/\\\\n/)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{line:T.length,col:T[T.length-1].length+1}}var UO=class{constructor(E,e){this.rules=E,this.dialectName=e,this.input=\"\",this.index=0}tokenize(E){this.input=E,this.index=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const e=[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "this.index<this.input.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "){const t=this.getWhitespace()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(this.index<this.input.length){if(T=this.getNextToken(),!T)throw this.createParseError()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "e.push(AE(EE({},T),{precedingWhitespace:t}))}}return e}createParseError(){const E=this.input.slice(this.index,this.index+10),{line:e,col:T}=KR(this.input,this.index)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return new Error(`Parse error: Unexpected \"${E}\" at line ${e} column ${T}.\n${this.dialectInfo()}`)}dialectInfo(){return this.dialectName===\"sql\"?`This likely happens because you're using the default \"sql\" dialect.\nIf possible, please select a more specific dialect (like sqlite, postgresql, etc).`:`SQL dialect used: \"${this.dialectName}\".`}getWhitespace(){cr.lastIndex=this.index"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const E=cr.exec(this.input)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(E)return this.index+=E[0].length,E[0]}getNextToken(){for(const E of this.rules){const e=this.match(E)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(e)return e}}match(E){E.regex.lastIndex=this.index"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const e=E.regex.exec(this.input)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(e){const T=e[0],t={type:E.type,raw:T,text:E.text?E.text(T):T,start:this.index}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return E.key&&(t.key=E.key(T)),this.index+=T.length,t}}},pr=/\\\\/\\\\*/uy,mO=/([^/*]|\\\\*[^/]|\\\\/[^*])+/uy,hO=/\\\\*\\\\//uy,GO=class{constructor(){this.lastIndex=0}exec(E){let e=\"\",T,t=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(T=this.matchSection(pr,E))e+=T,t++"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "else return null"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "t>0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ")if(T=this.matchSection(pr,E))e+=T,t++"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "else if(T=this.matchSection(hO,E))e+=T,t\n${JSON.stringify(n,void 0,2)}`)}}}var ZR=class{constructor(E){this.indentation=E,this.items=[]}add(...E){for(const e of E)switch(e){case 0:this.items.push(0)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "break"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "case 1:this.trimHorizontalWhitespace()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "break"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "case 2:this.trimWhitespace()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "break"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "case 3:this.trimHorizontalWhitespace(),this.addNewline(3)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "break"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "case 4:this.trimHorizontalWhitespace(),this.addNewline(4)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "break"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "case 5:this.addIndentation()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "break"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "case 6:this.items.push(6)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "break"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "default:this.items.push(e)}}trimHorizontalWhitespace(){for("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "jO(ot(this.items))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ")this.items.pop()}trimWhitespace(){for("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "zO(ot(this.items))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ")this.items.pop()}addNewline(E){if(this.items.length>0)switch(ot(this.items)){case 3:this.items.pop(),this.items.push(E)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "break"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "case 4:break"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "default:this.items.push(E)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "break}}addIndentation(){for(let E=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "E<this.indentation.getLevel()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "E++)this.items.push(6)}toString(){return this.items.map(E=>this.itemToString(E)).join(\"\")}getLayoutItems(){return this.items}itemToString(E){switch(E){case 0:return\" \""
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "case 3:case 4:return`\n`"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "case 6:return this.indentation.getSingleIndent()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "default:return E}}},jO=E=>E===0||E===6,zO=E=>E===0||E===6||E===3"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function mr(E,e){if(e===\"standard\")return E"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let T=[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return E.length>=10&&E.includes(\" \")&&([E,...T]=E.split(\" \")),e===\"tabularLeft\"?E=E.padEnd(9,\" \"):E=E.padStart(9,\" \"),E+[\"\",...T].join(\" \")}function hr(E){return is(E)||E===\"RESERVED_CLAUSE\"||E===\"RESERVED_SELECT\"||E===\"RESERVED_SET_OPERATION\"||E===\"RESERVED_JOIN\"||E===\"LIMIT\"}var oT=\"top-level\",ei=\"block-level\",jR=class{constructor(E){this.indent=E,this.indentTypes=[]}getSingleIndent(){return this.indent}getLevel(){return this.indentTypes.length}increaseTopLevel(){this.indentTypes.push(oT)}increaseBlockLevel(){this.indentTypes.push(ei)}decreaseTopLevel(){this.indentTypes.length>0&&ot(this.indentTypes)===oT&&this.indentTypes.pop()}decreaseBlockLevel(){for("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "this.indentTypes.length>0&&this.indentTypes.pop()===oT"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "}},Ei=class extends ZR{constructor(E){super(new jR(\"\")),this.expressionWidth=E,this.length=0,this.trailingSpace=!1}add(...E){if(E.forEach(e=>this.addToLength(e)),this.length>this.expressionWidth)throw new NT"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "super.add(...E)}addToLength(E){if(typeof E==\"string\")this.length+=E.length,this.trailingSpace=!1"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "else{if(E===4||E===3)throw new NT"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "E===5||E===6||E===0?this.trailingSpace||(this.length++,this.trailingSpace=!0):(E===2||E===1)&&this.trailingSpace&&(this.trailingSpace=!1,this.length\n`.repeat(this.cfg.linesBetweenQueries+1))}formatStatement(E){const e=new ti({cfg:this.cfg,dialectCfg:this.dialect.formatOptions,params:this.params,layout:new ZR(new jR(BO(this.cfg)))}).format(E.children)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return E.hasSemicolon&&(this.cfg.newlineBeforeSemicolon?e.add(3,\""
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "\"):e.add(2,\""
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "\")),e.toString()}},_T=class extends Error{}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function ri(E){const e=[\"multilineLists\",\"newlineBeforeOpenParen\",\"newlineBeforeCloseParen\",\"aliasAs\",\"commaPosition\",\"tabulateAlias\"]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(const T of e)if(T in E)throw new _T(`${T} config is no more supported.`)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(E.expressionWidth<=0)throw new _T(`expressionWidth config must be positive number. Received ${E.expressionWidth} instead.`)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return E.params&&!Ri(E.params)&&console.warn('WARNING: All \"params\" option values should be strings.'),E}function Ri(E){return(E instanceof Array?E:Object.values(E)).every(T=>typeof T==\"string\")}var zR={bigquery:\"bigquery\",db2:\"db2\",db2i:\"db2i\",hive:\"hive\",mariadb:\"mariadb\",mysql:\"mysql\",n1ql:\"n1ql\",plsql:\"plsql\",postgresql:\"postgresql\",redshift:\"redshift\",spark:\"spark\",sqlite:\"sqlite\",sql:\"sql\",tidb:\"tidb\",trino:\"trino\",transactsql:\"transactsql\",tsql:\"transactsql\",singlestoredb:\"singlestoredb\",snowflake:\"snowflake\"},ni=Object.keys(zR),Ai={tabWidth:2,useTabs:!1,keywordCase:\"preserve\",identifierCase:\"preserve\",dataTypeCase:\"preserve\",functionCase:\"preserve\",indentStyle:\"standard\",logicalOperatorNewline:\"before\",expressionWidth:50,linesBetweenQueries:1,denseOperators:!1,newlineBeforeSemicolon:!1},Gr=(E,e={})=>{if(typeof e.language==\"string\"&&!ni.includes(e.language))throw new _T(`Unsupported SQL dialect: ${e.language}`)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const T=zR[e.language||\"sql\"]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return si(E,AE(EE({},e),{dialect:YR[T]}))},si=(E,e)=>{var T=e,{dialect:t}=T,r=ts(T,[\"dialect\"])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(typeof E!=\"string\")throw new Error(\"Invalid query argument. Expected string, instead got \"+typeof E)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const R=ri(EE(EE({},Ai),r))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return new Ti(HO(t),R).format(E)}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function gr(E,e,T){const t=E.slice()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return t[1]=e[T],t}function Hr(E,e){let T,t=e[1].name+\"\",r,R,n,s=e[1].instantiated_value+\"\",S,A"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{key:E,first:null,c(){T=f(\"b\"),r=te(t),R=te(\":\"),n=$(),S=te(s),A=f(\"br\"),this.first=T},m(o,i){V(o,T,i),l(T,r),l(T,R),V(o,n,i),V(o,S,i),V(o,A,i)},p(o,i){e=o,i&1&&t!==(t=e[1].name+\"\")&&Le(r,t),i&1&&s!==(s=e[1].instantiated_value+\"\")&&Le(S,s)},d(o){o&&(Y(T),Y(n),Y(S),Y(A))}}}function Si(E){let e,T,t,r,R,n,s,S=E[0].function_name+\"\",A,o,i,_=[],c=new Map,P,p,C,L,I,u,H,b=E[0].description+\"\",M,O,N,D,B=Gr(E[0].instantiated_sql)+\"\",h,G,F,W,x=E[0].sql_template+\"\",J,oe=De(E[0].arguments)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const z=Oe=>Oe[1].name"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let Oe=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "Oe<oe.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "Oe+=1){let Ue=gr(E,oe,Oe),ye=z(Ue)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "c.set(ye,_[Oe]=Hr(ye,Ue))}return{c(){e=f(\"div\"),T=f(\"div\"),t=f(\"div\"),t.innerHTML='<span class=\"inline-flex justify-center items-center size-8 rounded-full border-4 border-teal-100 bg-teal-200 text-teal-800 dark:border-teal-900 dark:bg-teal-800 dark:text-teal-400\"><svg class=\"flex-shrink-0 size-4\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z\"></path><path d=\"m9 12 2 2 4-4\"></path></svg></span>',r=$(),R=f(\"div\"),n=f(\"h3\"),s=te(\"Function: \"),A=te(S),o=$(),i=f(\"p\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let Oe=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "Oe<_.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "Oe+=1)_[Oe].c()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "P=$(),p=f(\"div\"),C=f(\"div\"),C.innerHTML='<nav class=\"flex space-x-2\" aria-label=\"Tabs\"><button type=\"button\" class=\"hs-tab-active:font-semibold hs-tab-active:border-blue-600 hs-tab-active:text-blue-600 py-4 px-1 inline-flex items-center gap-x-2 border-b-2 border-transparent text-sm whitespace-nowrap text-gray-500 hover:text-blue-600 disabled:opacity-50 disabled:pointer-events-none dark:text-neutral-400 dark:hover:text-blue-500 active\" id=\"basic-tabs-item-1\" data-hs-tab=\"#basic-tabs-1\" aria-controls=\"basic-tabs-1\" role=\"tab\">Description</button> <button type=\"button\" class=\"hs-tab-active:font-semibold hs-tab-active:border-blue-600 hs-tab-active:text-blue-600 py-4 px-1 inline-flex items-center gap-x-2 border-b-2 border-transparent text-sm whitespace-nowrap text-gray-500 hover:text-blue-600 disabled:opacity-50 disabled:pointer-events-none dark:text-neutral-400 dark:hover:text-blue-500\" id=\"basic-tabs-item-2\" data-hs-tab=\"#basic-tabs-2\" aria-controls=\"basic-tabs-2\" role=\"tab\">SQL</button> <button type=\"button\" class=\"hs-tab-active:font-semibold hs-tab-active:border-blue-600 hs-tab-active:text-blue-600 py-4 px-1 inline-flex items-center gap-x-2 border-b-2 border-transparent text-sm whitespace-nowrap text-gray-500 hover:text-blue-600 disabled:opacity-50 disabled:pointer-events-none dark:text-neutral-400 dark:hover:text-blue-500\" id=\"basic-tabs-item-3\" data-hs-tab=\"#basic-tabs-3\" aria-controls=\"basic-tabs-3\" role=\"tab\">Template</button></nav>',L=$(),I=f(\"div\"),u=f(\"div\"),H=f(\"p\"),M=te(b),O=$(),N=f(\"div\"),D=f(\"p\"),h=te(B),G=$(),F=f(\"div\"),W=f(\"p\"),J=te(x),a(t,\"class\",\"flex-shrink-0\"),a(n,\"class\",\"text-gray-800 font-semibold dark:text-white\"),a(i,\"class\",\"text-sm text-gray-700 dark:text-neutral-400\"),a(R,\"class\",\"ms-3\"),a(T,\"class\",\"flex\"),a(C,\"class\",\"border-b border-gray-200 px-4 dark:border-neutral-700\"),a(H,\"class\",\"text-gray-500 dark:text-neutral-400\"),a(u,\"id\",\"basic-tabs-1\"),a(u,\"role\",\"tabpanel\"),a(u,\"aria-labelledby\",\"basic-tabs-item-1\"),a(D,\"class\",\"text-gray-500 dark:text-neutral-400 font-mono text-teal-800\"),a(N,\"id\",\"basic-tabs-2\"),a(N,\"class\",\"hidden\"),a(N,\"role\",\"tabpanel\"),a(N,\"aria-labelledby\",\"basic-tabs-item-2\"),a(W,\"class\",\"text-gray-500 dark:text-neutral-400 font-mono\"),a(F,\"id\",\"basic-tabs-3\"),a(F,\"class\",\"hidden\"),a(F,\"role\",\"tabpanel\"),a(F,\"aria-labelledby\",\"basic-tabs-item-3\"),a(I,\"class\",\"px-4\"),a(p,\"class\",\"w-full bg-white rounded-lg shadow-md dark:bg-neutral-800\"),a(e,\"class\",\"bg-teal-50 border-t-2 border-teal-500 rounded-lg p-4 dark:bg-teal-800/30\"),a(e,\"role\",\"alert\")},m(Oe,Ue){V(Oe,e,Ue),l(e,T),l(T,t),l(T,r),l(T,R),l(R,n),l(n,s),l(n,A),l(R,o),l(R,i)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let ye=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "ye<_.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "ye+=1)_[ye]&&_[ye].m(i,null)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "l(e,P),l(e,p),l(p,C),l(p,L),l(p,I),l(I,u),l(u,H),l(H,M),l(I,O),l(I,N),l(N,D),l(D,h),l(I,G),l(I,F),l(F,W),l(W,J)},p(Oe,[Ue]){Ue&1&&S!==(S=Oe[0].function_name+\"\")&&Le(A,S),Ue&1&&(oe=De(Oe[0].arguments),_=un(_,Ue,z,1,Oe,oe,c,i,Cn,Hr,null,gr)),Ue&1&&b!==(b=Oe[0].description+\"\")&&Le(M,b),Ue&1&&B!==(B=Gr(Oe[0].instantiated_sql)+\"\")&&Le(h,B),Ue&1&&x!==(x=Oe[0].sql_template+\"\")&&Le(J,x)},i:j,o:j,d(Oe){Oe&&Y(e)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let Ue=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "Ue<_.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "Ue+=1)_[Ue].d()}}}function oi(E,e,T){let{functionData:t}=e"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return E.$$set=r=>{\"functionData\"in r&&T(0,t=r.functionData)},[t]}class Oi extends ue{constructor(e){super(),Ce(this,e,oi,Si,_e,{functionData:0})}}function br(E,e,T){const t=E.slice()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return t[12]=e[T],t}function yr(E,e,T){const t=E.slice()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return t[12]=e[T],t[13]=e,t[14]=T,t}function ii(E){let e,T,t,r=E[0].function_name+\"\",R,n,s,S=E[0].description+\"\",A,o,i,_,c,P,p,C,L,I=De(E[0].arguments),u=[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let H=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "H<I.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "H+=1)u[H]=Br(br(E,I,H))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=f(\"div\"),T=f(\"div\"),t=f(\"h3\"),R=te(r),n=$(),s=f(\"p\"),A=te(S),o=$(),i=f(\"ul\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let H=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "H<u.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "H+=1)u[H].c()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "_=$(),c=f(\"button\"),c.textContent=\"Delete\",P=$(),p=f(\"button\"),p.textContent=\"Edit\",a(t,\"class\",\"text-lg font-bold text-gray-800 dark:text-white\"),a(s,\"class\",\"mt-1 text-xs font-medium uppercase text-gray-500 dark:text-neutral-500\"),a(i,\"class\",\"mt-1 marker:text-blue-600 list-disc ps-5 space-y-2 text-sm text-gray-600 dark:text-neutral-400\"),a(T,\"class\",\"flex-grow\"),a(c,\"class\",\"mt-3 inline-flex items-center gap-x-1 text-sm font-semibold rounded-lg border border-red-600 text-red-600 hover:border-red-500 hover:text-red-500 disabled:opacity-50 disabled:pointer-events-none dark:border-red-500 dark:text-red-500 dark:hover:text-red-400 dark:hover:border-red-400 py-1 px-4 max-w-fit\"),a(p,\"class\",\"mt-3 inline-flex items-center gap-x-1 text-sm font-semibold rounded-lg border border-blue-600 text-blue-600 hover:border-blue-500 hover:text-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:border-blue-500 dark:text-blue-500 dark:hover:text-blue-400 dark:hover:border-blue-400 py-1 px-4 max-w-fit\"),a(e,\"class\",\"p-4 flex flex-col bg-white border border-t-4 border-t-blue-600 shadow-sm rounded-xl dark:bg-neutral-900 dark:border-neutral-7000 dark:border-t-blue-500 dark:shadow-neutral-700/70\")},m(H,b){V(H,e,b),l(e,T),l(T,t),l(t,R),l(T,n),l(T,s),l(s,A),l(T,o),l(T,i)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let M=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "M<u.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "M+=1)u[M]&&u[M].m(i,null)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "l(e,_),l(e,c),l(e,P),l(e,p),C||(L=[Ne(c,\"click\",E[10]),Ne(p,\"click\",E[11])],C=!0)},p(H,b){if(b&1&&r!==(r=H[0].function_name+\"\")&&Le(R,r),b&1&&S!==(S=H[0].description+\"\")&&Le(A,S),b&1){I=De(H[0].arguments)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let M"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(M=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "M<I.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "M+=1){const O=br(H,I,M)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "u[M]?u[M].p(O,b):(u[M]=Br(O),u[M].c(),u[M].m(i,null))}for("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "M<u.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "M+=1)u[M].d(1)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "u.length=I.length}},d(H){H&&Y(e),nE(u,H),C=!1,NE(L)}}}function ai(E){let e,T,t,r,R,n,s,S,A,o,i,_,c,P,p,C,L,I,u,H,b,M,O,N,D,B=De(E[1].arguments),h=[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let G=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "G<B.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "G+=1)h[G]=vr(yr(E,B,G))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=f(\"div\"),T=f(\"form\"),t=f(\"div\"),r=f(\"div\"),R=f(\"span\"),R.textContent=\"Function Name\",n=$(),s=f(\"input\"),S=$(),A=f(\"div\"),o=f(\"span\"),o.textContent=\"Function Description\",i=$(),_=f(\"textarea\"),c=$(),P=f(\"div\"),p=f(\"span\"),p.textContent=\"SQL Template\",C=$(),L=f(\"textarea\"),I=$()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let G=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "G<h.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "G+=1)h[G].c()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "u=$(),H=f(\"div\"),b=f(\"button\"),b.textContent=\"Cancel\",M=$(),O=f(\"button\"),O.textContent=\"Save\",a(R,\"class\",\"inline-block text-sm font-bold text-gray-800 mt-2.5 dark:text-neutral-200\"),a(s,\"type\",\"text\"),a(s,\"class\",\"py-2 px-3 pe-11 block w-full border-gray-200 shadow-sm rounded-lg text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-400 dark:placeholder-neutral-500 dark:focus:ring-neutral-600\"),a(s,\"placeholder\",\"Enter function name\"),a(r,\"class\",\"space-y-2\"),a(t,\"class\",\"space-y-4 sm:space-y-6\"),a(o,\"class\",\"inline-block text-sm font-bold text-gray-800 mt-2.5 dark:text-neutral-200\"),a(_,\"class\",\"py-2 px-3 pe-11 block w-full border-gray-200 shadow-sm rounded-lg text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-400 dark:placeholder-neutral-500 dark:focus:ring-neutral-600\"),a(_,\"placeholder\",\"Enter function description\"),a(A,\"class\",\"space-y-2\"),a(p,\"class\",\"inline-block text-sm font-bold text-gray-800 mt-2.5 dark:text-neutral-200\"),a(L,\"class\",\"py-2 px-3 pe-11 block w-full border-gray-200 shadow-sm rounded-lg text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-400 dark:placeholder-neutral-500 dark:focus:ring-neutral-600 font-mono\"),a(L,\"placeholder\",\"Enter function description\"),a(P,\"class\",\"space-y-2\"),a(b,\"class\",\"py-2 px-3 inline-flex items-center gap-x-2 text-sm font-semibold rounded-lg border border-red-500 text-red-500 hover:border-red-400 hover:text-red-400 disabled:opacity-50 disabled:pointer-events-none\"),a(O,\"class\",\"py-2 px-3 inline-flex items-center gap-x-2 text-sm font-semibold rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none\"),a(H,\"class\",\"mt-3 flex gap-x-2\"),a(e,\"class\",\"p-4 flex flex-col bg-white border border-t-4 border-t-red-600 shadow-sm rounded-xl dark:bg-neutral-900 dark:border-neutral-7000 dark:border-t-red-500 dark:shadow-neutral-700/70\")},m(G,F){V(G,e,F),l(e,T),l(T,t),l(t,r),l(r,R),l(r,n),l(r,s),Ye(s,E[1].function_name),l(T,S),l(T,A),l(A,o),l(A,i),l(A,_),Ye(_,E[1].description),l(T,c),l(T,P),l(P,p),l(P,C),l(P,L),Ye(L,E[1].sql_template),l(T,I)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let W=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "W<h.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "W+=1)h[W]&&h[W].m(T,null)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "l(e,u),l(e,H),l(H,b),l(H,M),l(H,O),N||(D=[Ne(s,\"input\",E[2]),Ne(_,\"input\",E[3]),Ne(L,\"input\",E[4]),Ne(b,\"click\",E[8]),Ne(O,\"click\",E[9])],N=!0)},p(G,F){if(F&2&&s.value!==G[1].function_name&&Ye(s,G[1].function_name),F&2&&Ye(_,G[1].description),F&2&&Ye(L,G[1].sql_template),F&2){B=De(G[1].arguments)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let W"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(W=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "W<B.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "W+=1){const x=yr(G,B,W)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "h[W]?h[W].p(x,F):(h[W]=vr(x),h[W].c(),h[W].m(T,null))}for("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "W<h.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "W+=1)h[W].d(1)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "h.length=B.length}},d(G){G&&Y(e),nE(h,G),N=!1,NE(D)}}}function Br(E){let e,T,t=E[12].name+\"\",r,R,n,s=E[12].description+\"\",S"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=f(\"li\"),T=f(\"b\"),r=te(t),R=te(\":\"),n=$(),S=te(s)},m(A,o){V(A,e,o),l(e,T),l(T,r),l(T,R),l(e,n),l(e,S)},p(A,o){o&1&&t!==(t=A[12].name+\"\")&&Le(r,t),o&1&&s!==(s=A[12].description+\"\")&&Le(S,s)},d(A){A&&Y(e)}}}function vr(E){let e,T,t,r,R,n,s,S,A,o,i,_,c,P,p,C,L,I,u,H,b"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function M(){E[5].call(R,E[13],E[14])}function O(){E[6].call(o,E[13],E[14])}function N(){E[7].call(p,E[13],E[14])}return{c(){e=f(\"div\"),T=f(\"div\"),t=f(\"span\"),t.textContent=\"Argument Name\",r=$(),R=f(\"input\"),n=$(),s=f(\"div\"),S=f(\"span\"),S.textContent=\"Argument Description\",A=$(),o=f(\"input\"),i=$(),_=f(\"div\"),c=f(\"span\"),c.textContent=\"Argument Type\",P=$(),p=f(\"select\"),C=f(\"option\"),C.textContent=\"String\",L=f(\"option\"),L.textContent=\"Numeric\",I=f(\"option\"),I.textContent=\"Boolean\",u=$(),a(t,\"class\",\"inline-block text-sm font-bold text-gray-800 mt-2.5 dark:text-neutral-200\"),a(R,\"type\",\"text\"),a(R,\"class\",\"py-2 px-3 pe-11 block w-full border-gray-200 shadow-sm rounded-lg text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-400 dark:placeholder-neutral-500 dark:focus:ring-neutral-600\"),a(R,\"placeholder\",\"Enter argument name\"),a(T,\"class\",\"space-y-2\"),a(S,\"class\",\"inline-block text-sm font-bold text-gray-800 mt-2.5 dark:text-neutral-200\"),a(o,\"type\",\"text\"),a(o,\"class\",\"py-2 px-3 pe-11 block w-full border-gray-200 shadow-sm rounded-lg text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-400 dark:placeholder-neutral-500 dark:focus:ring-neutral-600\"),a(o,\"placeholder\",\"Enter argument description\"),a(s,\"class\",\"space-y-2\"),a(c,\"class\",\"inline-block text-sm font-bold text-gray-800 mt-2.5 dark:text-neutral-200\"),C.__value=\"STRING\",Ye(C,C.__value),L.__value=\"NUMERIC\",Ye(L,L.__value),I.__value=\"BOOLEAN\",Ye(I,I.__value),a(p,\"class\",\"py-2 px-3 pe-11 block w-full border-gray-200 shadow-sm rounded-lg text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-400 dark:placeholder-neutral-500 dark:focus:ring-neutral-600\"),E[12].general_type===void 0&&dt(N),a(_,\"class\",\"space-y-2\"),a(e,\"class\",\"space-y-4\")},m(D,B){V(D,e,B),l(e,T),l(T,t),l(T,r),l(T,R),Ye(R,E[12].name),l(e,n),l(e,s),l(s,S),l(s,A),l(s,o),Ye(o,E[12].description),l(e,i),l(e,_),l(_,c),l(_,P),l(_,p),l(p,C),l(p,L),l(p,I),WT(p,E[12].general_type,!0),l(e,u),H||(b=[Ne(R,\"input\",M),Ne(o,\"input\",O),Ne(p,\"change\",N)],H=!0)},p(D,B){E=D,B&2&&R.value!==E[12].name&&Ye(R,E[12].name),B&2&&o.value!==E[12].description&&Ye(o,E[12].description),B&2&&WT(p,E[12].general_type)},d(D){D&&Y(e),H=!1,NE(b)}}}function Ii(E){let e"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function T(R,n){return R[1]!=null?ai:ii}let t=T(E),r=t(E)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){r.c(),e=je()},m(R,n){r.m(R,n),V(R,e,n)},p(R,[n]){t===(t=T(R))&&r?r.p(R,n):(r.d(1),r=t(R),r&&(r.c(),r.m(e.parentNode,e)))},i:j,o:j,d(R){R&&Y(e),r.d(R)}}}function Ni(E,e,T){let{functionTemplate:t}=e,r=null"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function R(){r.function_name=this.value,T(1,r)}function n(){r.description=this.value,T(1,r)}function s(){r.sql_template=this.value,T(1,r)}function S(p,C){p[C].name=this.value,T(1,r)}function A(p,C){p[C].description=this.value,T(1,r)}function o(p,C){p[C].general_type=On(this),T(1,r)}const i=()=>{T(1,r=null)},_=()=>{r&&(Vn(t.function_name,r),T(0,t=r),T(1,r=null))},c=()=>{t&&window.confirm(\"Are you sure you want to delete this function?\")&&Wn(t.function_name)},P=()=>{T(1,r=structuredClone(t))}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return E.$$set=p=>{\"functionTemplate\"in p&&T(0,t=p.functionTemplate)},[t,r,R,n,s,S,A,o,i,_,c,P]}class en extends ue{constructor(e){super(),Ce(this,e,Ni,Ii,_e,{functionTemplate:0})}}function Fr(E,e,T){const t=E.slice()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return t[15]=e[T],t}function Yr(E,e,T){const t=E.slice()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return t[18]=e[T],t}function Vr(E,e,T){const t=E.slice()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return t[21]=e[T],t}function Wr(E,e,T){const t=E.slice()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return t[21]=e[T],t}function wr(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new ZA({}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function $r(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new Ze({props:{$$slots:{default:[_i]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&67108866&&(R.$$scope={dirty:r,ctx:t}),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function xr(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new IE({props:{message:E[21],onSubmit:uT}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&2&&(R.message=t[21]),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function li(E){let e=E[1].header+\"\",T,t,r,R,n=De(E[1].questions),s=[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let A=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "A<n.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "A+=1)s[A]=xr(Wr(E,n,A))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const S=A=>y(s[A],1,1,()=>{s[A]=null})"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){T=te(e),t=$()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let A=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "A<s.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "A+=1)s[A].c()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r=je()},m(A,o){V(A,T,o),V(A,t,o)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let i=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "i<s.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "i+=1)s[i]&&s[i].m(A,o)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "V(A,r,o),R=!0},p(A,o){if((!R||o&2)&&e!==(e=A[1].header+\"\")&&Le(T,e),o&2){n=De(A[1].questions)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let i"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(i=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "i<n.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "i+=1){const _=Wr(A,n,i)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "s[i]?(s[i].p(_,o),m(s[i],1)):(s[i]=xr(_),s[i].c(),m(s[i],1),s[i].m(r.parentNode,r))}for(Ge(),i=n.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "i<s.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "i+=1)S(i)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "ge()}},i(A){if(!R){for(let o=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "o<n.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "o+=1)m(s[o])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "R=!0}},o(A){s=s.filter(Boolean)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let o=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "o<s.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "o+=1)y(s[o])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "R=!1},d(A){A&&(Y(T),Y(t),Y(r)),nE(s,A)}}}function _i(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new aE({props:{$$slots:{default:[li]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&67108866&&(R.$$scope={dirty:r,ctx:t}),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function Li(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new Ze({props:{$$slots:{default:[Fi]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&67108872&&(R.$$scope={dirty:r,ctx:t}),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function Ci(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new Ze({props:{$$slots:{default:[Vi]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&67108888&&(R.$$scope={dirty:r,ctx:t}),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function ui(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new Ze({props:{$$slots:{default:[Wi]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&67108872&&(R.$$scope={dirty:r,ctx:t}),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function ci(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new Ze({props:{$$slots:{default:[wi]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&67108872&&(R.$$scope={dirty:r,ctx:t}),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function fi(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new Ze({props:{$$slots:{default:[xi]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&67108872&&(R.$$scope={dirty:r,ctx:t}),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function Pi(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new WE({props:{message:\"Put your SQL here\",$$slots:{default:[Xi]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&67108864&&(R.$$scope={dirty:r,ctx:t}),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function Di(E){let e,T,t,r,R,n,s,S,A,o"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "e=new WE({props:{message:E[18].question}}),t=new Ze({props:{$$slots:{default:[Ji]},$$scope:{ctx:E}}}),R=new Ze({props:{$$slots:{default:[qi]},$$scope:{ctx:E}}}),s=new Ze({props:{$$slots:{default:[Qi]},$$scope:{ctx:E}}})"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let i=E[18].summary&&Xr(E)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){K(e.$$.fragment),T=$(),K(t.$$.fragment),r=$(),K(R.$$.fragment),n=$(),K(s.$$.fragment),S=$(),i&&i.c(),A=je()},m(_,c){X(e,_,c),V(_,T,c),X(t,_,c),V(_,r,c),X(R,_,c),V(_,n,c),X(s,_,c),V(_,S,c),i&&i.m(_,c),V(_,A,c),o=!0},p(_,c){const P={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "c&8&&(P.message=_[18].question),e.$set(P)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const p={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "c&67108872&&(p.$$scope={dirty:c,ctx:_}),t.$set(p)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const C={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "c&67108872&&(C.$$scope={dirty:c,ctx:_}),R.$set(C)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const L={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "c&67108872&&(L.$$scope={dirty:c,ctx:_}),s.$set(L),_[18].summary?i?(i.p(_,c),c&8&&m(i,1)):(i=Xr(_),i.c(),m(i,1),i.m(A.parentNode,A)):i&&(Ge(),y(i,1,1,()=>{i=null}),ge())},i(_){o||(m(e.$$.fragment,_),m(t.$$.fragment,_),m(R.$$.fragment,_),m(s.$$.fragment,_),m(i),o=!0)},o(_){y(e.$$.fragment,_),y(t.$$.fragment,_),y(R.$$.fragment,_),y(s.$$.fragment,_),y(i),o=!1},d(_){_&&(Y(T),Y(r),Y(n),Y(S),Y(A)),k(e,_),k(t,_),k(R,_),k(s,_),i&&i.d(_)}}}function di(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new Ze({props:{$$slots:{default:[zi]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&67108873&&(R.$$scope={dirty:r,ctx:t}),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function pi(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new Ze({props:{$$slots:{default:[ea]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&67108872&&(R.$$scope={dirty:r,ctx:t}),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function Mi(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new WE({props:{message:\"No, the results were not correct.\"}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p:j,i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function Ui(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new WE({props:{message:\"Yes, the results were correct.\"}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p:j,i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function mi(E){let e,T,t=E[0].ask_results_correct&&Kr(E)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){t&&t.c(),e=je()},m(r,R){t&&t.m(r,R),V(r,e,R),T=!0},p(r,R){r[0].ask_results_correct?t?(t.p(r,R),R&1&&m(t,1)):(t=Kr(r),t.c(),m(t,1),t.m(e.parentNode,e)):t&&(Ge(),y(t,1,1,()=>{t=null}),ge())},i(r){T||(m(t),T=!0)},o(r){y(t),T=!1},d(r){r&&Y(e),t&&t.d(r)}}}function hi(E){let e,T,t=E[0].ask_results_correct&&qr(E)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){t&&t.c(),e=je()},m(r,R){t&&t.m(r,R),V(r,e,R),T=!0},p(r,R){r[0].ask_results_correct?t?R&1&&m(t,1):(t=qr(r),t.c(),m(t,1),t.m(e.parentNode,e)):t&&(Ge(),y(t,1,1,()=>{t=null}),ge())},i(r){T||(m(t),T=!0)},o(r){y(t),T=!1},d(r){r&&Y(e),t&&t.d(r)}}}function Gi(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new WE({props:{message:\"Change the chart based on these instructions\",$$slots:{default:[Ra]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&67108864&&(R.$$scope={dirty:r,ctx:t}),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function gi(E){let e,T,t=E[0].chart&&Qr(E)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){t&&t.c(),e=je()},m(r,R){t&&t.m(r,R),V(r,e,R),T=!0},p(r,R){r[0].chart?t?(t.p(r,R),R&1&&m(t,1)):(t=Qr(r),t.c(),m(t,1),t.m(e.parentNode,e)):t&&(Ge(),y(t,1,1,()=>{t=null}),ge())},i(r){T||(m(t),T=!0)},o(r){y(t),T=!1},d(r){r&&Y(e),t&&t.d(r)}}}function Hi(E){let e,T,t=E[0].table&&jr(E)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){t&&t.c(),e=je()},m(r,R){t&&t.m(r,R),V(r,e,R),T=!0},p(r,R){r[0].table?t?(t.p(r,R),R&1&&m(t,1)):(t=jr(r),t.c(),m(t,1),t.m(e.parentNode,e)):t&&(Ge(),y(t,1,1,()=>{t=null}),ge())},i(r){T||(m(t),T=!0)},o(r){y(t),T=!1},d(r){r&&Y(e),t&&t.d(r)}}}function bi(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new Ze({props:{$$slots:{default:[oa]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&67108872&&(R.$$scope={dirty:r,ctx:t}),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function yi(E){let e,T,t=E[0].sql==!0&&eR(E)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){t&&t.c(),e=je()},m(r,R){t&&t.m(r,R),V(r,e,R),T=!0},p(r,R){r[0].sql==!0?t?(t.p(r,R),R&1&&m(t,1)):(t=eR(r),t.c(),m(t,1),t.m(e.parentNode,e)):t&&(Ge(),y(t,1,1,()=>{t=null}),ge())},i(r){T||(m(t),T=!0)},o(r){y(t),T=!1},d(r){r&&Y(e),t&&t.d(r)}}}function Bi(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new WE({props:{message:E[18].question}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&8&&(R.message=t[18].question),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function vi(E){let e=JSON.stringify(E[18])+\"\",T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){T=te(e)},m(t,r){V(t,T,r)},p(t,r){r&8&&e!==(e=JSON.stringify(t[18])+\"\")&&Le(T,e)},d(t){t&&Y(T)}}}function Fi(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new aE({props:{$$slots:{default:[vi]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&67108872&&(R.$$scope={dirty:r,ctx:t}),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function Yi(E){let e,T=E[18].question+\"\",t"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=te(\"I interpreted your question as: \"),t=te(T)},m(r,R){V(r,e,R),V(r,t,R)},p(r,R){R&8&&T!==(T=r[18].question+\"\")&&Le(t,T)},d(r){r&&(Y(e),Y(t))}}}function Vi(E){let e,T,t,r,R,n"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "e=new aE({props:{$$slots:{default:[Yi]},$$scope:{ctx:E}}})"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function s(){return E[12](E[18])}return t=new IE({props:{message:\"Edit Question\",onSubmit:s}}),R=new IE({props:{message:\"New Question\",onSubmit:E[13]}}),{c(){K(e.$$.fragment),T=$(),K(t.$$.fragment),r=$(),K(R.$$.fragment)},m(S,A){X(e,S,A),V(S,T,A),X(t,S,A),V(S,r,A),X(R,S,A),n=!0},p(S,A){E=S"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const o={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "A&67108872&&(o.$$scope={dirty:A,ctx:E}),e.$set(o)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const i={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "A&24&&(i.onSubmit=s),t.$set(i)},i(S){n||(m(e.$$.fragment,S),m(t.$$.fragment,S),m(R.$$.fragment,S),n=!0)},o(S){y(e.$$.fragment,S),y(t.$$.fragment,S),y(R.$$.fragment,S),n=!1},d(S){S&&(Y(T),Y(r)),k(e,S),k(t,S),k(R,S)}}}function Wi(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new en({props:{functionTemplate:E[18].function_template}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&8&&(R.functionTemplate=t[18].function_template),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function wi(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new Oi({props:{functionData:E[18].function}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&8&&(R.functionData=t[18].function),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function $i(E){let e=E[18].text+\"\",T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){T=te(e)},m(t,r){V(t,T,r)},p(t,r){r&8&&e!==(e=t[18].text+\"\")&&Le(T,e)},d(t){t&&Y(T)}}}function xi(E){let e,T,t,r"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new aE({props:{$$slots:{default:[$i]},$$scope:{ctx:E}}}),t=new qA({props:{message:E[18].text}}),{c(){K(e.$$.fragment),T=$(),K(t.$$.fragment)},m(R,n){X(e,R,n),V(R,T,n),X(t,R,n),r=!0},p(R,n){const s={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "n&67108872&&(s.$$scope={dirty:n,ctx:R}),e.$set(s)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const S={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "n&8&&(S.message=R[18].text),t.$set(S)},i(R){r||(m(e.$$.fragment,R),m(t.$$.fragment,R),r=!0)},o(R){y(e.$$.fragment,R),y(t.$$.fragment,R),r=!1},d(R){R&&Y(T),k(e,R),k(t,R)}}}function Xi(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new $A({props:{onSubmit:vn}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p:j,i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function ki(E){let e=E[18].sql+\"\",T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){T=te(e)},m(t,r){V(t,T,r)},p(t,r){r&8&&e!==(e=t[18].sql+\"\")&&Le(T,e)},d(t){t&&Y(T)}}}function Ki(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new bR({props:{$$slots:{default:[ki]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&67108872&&(R.$$scope={dirty:r,ctx:t}),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function Ji(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new aE({props:{$$slots:{default:[Ki]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&67108872&&(R.$$scope={dirty:r,ctx:t}),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function qi(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new gR({props:{id:E[18].id,df:E[18].df}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&8&&(R.id=t[18].id),r&8&&(R.df=t[18].df),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function Qi(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new HR({props:{fig:E[18].fig}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&8&&(R.fig=t[18].fig),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function Xr(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new Ze({props:{$$slots:{default:[ji]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&67108872&&(R.$$scope={dirty:r,ctx:t}),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function Zi(E){let e=E[18].summary+\"\",T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){T=te(e)},m(t,r){V(t,T,r)},p(t,r){r&8&&e!==(e=t[18].summary+\"\")&&Le(T,e)},d(t){t&&Y(T)}}}function ji(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new aE({props:{$$slots:{default:[Zi]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&67108872&&(R.$$scope={dirty:r,ctx:t}),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function kr(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function t(){return E[11](E[18])}return e=new IE({props:{message:\"Auto Fix\",onSubmit:t}}),{c(){K(e.$$.fragment)},m(r,R){X(e,r,R),T=!0},p(r,R){E=r"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const n={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "R&8&&(n.onSubmit=t),e.$set(n)},i(r){T||(m(e.$$.fragment,r),T=!0)},o(r){y(e.$$.fragment,r),T=!1},d(r){k(e,r)}}}function zi(E){let e,T,t,r,R,n"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "e=new PT({props:{message:E[18].error}}),t=new IE({props:{message:\"Manually Fix\",onSubmit:E[10]}})"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let s=E[0].auto_fix_sql&&kr(E)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){K(e.$$.fragment),T=$(),K(t.$$.fragment),r=$(),s&&s.c(),R=je()},m(S,A){X(e,S,A),V(S,T,A),X(t,S,A),V(S,r,A),s&&s.m(S,A),V(S,R,A),n=!0},p(S,A){const o={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "A&8&&(o.message=S[18].error),e.$set(o),S[0].auto_fix_sql?s?(s.p(S,A),A&1&&m(s,1)):(s=kr(S),s.c(),m(s,1),s.m(R.parentNode,R)):s&&(Ge(),y(s,1,1,()=>{s=null}),ge())},i(S){n||(m(e.$$.fragment,S),m(t.$$.fragment,S),m(s),n=!0)},o(S){y(e.$$.fragment,S),y(t.$$.fragment,S),y(s),n=!1},d(S){S&&(Y(T),Y(r),Y(R)),k(e,S),k(t,S),s&&s.d(S)}}}function ea(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new PT({props:{message:E[18].error}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&8&&(R.message=t[18].error),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function Kr(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new WE({props:{message:\"\",$$slots:{default:[ta]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&67108865&&(R.$$scope={dirty:r,ctx:t}),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function Ea(E){let e,T,t,r=E[0].function_generation&&Jr(E)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return T=new IE({props:{message:\"Yes, train as Question-SQL pair\",onSubmit:E[8]}}),{c(){r&&r.c(),e=$(),K(T.$$.fragment)},m(R,n){r&&r.m(R,n),V(R,e,n),X(T,R,n),t=!0},p(R,n){R[0].function_generation?r?n&1&&m(r,1):(r=Jr(R),r.c(),m(r,1),r.m(e.parentNode,e)):r&&(Ge(),y(r,1,1,()=>{r=null}),ge())},i(R){t||(m(r),m(T.$$.fragment,R),t=!0)},o(R){y(r),y(T.$$.fragment,R),t=!1},d(R){R&&Y(e),r&&r.d(R),k(T,R)}}}function Jr(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new IE({props:{message:\"Yes, create function\",onSubmit:E[7]}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function ta(E){let e=fT()!==null,T,t,r,R=e&&Ea(E)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return t=new IE({props:{message:\"No\",onSubmit:E[9]}}),{c(){R&&R.c(),T=$(),K(t.$$.fragment)},m(n,s){R&&R.m(n,s),V(n,T,s),X(t,n,s),r=!0},p(n,s){e&&R.p(n,s)},i(n){r||(m(R),m(t.$$.fragment,n),r=!0)},o(n){y(R),y(t.$$.fragment,n),r=!1},d(n){n&&Y(T),R&&R.d(n),k(t,n)}}}function qr(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new Ze({props:{$$slots:{default:[ra]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function Ta(E){let e"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=te(\"Were the results correct?\")},m(T,t){V(T,e,t)},d(T){T&&Y(e)}}}function ra(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new aE({props:{$$slots:{default:[Ta]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&67108864&&(R.$$scope={dirty:r,ctx:t}),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function Ra(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new kA({props:{onSubmit:E[6],placeholder:\"Make the line red\",buttonText:\"Update Chart\",currentValue:\"\"}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p:j,i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function Qr(E){let e,T,t,r"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "e=new Ze({props:{$$slots:{default:[na]},$$scope:{ctx:E}}})"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let R=E[0].redraw_chart&&Zr(E)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){K(e.$$.fragment),T=$(),R&&R.c(),t=je()},m(n,s){X(e,n,s),V(n,T,s),R&&R.m(n,s),V(n,t,s),r=!0},p(n,s){const S={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "s&67108872&&(S.$$scope={dirty:s,ctx:n}),e.$set(S),n[0].redraw_chart?R?s&1&&m(R,1):(R=Zr(n),R.c(),m(R,1),R.m(t.parentNode,t)):R&&(Ge(),y(R,1,1,()=>{R=null}),ge())},i(n){r||(m(e.$$.fragment,n),m(R),r=!0)},o(n){y(e.$$.fragment,n),y(R),r=!1},d(n){n&&(Y(T),Y(t)),k(e,n),R&&R.d(n)}}}function na(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new HR({props:{fig:E[18].fig}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&8&&(R.fig=t[18].fig),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function Zr(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new Ze({props:{$$slots:{default:[Aa]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function Aa(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new IE({props:{message:\"Redraw Chart\",onSubmit:Fn}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p:j,i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function jr(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new Ze({props:{$$slots:{default:[sa]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&67108872&&(R.$$scope={dirty:r,ctx:t}),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function sa(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new gR({props:{id:E[18].id,df:E[18].df}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&8&&(R.id=t[18].id),r&8&&(R.df=t[18].df),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function zr(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new IE({props:{message:E[21],onSubmit:uT}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&8&&(R.message=t[21]),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function Sa(E){let e=E[18].header+\"\",T,t,r,R,n=De(E[18].questions),s=[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let A=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "A<n.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "A+=1)s[A]=zr(Vr(E,n,A))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const S=A=>y(s[A],1,1,()=>{s[A]=null})"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){T=te(e),t=$()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let A=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "A<s.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "A+=1)s[A].c()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r=je()},m(A,o){V(A,T,o),V(A,t,o)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let i=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "i<s.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "i+=1)s[i]&&s[i].m(A,o)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "V(A,r,o),R=!0},p(A,o){if((!R||o&8)&&e!==(e=A[18].header+\"\")&&Le(T,e),o&8){n=De(A[18].questions)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let i"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(i=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "i<n.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "i+=1){const _=Vr(A,n,i)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "s[i]?(s[i].p(_,o),m(s[i],1)):(s[i]=zr(_),s[i].c(),m(s[i],1),s[i].m(r.parentNode,r))}for(Ge(),i=n.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "i<s.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "i+=1)S(i)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "ge()}},i(A){if(!R){for(let o=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "o<n.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "o+=1)m(s[o])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "R=!0}},o(A){s=s.filter(Boolean)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let o=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "o<s.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "o+=1)y(s[o])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "R=!1},d(A){A&&(Y(T),Y(t),Y(r)),nE(s,A)}}}function oa(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new aE({props:{$$slots:{default:[Sa]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&67108872&&(R.$$scope={dirty:r,ctx:t}),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function eR(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new Ze({props:{$$slots:{default:[aa]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&67108872&&(R.$$scope={dirty:r,ctx:t}),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function Oa(E){let e=E[18].text+\"\",T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){T=te(e)},m(t,r){V(t,T,r)},p(t,r){r&8&&e!==(e=t[18].text+\"\")&&Le(T,e)},d(t){t&&Y(T)}}}function ia(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new bR({props:{$$slots:{default:[Oa]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&67108872&&(R.$$scope={dirty:r,ctx:t}),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function aa(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new aE({props:{$$slots:{default:[ia]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&67108872&&(R.$$scope={dirty:r,ctx:t}),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function ER(E){let e,T,t,r"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const R=[Bi,yi,bi,Hi,gi,Gi,hi,mi,Ui,Mi,pi,di,Di,Pi,fi,ci,ui,Ci,Li],n=[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function s(S,A){return S[18].type===\"user_question\"?0:S[18].type===\"sql\"?1:S[18].type===\"question_list\"?2:S[18].type===\"df\"?3:S[18].type===\"plotly_figure\"?4:S[18].type===\"chart_modification\"?5:S[18].type===\"feedback_question\"?6:S[18].type===\"feedback_buttons\"?7:S[18].type===\"feedback_correct\"?8:S[18].type===\"feedback_incorrect\"?9:S[18].type===\"error\"?10:S[18].type===\"sql_error\"?11:S[18].type===\"question_cache\"?12:S[18].type===\"user_sql\"?13:S[18].type===\"text\"?14:S[18].type===\"function\"?15:S[18].type===\"function_template\"?16:S[18].type===\"rewritten_question\"?17:18}return e=s(E),T=n[e]=R[e](E),{c(){T.c(),t=je()},m(S,A){n[e].m(S,A),V(S,t,A),r=!0},p(S,A){let o=e"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "e=s(S),e===o?n[e].p(S,A):(Ge(),y(n[o],1,1,()=>{n[o]=null}),ge(),T=n[e],T?T.p(S,A):(T=n[e]=R[e](S),T.c()),m(T,1),T.m(t.parentNode,t))},i(S){r||(m(T),r=!0)},o(S){y(T),r=!1},d(S){S&&Y(t),n[e].d(S)}}}function tR(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new dA({}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function TR(E){let e,T,t=De(E[3]),r=[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let n=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "n<t.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "n+=1)r[n]=RR(Fr(E,t,n))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const R=n=>y(r[n],1,1,()=>{r[n]=null})"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){for(let n=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "n<r.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "n+=1)r[n].c()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "e=je()},m(n,s){for(let S=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "S<r.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "S+=1)r[S]&&r[S].m(n,s)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "V(n,e,s),T=!0},p(n,s){if(s&8){t=De(n[3])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let S"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(S=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "S<t.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "S+=1){const A=Fr(n,t,S)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r[S]?(r[S].p(A,s),m(r[S],1)):(r[S]=RR(A),r[S].c(),m(r[S],1),r[S].m(e.parentNode,e))}for(Ge(),S=t.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "S<r.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "S+=1)R(S)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "ge()}},i(n){if(!T){for(let s=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "s<t.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "s+=1)m(r[s])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "T=!0}},o(n){r=r.filter(Boolean)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let s=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "s<r.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "s+=1)y(r[s])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "T=!1},d(n){n&&Y(e),nE(r,n)}}}function rR(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function t(){return E[14](E[15])}return e=new yA({props:{message:\"Re-Run SQL\",onSubmit:t}}),{c(){K(e.$$.fragment)},m(r,R){X(e,r,R),T=!0},p(r,R){E=r"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const n={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "R&8&&(n.onSubmit=t),e.$set(n)},i(r){T||(m(e.$$.fragment,r),T=!0)},o(r){y(e.$$.fragment,r),T=!1},d(r){k(e,r)}}}function RR(E){let e,T,t=E[15].type===\"question_cache\"&&rR(E)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){t&&t.c(),e=je()},m(r,R){t&&t.m(r,R),V(r,e,R),T=!0},p(r,R){r[15].type===\"question_cache\"?t?(t.p(r,R),R&8&&m(t,1)):(t=rR(r),t.c(),m(t,1),t.m(e.parentNode,e)):t&&(Ge(),y(t,1,1,()=>{t=null}),ge())},i(r){T||(m(t),T=!0)},o(r){y(t),T=!1},d(r){r&&Y(e),t&&t.d(r)}}}function Ia(E){let e,T,t,r,R,n,s,S,A,o,i,_,c,P,p"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "t=new EA({})"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let C=E[0].debug&&wr(),L=E[1]&&E[1].type==\"question_list\"&&!E[2]&&$r(E),I=De(E[3]),u=[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let O=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "O<I.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "O+=1)u[O]=ER(Yr(E,I,O))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const H=O=>y(u[O],1,1,()=>{u[O]=null})"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let b=E[5]&&tR()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "i=new lA({})"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let M=E[2]&&TR(E)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return P=new IA({props:{onSubmit:uT}}),{c(){e=f(\"div\"),T=f(\"div\"),K(t.$$.fragment),r=$(),C&&C.c(),R=$(),L&&L.c(),n=$(),s=f(\"ul\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let O=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "O<u.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "O+=1)u[O].c()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "S=$(),b&&b.c(),A=$(),o=f(\"footer\"),K(i.$$.fragment),_=$(),M&&M.c(),c=$(),K(P.$$.fragment),a(s,\"class\",\"mt-16 space-y-5\"),a(T,\"class\",\"py-10 lg:py-14\"),a(o,\"class\",\"max-w-4xl mx-auto sticky bottom-0 z-10 p-3 sm:py-6\"),a(e,\"class\",\"relative h-screen w-full lg:pl-64\")},m(O,N){V(O,e,N),l(e,T),X(t,T,null),l(T,r),C&&C.m(T,null),l(T,R),L&&L.m(T,null),l(T,n),l(T,s)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let D=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "D<u.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "D+=1)u[D]&&u[D].m(s,null)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "l(s,S),b&&b.m(s,null),l(e,A),l(e,o),X(i,o,null),l(o,_),M&&M.m(o,null),l(o,c),X(P,o,null),p=!0},p(O,[N]){if(O[0].debug?C?N&1&&m(C,1):(C=wr(),C.c(),m(C,1),C.m(T,R)):C&&(Ge(),y(C,1,1,()=>{C=null}),ge()),O[1]&&O[1].type==\"question_list\"&&!O[2]?L?(L.p(O,N),N&6&&m(L,1)):(L=$r(O),L.c(),m(L,1),L.m(T,n)):L&&(Ge(),y(L,1,1,()=>{L=null}),ge()),N&25){I=De(O[3])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let D"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(D=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "D<I.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "D+=1){const B=Yr(O,I,D)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "u[D]?(u[D].p(B,N),m(u[D],1)):(u[D]=ER(B),u[D].c(),m(u[D],1),u[D].m(s,S))}for(Ge(),D=I.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "D<u.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "D+=1)H(D)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "ge()}O[5]?b?N&32&&m(b,1):(b=tR(),b.c(),m(b,1),b.m(s,null)):b&&(Ge(),y(b,1,1,()=>{b=null}),ge()),O[2]?M?(M.p(O,N),N&4&&m(M,1)):(M=TR(O),M.c(),m(M,1),M.m(o,c)):M&&(Ge(),y(M,1,1,()=>{M=null}),ge())},i(O){if(!p){m(t.$$.fragment,O),m(C),m(L)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let N=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "N<I.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "N+=1)m(u[N])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "m(b),m(i.$$.fragment,O),m(M),m(P.$$.fragment,O),p=!0}},o(O){y(t.$$.fragment,O),y(C),y(L),u=u.filter(Boolean)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let N=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "N<u.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "N+=1)y(u[N])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "y(b),y(i.$$.fragment,O),y(M),y(P.$$.fragment,O),p=!1},d(O){O&&Y(e),k(t),C&&C.d(),L&&L.d(),nE(u,O),b&&b.d(),k(i),M&&M.d(),k(P)}}}function Na(E,e,T){let t,r,R,n,s,S"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return eE(E,VE,I=>T(0,t=I)),eE(E,LT,I=>T(1,r=I)),eE(E,Ht,I=>T(2,R=I)),eE(E,YE,I=>T(3,n=I)),eE(E,BE,I=>T(4,s=I)),eE(E,St,I=>T(5,S=I)),[t,r,R,n,s,S,I=>{$n(I)},()=>{Yn()},()=>{wn()},()=>{wT()},()=>{wT()},I=>{Bn(I.error)},I=>{it(),OT(BE,s=I.question,s)},()=>{it()},I=>I.type===\"question_cache\"?dn(I.id):void 0]}class la extends ue{constructor(e){super(),Ce(this,e,Na,Ia,_e,{})}}function _a(E){let e,T,t,r,R,n,s,S,A,o,i,_,c,P,p,C,L,I,u"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=f(\"div\"),T=f(\"div\"),t=f(\"div\"),r=f(\"div\"),R=f(\"h3\"),R.textContent=\"Are you sure?\",n=$(),s=f(\"button\"),s.innerHTML='<span class=\"sr-only\">Close</span> <svg class=\"w-3.5 h-3.5\" width=\"8\" height=\"8\" viewBox=\"0 0 8 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0.258206 1.00652C0.351976 0.912791 0.479126 0.860131 0.611706 0.860131C0.744296 0.860131 0.871447 0.912791 0.965207 1.00652L3.61171 3.65302L6.25822 1.00652C6.30432 0.958771 6.35952 0.920671 6.42052 0.894471C6.48152 0.868271 6.54712 0.854471 6.61352 0.853901C6.67992 0.853321 6.74572 0.865971 6.80722 0.891111C6.86862 0.916251 6.92442 0.953381 6.97142 1.00032C7.01832 1.04727 7.05552 1.1031 7.08062 1.16454C7.10572 1.22599 7.11842 1.29183 7.11782 1.35822C7.11722 1.42461 7.10342 1.49022 7.07722 1.55122C7.05102 1.61222 7.01292 1.6674 6.96522 1.71352L4.31871 4.36002L6.96522 7.00648C7.05632 7.10078 7.10672 7.22708 7.10552 7.35818C7.10442 7.48928 7.05182 7.61468 6.95912 7.70738C6.86642 7.80018 6.74102 7.85268 6.60992 7.85388C6.47882 7.85498 6.35252 7.80458 6.25822 7.71348L3.61171 5.06702L0.965207 7.71348C0.870907 7.80458 0.744606 7.85498 0.613506 7.85388C0.482406 7.85268 0.357007 7.80018 0.264297 7.70738C0.171597 7.61468 0.119017 7.48928 0.117877 7.35818C0.116737 7.22708 0.167126 7.10078 0.258206 7.00648L2.90471 4.36002L0.258206 1.71352C0.164476 1.61976 0.111816 1.4926 0.111816 1.36002C0.111816 1.22744 0.164476 1.10028 0.258206 1.00652Z\" fill=\"currentColor\"></path></svg>',S=$(),A=f(\"div\"),o=f(\"p\"),i=te(E[0]),_=$(),c=f(\"div\"),P=f(\"button\"),P.textContent=\"Close\",p=$(),C=f(\"button\"),L=te(E[1]),a(R,\"class\",\"font-bold text-gray-800 dark:text-white\"),a(s,\"type\",\"button\"),a(s,\"class\",\"hs-dropdown-toggle inline-flex flex-shrink-0 justify-center items-center h-8 w-8 rounded-md text-gray-500 hover:text-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2 focus:ring-offset-white transition-all text-sm dark:focus:ring-gray-700 dark:focus:ring-offset-gray-800\"),a(s,\"data-hs-overlay\",\"#hs-vertically-centered-modal\"),a(r,\"class\",\"flex justify-between items-center py-3 px-4 border-b dark:border-gray-700\"),a(o,\"class\",\"text-gray-800 dark:text-gray-400\"),a(A,\"class\",\"p-4 overflow-y-auto\"),a(P,\"type\",\"button\"),a(P,\"class\",\"hs-dropdown-toggle py-3 px-4 inline-flex justify-center items-center gap-2 rounded-md border font-medium bg-white text-gray-700 shadow-sm align-middle hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-white focus:ring-blue-600 transition-all text-sm dark:bg-slate-900 dark:hover:bg-slate-800 dark:border-gray-700 dark:text-gray-400 dark:hover:text-white dark:focus:ring-offset-gray-800\"),a(P,\"data-hs-overlay\",\"#hs-vertically-centered-modal\"),a(C,\"class\",\"py-3 px-4 inline-flex justify-center items-center gap-2 rounded-md border border-transparent font-semibold bg-blue-500 text-white hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all text-sm dark:focus:ring-offset-gray-800\"),a(c,\"class\",\"flex justify-end items-center gap-x-2 py-3 px-4 border-t dark:border-gray-700\"),a(t,\"class\",\"flex flex-col bg-white border shadow-sm rounded-xl dark:bg-gray-800 dark:border-gray-700 dark:shadow-slate-700/[.7]\"),a(T,\"class\",\"hs-overlay-open:mt-7 hs-overlay-open:opacity-100 hs-overlay-open:duration-500 mt-0 opacity-0 ease-out transition-all sm:max-w-lg sm:w-full m-3 sm:mx-auto min-h-[calc(100%-3.5rem)] flex items-center\"),a(e,\"class\",\"hs-overlay open w-full h-full fixed top-0 left-0 z-[60] overflow-x-hidden overflow-y-auto\")},m(H,b){V(H,e,b),l(e,T),l(T,t),l(t,r),l(r,R),l(r,n),l(r,s),l(t,S),l(t,A),l(A,o),l(o,i),l(t,_),l(t,c),l(c,P),l(c,p),l(c,C),l(C,L),I||(u=[Ne(s,\"click\",function(){zE(E[2])&&E[2].apply(this,arguments)}),Ne(P,\"click\",function(){zE(E[2])&&E[2].apply(this,arguments)}),Ne(C,\"click\",function(){zE(E[3])&&E[3].apply(this,arguments)})],I=!0)},p(H,[b]){E=H,b&1&&Le(i,E[0]),b&2&&Le(L,E[1])},i:j,o:j,d(H){H&&Y(e),I=!1,NE(u)}}}function La(E,e,T){let{message:t}=e,{buttonLabel:r}=e,{onClose:R}=e,{onConfirm:n}=e"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return E.$$set=s=>{\"message\"in s&&T(0,t=s.message),\"buttonLabel\"in s&&T(1,r=s.buttonLabel),\"onClose\"in s&&T(2,R=s.onClose),\"onConfirm\"in s&&T(3,n=s.onConfirm)},[t,r,R,n]}class Ca extends ue{constructor(e){super(),Ce(this,e,La,_a,_e,{message:0,buttonLabel:1,onClose:2,onConfirm:3})}}function nR(E,e,T){const t=E.slice()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return t[10]=e[T].name,t[11]=e[T].description,t[12]=e[T].example,t}function AR(E){let e,T,t,r,R,n,s,S,A,o,i,_"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return o=Sn(E[7][0]),{c(){e=f(\"div\"),T=f(\"div\"),t=f(\"input\"),r=$(),R=f(\"label\"),n=f(\"span\"),n.textContent=`${E[10]}`,s=$(),S=f(\"span\"),S.textContent=`${E[11]}`,A=$(),a(t,\"id\",\"hs-radio-\"+E[10]),t.__value=E[10],Ye(t,t.__value),a(t,\"name\",\"hs-radio-with-description\"),a(t,\"type\",\"radio\"),a(t,\"class\",\"border-gray-200 rounded-full text-blue-600 focus:ring-blue-500 dark:bg-gray-800 dark:border-gray-700 dark:checked:bg-blue-500 dark:checked:border-blue-500 dark:focus:ring-offset-gray-800\"),a(t,\"aria-describedby\",\"hs-radio-delete-description\"),a(T,\"class\",\"flex items-center h-5 mt-1\"),a(n,\"class\",\"block text-sm font-semibold text-gray-800 dark:text-gray-300\"),a(S,\"id\",\"hs-radio-ddl-description\"),a(S,\"class\",\"block text-sm text-gray-600 dark:text-gray-500\"),a(R,\"for\",\"hs-radio-\"+E[10]),a(R,\"class\",\"ml-3\"),a(e,\"class\",\"relative flex items-start\"),o.p(t)},m(c,P){V(c,e,P),l(e,T),l(T,t),t.checked=t.__value===E[0],l(e,r),l(e,R),l(R,n),l(R,s),l(R,S),l(e,A),i||(_=Ne(t,\"change\",E[6]),i=!0)},p(c,P){P&1&&(t.checked=t.__value===c[0])},d(c){c&&Y(e),o.r(),i=!1,_()}}}function ua(E){let e,T,t,r,R,n,s,S,A,o,i,_,c,P,p,C,L,I,u,H,b,M,O,N,D,B=De(E[3]),h=[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let G=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "G<B.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "G+=1)h[G]=AR(nR(E,B,G))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){var G"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "e=f(\"div\"),T=f(\"div\"),t=f(\"div\"),r=f(\"div\"),R=f(\"h2\"),R.textContent=\"Add Training Data\",n=$(),s=f(\"button\"),s.innerHTML='<span class=\"sr-only\">Close</span> <svg class=\"w-3.5 h-3.5\" width=\"8\" height=\"8\" viewBox=\"0 0 8 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0.258206 1.00652C0.351976 0.912791 0.479126 0.860131 0.611706 0.860131C0.744296 0.860131 0.871447 0.912791 0.965207 1.00652L3.61171 3.65302L6.25822 1.00652C6.30432 0.958771 6.35952 0.920671 6.42052 0.894471C6.48152 0.868271 6.54712 0.854471 6.61352 0.853901C6.67992 0.853321 6.74572 0.865971 6.80722 0.891111C6.86862 0.916251 6.92442 0.953381 6.97142 1.00032C7.01832 1.04727 7.05552 1.1031 7.08062 1.16454C7.10572 1.22599 7.11842 1.29183 7.11782 1.35822C7.11722 1.42461 7.10342 1.49022 7.07722 1.55122C7.05102 1.61222 7.01292 1.6674 6.96522 1.71352L4.31871 4.36002L6.96522 7.00648C7.05632 7.10078 7.10672 7.22708 7.10552 7.35818C7.10442 7.48928 7.05182 7.61468 6.95912 7.70738C6.86642 7.80018 6.74102 7.85268 6.60992 7.85388C6.47882 7.85498 6.35252 7.80458 6.25822 7.71348L3.61171 5.06702L0.965207 7.71348C0.870907 7.80458 0.744606 7.85498 0.613506 7.85388C0.482406 7.85268 0.357007 7.80018 0.264297 7.70738C0.171597 7.61468 0.119017 7.48928 0.117877 7.35818C0.116737 7.22708 0.167126 7.10078 0.258206 7.00648L2.90471 4.36002L0.258206 1.71352C0.164476 1.61976 0.111816 1.4926 0.111816 1.36002C0.111816 1.22744 0.164476 1.10028 0.258206 1.00652Z\" fill=\"currentColor\"></path></svg>',S=$(),A=f(\"span\"),A.textContent=\"Training Data Type\",o=$(),i=f(\"div\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let F=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "F<h.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "F+=1)h[F].c()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "_=$(),c=f(\"div\"),P=f(\"label\"),p=te(\"Your \"),C=te(E[0]),L=$(),I=f(\"div\"),u=f(\"textarea\"),b=$(),M=f(\"div\"),O=f(\"button\"),O.textContent=\"Save\",a(R,\"class\",\"text-xl text-gray-800 font-bold sm:text-3xl dark:text-white\"),a(s,\"type\",\"button\"),a(s,\"class\",\"hs-dropdown-toggle inline-flex flex-shrink-0 justify-center items-center h-8 w-8 rounded-md text-gray-500 hover:text-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2 focus:ring-offset-white transition-all text-sm dark:focus:ring-gray-700 dark:focus:ring-offset-gray-800\"),a(s,\"data-hs-overlay\",\"#hs-vertically-centered-modal\"),a(r,\"class\",\"flex justify-between items-center py-3 px-4 border-b dark:border-gray-700 mb-2\"),a(A,\"class\",\"block mb-2 text-sm font-medium dark:text-white\"),a(i,\"class\",\"grid space-y-3 mb-1\"),a(P,\"for\",\"hs-feedback-post-comment-textarea-1\"),a(P,\"class\",\"block mt-2 mb-2 text-sm font-medium dark:text-white\"),a(u,\"id\",\"hs-feedback-post-comment-textarea-1\"),a(u,\"name\",\"hs-feedback-post-comment-textarea-1\"),a(u,\"rows\",\"3\"),a(u,\"class\",\"py-3 px-4 block w-full border border-gray-200 rounded-md text-sm focus:border-blue-500 focus:ring-blue-500 sm:p-4 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400\"),a(u,\"placeholder\",H=((G=E[3].find(E[8]))==null?void 0:G.example)??\"No example available\"),a(I,\"class\",\"mt-1\"),a(c,\"class\",\"mt-2 border-t dark:border-gray-700\"),a(O,\"class\",\"py-3 px-4 inline-flex justify-center items-center gap-2 rounded-md border border-transparent font-semibold bg-blue-500 text-white hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all dark:focus:ring-offset-gray-800\"),a(M,\"class\",\"mt-6 grid\"),a(t,\"class\",\"mt-5 p-4 relative z-10 bg-white border rounded-xl sm:mt-10 md:p-10 dark:bg-gray-800 dark:border-gray-700\"),a(T,\"class\",\"mx-auto max-w-2xl\"),a(e,\"class\",\"max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 mx-auto\")},m(G,F){V(G,e,F),l(e,T),l(T,t),l(t,r),l(r,R),l(r,n),l(r,s),l(t,S),l(t,A),l(t,o),l(t,i)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let W=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "W<h.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "W+=1)h[W]&&h[W].m(i,null)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "l(t,_),l(t,c),l(c,P),l(P,p),l(P,C),l(c,L),l(c,I),l(I,u),Ye(u,E[2]),l(t,b),l(t,M),l(M,O),N||(D=[Ne(s,\"click\",function(){zE(E[1])&&E[1].apply(this,arguments)}),Ne(u,\"input\",E[9]),Ne(O,\"click\",E[4])],N=!0)},p(G,[F]){var W"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "if(E=G,F&9){B=De(E[3])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let x"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(x=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "x<B.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "x+=1){const J=nR(E,B,x)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "h[x]?h[x].p(J,F):(h[x]=AR(J),h[x].c(),h[x].m(i,null))}for("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "x<h.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "x+=1)h[x].d(1)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "h.length=B.length}F&1&&Le(C,E[0]),F&1&&H!==(H=((W=E[3].find(E[8]))==null?void 0:W.example)??\"No example available\")&&a(u,\"placeholder\",H),F&4&&Ye(u,E[2])},i:j,o:j,d(G){G&&Y(e),nE(h,G),N=!1,NE(D)}}}function ca(E,e,T){let{onDismiss:t}=e,{onTrain:r}=e,{selectedTrainingDataType:R=\"SQL\"}=e,n=[{name:\"DDL\",description:\"These are the CREATE TABLE statements that define your database structure.\",example:\"CREATE TABLE table_name (column_1 datatype, column_2 datatype, column_3 datatype)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "\"},{name:\"Documentation\",description:\"This can be any text-based documentation. Keep the chunks small and focused on a single topic.\",example:\"Our definition of ABC is XYZ.\"},{name:\"SQL\",description:\"This can be any SQL statement that works. The more the merrier.\",example:\"SELECT column_1, column_2 FROM table_name"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "\"}],s=\"\""
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const S=()=>{r(s,R.toLowerCase())},A=[[]]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function o(){R=this.__value,T(0,R)}const i=c=>c.name===R"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function _(){s=this.value,T(2,s)}return E.$$set=c=>{\"onDismiss\"in c&&T(1,t=c.onDismiss),\"onTrain\"in c&&T(5,r=c.onTrain),\"selectedTrainingDataType\"in c&&T(0,R=c.selectedTrainingDataType)},[R,t,s,n,S,r,o,A,i,_]}class fa extends ue{constructor(e){super(),Ce(this,e,ca,ua,_e,{onDismiss:1,onTrain:5,selectedTrainingDataType:0})}}function sR(E,e,T){const t=E.slice()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return t[21]=e[T],t}function SR(E,e,T){const t=E.slice()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return t[24]=e[T],t}function oR(E,e,T){const t=E.slice()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return t[24]=e[T],t}function iR(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new fa({props:{onDismiss:E[13],onTrain:E[0]}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&1&&(R.onTrain=t[0]),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function Pa(E){let e"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=te(\"Action\")},m(T,t){V(T,e,t)},p:j,d(T){T&&Y(e)}}}function Da(E){let e=E[24]+\"\",T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){T=te(e)},m(t,r){V(t,T,r)},p:j,d(t){t&&Y(T)}}}function aR(E){let e,T,t,r"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function R(S,A){return S[24]!=\"id\"?Da:Pa}let s=R(E)(E)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=f(\"th\"),T=f(\"div\"),t=f(\"span\"),s.c(),r=$(),a(t,\"class\",\"text-xs font-semibold uppercase tracking-wide text-gray-800 dark:text-gray-200\"),a(T,\"class\",\"flex items-center gap-x-2\"),a(e,\"scope\",\"col\"),a(e,\"class\",\"px-6 py-3 text-left\")},m(S,A){V(S,e,A),l(e,T),l(T,t),s.m(t,null),l(e,r)},p(S,A){s.p(S,A)},d(S){S&&Y(e),s.d()}}}function da(E){let e,T,t"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function r(){return E[18](E[21],E[24])}return{c(){e=f(\"button\"),e.textContent=\"Delete\",a(e,\"type\",\"button\"),a(e,\"class\",\"py-2 px-3 inline-flex justify-center items-center gap-2 rounded-md border-2 border-red-200 font-semibold text-red-500 hover:text-white hover:bg-red-500 hover:border-red-500 focus:outline-none focus:ring-2 focus:ring-red-200 focus:ring-offset-2 transition-all text-sm dark:focus:ring-offset-gray-800\")},m(R,n){V(R,e,n),T||(t=Ne(e,\"click\",r),T=!0)},p(R,n){E=R},d(R){R&&Y(e),T=!1,t()}}}function pa(E){let e,T=E[21][E[24]]+\"\",t"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=f(\"span\"),t=te(T),a(e,\"class\",\"text-gray-800 dark:text-gray-200\")},m(r,R){V(r,e,R),l(e,t)},p(r,R){R&16&&T!==(T=r[21][r[24]]+\"\")&&Le(t,T)},d(r){r&&Y(e)}}}function IR(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function t(n,s){return n[24]!=\"id\"?pa:da}let R=t(E)(E)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=f(\"td\"),T=f(\"div\"),R.c(),a(T,\"class\",\"px-6 py-3\"),a(e,\"class\",\"h-px w-px \")},m(n,s){V(n,e,s),l(e,T),R.m(T,null)},p(n,s){R.p(n,s)},d(n){n&&Y(e),R.d()}}}function NR(E){let e,T,t=De(E[8]),r=[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let R=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "R<t.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "R+=1)r[R]=IR(SR(E,t,R))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=f(\"tr\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let R=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "R<r.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "R+=1)r[R].c()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "T=$()},m(R,n){V(R,e,n)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let s=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "s<r.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "s+=1)r[s]&&r[s].m(e,null)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "l(e,T)},p(R,n){if(n&304){t=De(R[8])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let s"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(s=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "s<t.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "s+=1){const S=SR(R,t,s)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r[s]?r[s].p(S,n):(r[s]=IR(S),r[s].c(),r[s].m(e,T))}for("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "s<r.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "s+=1)r[s].d(1)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r.length=t.length}},d(R){R&&Y(e),nE(r,R)}}}function lR(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new Ca({props:{message:\"Are you sure you want to delete this?\",buttonLabel:\"Delete\",onClose:E[19],onConfirm:E[20]}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&32&&(R.onClose=t[19]),r&34&&(R.onConfirm=t[20]),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function Ma(E){let e,T,t,r,R,n,s,S,A,o,i,_,c,P,p,C,L,I,u,H,b,M,O,N,D,B,h,G=E[2]+1+\"\",F,W,x=Math.min(E[3],E[7].length)+\"\",J,oe,z,Oe,Ue,ye,TE,dE,me,fE,rE,pE,Tt,rt,Ve=E[6]&&iR(E),ME=De(E[8]),$e=[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let Te=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "Te<ME.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "Te+=1)$e[Te]=aR(oR(E,ME,Te))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let ze=De(E[4]),ve=[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let Te=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "Te<ze.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "Te+=1)ve[Te]=NR(sR(E,ze,Te))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let Fe=E[5]!=null&&lR(E)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){Ve&&Ve.c(),e=$(),T=f(\"div\"),t=f(\"div\"),r=f(\"div\"),R=f(\"div\"),n=f(\"div\"),s=f(\"div\"),S=f(\"div\"),S.innerHTML='<h2 class=\"text-xl font-semibold text-gray-800 dark:text-gray-200\">Training Data</h2> <p class=\"text-sm text-gray-600 dark:text-gray-400\">Add or remove training data. Good training data is the key to accuracy.</p>',A=$(),o=f(\"div\"),i=f(\"div\"),_=f(\"button\"),_.textContent=\"View all\",c=$(),P=f(\"button\"),P.innerHTML=`<svg class=\"w-3 h-3\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"><path d=\"M2.63452 7.50001L13.6345 7.5M8.13452 13V2\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"></path></svg>\n                    Add training data`,p=$(),C=f(\"table\"),L=f(\"thead\"),I=f(\"tr\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let Te=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "Te<$e.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "Te+=1)$e[Te].c()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "u=$(),H=f(\"tbody\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let Te=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "Te<ve.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "Te+=1)ve[Te].c()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "b=$(),M=f(\"div\"),O=f(\"div\"),N=f(\"p\"),N.textContent=\"Showing:\",D=$(),B=f(\"div\"),h=f(\"span\"),F=te(G),W=te(\" - \"),J=te(x),oe=$(),z=f(\"p\"),z.textContent=`of ${E[7].length}`,Oe=$(),Ue=f(\"div\"),ye=f(\"div\"),TE=f(\"button\"),TE.innerHTML=`<svg class=\"w-3 h-3\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z\"></path></svg>\n                    Prev`,dE=$(),me=f(\"button\"),me.innerHTML=`Next\n                    <svg class=\"w-3 h-3\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z\"></path></svg>`,fE=$(),Fe&&Fe.c(),rE=je(),a(_,\"class\",\"py-2 px-3 inline-flex justify-center items-center gap-2 rounded-md border font-medium bg-white text-gray-700 shadow-sm align-middle hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-white focus:ring-blue-600 transition-all text-sm dark:bg-slate-900 dark:hover:bg-slate-800 dark:border-gray-700 dark:text-gray-400 dark:hover:text-white dark:focus:ring-offset-gray-800\"),a(P,\"class\",\"py-2 px-3 inline-flex justify-center items-center gap-2 rounded-md border border-transparent font-semibold bg-blue-500 text-white hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all text-sm dark:focus:ring-offset-gray-800\"),a(i,\"class\",\"inline-flex gap-x-2\"),a(s,\"class\",\"px-6 py-4 grid gap-3 md:flex md:justify-between md:items-center border-b border-gray-200 dark:border-gray-700\"),a(L,\"class\",\"bg-gray-50 dark:bg-slate-800\"),a(H,\"class\",\"divide-y divide-gray-200 dark:divide-gray-700\"),a(C,\"class\",\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\"),a(N,\"class\",\"text-sm text-gray-600 dark:text-gray-400\"),a(h,\"class\",\"py-2 px-3 pr-9 block w-full border-gray-200 rounded-md text-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-slate-900 dark:border-gray-700 dark:text-gray-400\"),a(B,\"class\",\"max-w-sm space-y-3\"),a(z,\"class\",\"text-sm text-gray-600 dark:text-gray-400\"),a(O,\"class\",\"inline-flex items-center gap-x-2\"),a(TE,\"type\",\"button\"),a(TE,\"class\",\"py-2 px-3 inline-flex justify-center items-center gap-2 rounded-md border font-medium bg-white text-gray-700 shadow-sm align-middle hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-white focus:ring-blue-600 transition-all text-sm dark:bg-slate-900 dark:hover:bg-slate-800 dark:border-gray-700 dark:text-gray-400 dark:hover:text-white dark:focus:ring-offset-gray-800\"),a(me,\"type\",\"button\"),a(me,\"class\",\"py-2 px-3 inline-flex justify-center items-center gap-2 rounded-md border font-medium bg-white text-gray-700 shadow-sm align-middle hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-white focus:ring-blue-600 transition-all text-sm dark:bg-slate-900 dark:hover:bg-slate-800 dark:border-gray-700 dark:text-gray-400 dark:hover:text-white dark:focus:ring-offset-gray-800\"),a(ye,\"class\",\"inline-flex gap-x-2\"),a(M,\"class\",\"px-6 py-4 grid gap-3 md:flex md:justify-between md:items-center border-t border-gray-200 dark:border-gray-700\"),a(n,\"class\",\"bg-white border border-gray-200 rounded-xl shadow-sm overflow-hidden dark:bg-slate-900 dark:border-gray-700\"),a(R,\"class\",\"p-1.5 min-w-full inline-block align-middle\"),a(r,\"class\",\"-m-1.5 overflow-x-auto\"),a(t,\"class\",\"flex flex-col\"),a(T,\"class\",\"max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 mx-auto\")},m(Te,Xe){Ve&&Ve.m(Te,Xe),V(Te,e,Xe),V(Te,T,Xe),l(T,t),l(t,r),l(r,R),l(R,n),l(n,s),l(s,S),l(s,A),l(s,o),l(o,i),l(i,_),l(i,c),l(i,P),l(n,p),l(n,C),l(C,L),l(L,I)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let se=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "se<$e.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "se+=1)$e[se]&&$e[se].m(I,null)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "l(C,u),l(C,H)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let se=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "se<ve.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "se+=1)ve[se]&&ve[se].m(H,null)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "l(n,b),l(n,M),l(M,O),l(O,N),l(O,D),l(O,B),l(B,h),l(h,F),l(h,W),l(h,J),l(O,oe),l(O,z),l(M,Oe),l(M,Ue),l(Ue,ye),l(ye,TE),l(ye,dE),l(ye,me),V(Te,fE,Xe),Fe&&Fe.m(Te,Xe),V(Te,rE,Xe),pE=!0,Tt||(rt=[Ne(_,\"click\",E[11]),Ne(P,\"click\",E[12]),Ne(TE,\"click\",E[9]),Ne(me,\"click\",E[10])],Tt=!0)},p(Te,[Xe]){if(Te[6]?Ve?(Ve.p(Te,Xe),Xe&64&&m(Ve,1)):(Ve=iR(Te),Ve.c(),m(Ve,1),Ve.m(e.parentNode,e)):Ve&&(Ge(),y(Ve,1,1,()=>{Ve=null}),ge()),Xe&256){ME=De(Te[8])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let se"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(se=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "se<ME.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "se+=1){const gE=oR(Te,ME,se)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "$e[se]?$e[se].p(gE,Xe):($e[se]=aR(gE),$e[se].c(),$e[se].m(I,null))}for("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "se<$e.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "se+=1)$e[se].d(1)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "$e.length=ME.length}if(Xe&304){ze=De(Te[4])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let se"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(se=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "se<ze.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "se+=1){const gE=sR(Te,ze,se)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "ve[se]?ve[se].p(gE,Xe):(ve[se]=NR(gE),ve[se].c(),ve[se].m(H,null))}for("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "se<ve.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "se+=1)ve[se].d(1)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "ve.length=ze.length}(!pE||Xe&4)&&G!==(G=Te[2]+1+\"\")&&Le(F,G),(!pE||Xe&8)&&x!==(x=Math.min(Te[3],Te[7].length)+\"\")&&Le(J,x),Te[5]!=null?Fe?(Fe.p(Te,Xe),Xe&32&&m(Fe,1)):(Fe=lR(Te),Fe.c(),m(Fe,1),Fe.m(rE.parentNode,rE)):Fe&&(Ge(),y(Fe,1,1,()=>{Fe=null}),ge())},i(Te){pE||(m(Ve),m(Fe),pE=!0)},o(Te){y(Ve),y(Fe),pE=!1},d(Te){Te&&(Y(e),Y(T),Y(fE),Y(rE)),Ve&&Ve.d(Te),nE($e,Te),nE(ve,Te),Fe&&Fe.d(Te),Tt=!1,NE(rt)}}}function Ua(E,e,T){let{df:t}=e,{onTrain:r}=e,{removeTrainingData:R}=e,n=JSON.parse(t),s=n.length>0?Object.keys(n[0]):[],S=10,A=1,o=Math.ceil(n.length/S),i=(A-1)*S,_=A*S,c=n.slice(i,_)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const P=()=>{A>1&&T(16,A\n            Get the source code</a> <a class=\"w-full sm:w-auto py-3 px-4 inline-flex justify-center items-center gap-x-2 text-sm font-semibold rounded-lg border border-transparent text-blue-600 hover:text-blue-800 disabled:opacity-50 disabled:pointer-events-none dark:text-blue-500 dark:hover:text-blue-400 dark:focus:outline-none dark:focus:ring-1 dark:focus:ring-gray-600\" href=\"../examples.html\"><svg class=\"flex-shrink-0 size-4\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"m15 18-6-6 6-6\"></path></svg>\n            Back to examples</a></div></div> <footer class=\"mt-auto text-center py-5\"><div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\"><p class=\"text-sm text-gray-500\">© All Rights Reserved. 2022.</p></div></footer></div>`,a(e,\"class\",\"flex h-full\")},m(T,t){V(T,e,t)},p:j,i:j,o:j,d(T){T&&Y(e)}}}class Fa extends ue{constructor(e){super(),Ce(this,e,null,va,_e,{})}}function Ya(E){let e,T,t"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=f(\"div\"),T=f(\"div\"),t=f(\"div\"),a(t,\"class\",\"mt-7 bg-white border border-gray-200 rounded-xl shadow-sm dark:bg-gray-800 dark:border-gray-700\"),a(T,\"class\",\"w-full max-w-md mx-auto p-6\"),a(e,\"class\",\"dark:bg-slate-900 bg-gray-100 flex h-screen items-center py-16\")},m(r,R){V(r,e,R),l(e,T),l(T,t),t.innerHTML=E[0]},p(r,[R]){R&1&&(t.innerHTML=r[0])},i:j,o:j,d(r){r&&Y(e)}}}function Va(E,e,T){let t"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return eE(E,bt,r=>T(0,t=r)),[t]}class Wa extends ue{constructor(e){super(),Ce(this,e,Va,Ya,_e,{})}}function wa(E){let e,T,t,r,R,n"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=f(\"div\"),T=f(\"div\"),T.innerHTML='<h3 class=\"text-lg font-bold text-gray-800 dark:text-white\">New</h3> <p class=\"mt-1 text-xs font-medium uppercase text-gray-500 dark:text-neutral-500\">Create a New Function</p>',t=$(),r=f(\"button\"),r.innerHTML=`Create\n    <svg class=\"flex-shrink-0 size-4\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"m9 18 6-6-6-6\"></path></svg>`,a(r,\"class\",\"mt-3 inline-flex items-center gap-x-1 text-sm font-semibold rounded-lg border border-transparent text-green-600 hover:text-green-800 disabled:opacity-50 disabled:pointer-events-none dark:text-green-500 dark:hover:text-green-400\"),a(e,\"class\",\"p-4 flex flex-col justify-between bg-white border border-t-4 border-t-green-600 shadow-sm rounded-xl dark:bg-neutral-900 dark:border-neutral-700 dark:border-t-green-500 dark:shadow-neutral-700/70\")},m(s,S){V(s,e,S),l(e,T),l(e,t),l(e,r),R||(n=Ne(r,\"click\",E[0]),R=!0)},p:j,i:j,o:j,d(s){s&&Y(e),R=!1,n()}}}function $a(E){return[()=>{it()}]}class xa extends ue{constructor(e){super(),Ce(this,e,$a,wa,_e,{})}}function _R(E,e,T){const t=E.slice()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return t[1]=e[T],t}function LR(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new aE({props:{$$slots:{default:[Xa]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function Xa(E){let e"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=te(\"No functions found\")},m(T,t){V(T,e,t)},d(T){T&&Y(e)}}}function CR(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new en({props:{functionTemplate:E[1]}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},p(t,r){const R={}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "r&1&&(R.functionTemplate=t[1]),e.$set(R)},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function ka(E){let e,T,t,r,R,n,s,S,A,o=E[0].length==0&&LR(E),i=De(E[0]),_=[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let P=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "P<i.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "P+=1)_[P]=CR(_R(E,i,P))"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const c=P=>y(_[P],1,1,()=>{_[P]=null})"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return S=new xa({}),{c(){e=f(\"div\"),T=f(\"div\"),t=f(\"h1\"),t.textContent=\"Functions\",r=$(),o&&o.c(),R=$(),n=f(\"div\")"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let P=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "P<_.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "P+=1)_[P].c()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "s=$(),K(S.$$.fragment),a(t,\"class\",\"text-3xl font-bold text-gray-800 sm:text-4xl dark:text-white text-center\"),a(n,\"class\",\"grid grid-cols-4 gap-4 p-4\"),a(T,\"class\",\"py-10 lg:py-14\"),a(e,\"class\",\"relative h-screen w-full lg:pl-64\")},m(P,p){V(P,e,p),l(e,T),l(T,t),l(T,r),o&&o.m(T,null),l(T,R),l(T,n)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let C=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "C<_.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "C+=1)_[C]&&_[C].m(n,null)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "l(n,s),X(S,n,null),A=!0},p(P,[p]){if(P[0].length==0?o?p&1&&m(o,1):(o=LR(P),o.c(),m(o,1),o.m(T,R)):o&&(Ge(),y(o,1,1,()=>{o=null}),ge()),p&1){i=De(P[0])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let C"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(C=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "C<i.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "C+=1){const L=_R(P,i,C)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "_[C]?(_[C].p(L,p),m(_[C],1)):(_[C]=CR(L),_[C].c(),m(_[C],1),_[C].m(n,s))}for(Ge(),C=i.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "C<_.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "C+=1)c(C)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "ge()}},i(P){if(!A){m(o)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let p=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "p<i.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "p+=1)m(_[p])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "m(S.$$.fragment,P),A=!0}},o(P){y(o),_=_.filter(Boolean)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "for(let p=0"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "p<_.length"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "p+=1)y(_[p])"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "y(S.$$.fragment,P),A=!1},d(P){P&&Y(e),o&&o.d(),nE(_,P),k(S)}}}function Ka(E,e,T){let t"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return eE(E,MR,r=>T(0,t=r)),[t]}class Ja extends ue{constructor(e){super(),Ce(this,e,Ka,ka,_e,{})}}function uR(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new Kn({}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function qa(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new aE({props:{$$slots:{default:[EI]},$$scope:{ctx:E}}}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function Qa(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new Ja({}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function Za(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new Wa({}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function ja(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new Fa({}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function za(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new Ba({}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function eI(E){let e,T"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return e=new la({}),{c(){K(e.$$.fragment)},m(t,r){X(e,t,r),T=!0},i(t){T||(m(e.$$.fragment,t),T=!0)},o(t){y(e.$$.fragment,t),T=!1},d(t){k(e,t)}}}function EI(E){let e"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return{c(){e=te(\"Unknown page\")},m(T,t){V(T,e,t)},d(T){T&&Y(e)}}}function tI(E){let e,T,t,r,R,n=E[0]!==\"login\"&&uR()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const s=[eI,za,ja,Za,Qa,qa],S=[]"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "function A(o,i){return o[0]===\"chat\"?0:o[0]===\"training-data\"?1:o[0]===\"no-training-data\"?2:o[0]===\"login\"?3:o[0]===\"functions\"?4:5}return t=A(E),r=S[t]=s[t](E),{c(){e=f(\"main\"),n&&n.c(),T=$(),r.c()},m(o,i){V(o,e,i),n&&n.m(e,null),l(e,T),S[t].m(e,null),R=!0},p(o,[i]){o[0]!==\"login\"?n?i&1&&m(n,1):(n=uR(),n.c(),m(n,1),n.m(e,T)):n&&(Ge(),y(n,1,1,()=>{n=null}),ge())"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "let _=t"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "t=A(o),t!==_&&(Ge(),y(S[_],1,1,()=>{S[_]=null}),ge(),r=S[t],r||(r=S[t]=s[t](o),r.c()),m(r,1),r.m(e,null))},i(o){R||(m(n),m(r),R=!0)},o(o){y(n),y(r),R=!1},d(o){o&&Y(e),n&&n.d(),S[t].d()}}}function TI(E,e,T){let t"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "return eE(E,DE,r=>T(0,t=r)),DR(async()=>{pn(),mR()"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "const R=new URL(window.location.href).hash.slice(1)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "R===\"training-data\"?hR():R===\"functions\"?cT():it()}),[t]}class rI extends ue{constructor(e){super(),Ce(this,e,TI,tI,_e,{})}}new rI({target:document.getElementById(\"app\")})"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "embed-multilingual-v3.0\"\n        \n        if config is not None and \"model\" in config:\n            self.model = config[\"model\"]\n\n        if client is not None:\n            self.client = client\n            return\n\n        # Check for API key in environment variable\n        api_key = os.getenv(\"COHERE_API_KEY\")\n        \n        # Check for API key in config\n        if config is not None and \"api_key\" in config:\n            api_key = config[\"api_key\"]\n            \n        # Validate API key\n        if not api_key:\n            raise ValueError(\"Cohere API key is required. Please provide it via config or set the COHERE_API_KEY environment variable.\")\n            \n        # Initialize client with validated API key\n        self.client = OpenAI(\n            base_url="
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ",\n            api_key=api_key,\n        )\n\n    def generate_embedding(self, data: str, **kwargs) -> list[float]:\n        if not data:\n            raise ValueError(\"Cannot generate embedding for empty input data\")\n            \n        # Use model from kwargs, config, or default\n        model = kwargs.get(\"model\", self.model)\n        if self.config is not None and \"model\" in self.config and model == self.model:\n            model = self.config[\"model\"]\n        \n        try:    \n            embedding = self.client.embeddings.create(\n                model=model,\n                input=data,\n                encoding_format=\"float\",  # Ensure we get float values\n            )\n            \n            # Check if response has expected structure\n            if not embedding or not hasattr(embedding, 'data') or not embedding.data:\n                raise ValueError(\"Received empty or malformed embedding response from API\")\n                \n            if not embedding.data[0] or not hasattr(embedding.data[0], 'embedding'):\n                raise ValueError(\"Embedding response is missing expected 'embedding' field\")\n                \n            if not embedding.data[0].embedding:\n                raise ValueError(\"Received empty embedding vector\")\n                \n            return embedding.data[0].embedding\n            \n        except Exception as e:\n            # Log the error and raise a more informative exception\n            error_msg = f\"Error generating embedding with Cohere: {str(e)}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "command-a-03-2025\"  # Cohere's default model\n\n        if config is not None:\n            if \"temperature\" in config:\n                self.temperature = config[\"temperature\"]\n            if \"model\" in config:\n                self.model = config[\"model\"]\n\n        if client is not None:\n            self.client = client\n            return\n\n        # Check for API key in environment variable\n        api_key = os.getenv(\"COHERE_API_KEY\")\n        \n        # Check for API key in config\n        if config is not None and \"api_key\" in config:\n            api_key = config[\"api_key\"]\n            \n        # Validate API key\n        if not api_key:\n            raise ValueError(\"Cohere API key is required. Please provide it via config or set the COHERE_API_KEY environment variable.\")\n            \n        # Initialize client with validated API key\n        self.client = OpenAI(\n            base_url="
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "api_key\" not in config:\n            raise Exception(\"Missing api_key in config\")\n        self.api_key = config[\"api_key\"]\n        self.model = config[\"model\"] if \"model\" in config else \"glm-4\"\n        self.api_url = \"https://open.bigmodel.cn/api/paas/v4/chat/completions\"\n\n    # Static methods similar to those in ZhipuAI_Chat for message formatting and utility\n    @staticmethod\n    def system_message(message: str) -> dict:\n        return {\"role\": \"system\", \"content\": message}\n\n    @staticmethod\n    def user_message(message: str) -> dict:\n        return {\"role\": \"user\", \"content\": message}\n\n    @staticmethod\n    def assistant_message(message: str) -> dict:\n        return {\"role\": \"assistant\", \"content\": message}\n\n    @staticmethod\n    def str_to_approx_token_count(string: str) -> int:\n        return len(string) / 4\n\n    @staticmethod\n    def add_ddl_to_prompt(\n        initial_prompt: str, ddl_list: List[str], max_tokens: int = 14000\n    ) -> str:\n        if len(ddl_list) > 0:\n            initial_prompt += \"\\nYou may use the following DDL statements as a reference for what tables might be available. Use responses to past questions also to guide you:\\n\\n\"\n\n            for ddl in ddl_list:\n                if (\n                    ZhipuAI_Chat.str_to_approx_token_count(initial_prompt)\n                    + ZhipuAI_Chat.str_to_approx_token_count(ddl)\n                    < max_tokens\n                ):\n                    initial_prompt += f\"{ddl}\\n\\n\"\n\n        return initial_prompt\n\n    @staticmethod\n    def add_documentation_to_prompt(\n        initial_prompt: str, documentation_List: List[str], max_tokens: int = 14000\n    ) -> str:\n        if len(documentation_List) > 0:\n            initial_prompt += \"\\nYou may use the following documentation as a reference for what tables might be available. Use responses to past questions also to guide you:\\n\\n\"\n\n            for documentation in documentation_List:\n                if (\n                    ZhipuAI_Chat.str_to_approx_token_count(initial_prompt)\n                    + ZhipuAI_Chat.str_to_approx_token_count(documentation)\n                    < max_tokens\n                ):\n                    initial_prompt += f\"{documentation}\\n\\n\"\n\n        return initial_prompt\n\n    @staticmethod\n    def add_sql_to_prompt(\n        initial_prompt: str, sql_List: List[str], max_tokens: int = 14000\n    ) -> str:\n        if len(sql_List) > 0:\n            initial_prompt += \"\\nYou may use the following SQL statements as a reference for what tables might be available. Use responses to past questions also to guide you:\\n\\n\"\n\n            for question in sql_List:\n                if (\n                    ZhipuAI_Chat.str_to_approx_token_count(initial_prompt)\n                    + ZhipuAI_Chat.str_to_approx_token_count(question[\"sql\"])\n                    < max_tokens\n                ):\n                    initial_prompt += f\"{question['question']}\\n{question['sql']}\\n\\n\"\n\n        return initial_prompt\n\n    def get_sql_prompt(\n        self,\n        question: str,\n        question_sql_list: List,\n        ddl_list: List,\n        doc_list: List,\n        **kwargs,\n    ):\n        initial_prompt = \"The user provides a question and you provide SQL. You will only respond with SQL code and not with any explanations.\\n\\nRespond with only SQL code. Do not answer with any explanations \n\n\n\nexample is None\")\n            else:\n                if example is not None and \"question\" in example and \"sql\" in example:\n                    message_log.append(ZhipuAI_Chat.user_message(example[\"question\"]))\n                    message_log.append(ZhipuAI_Chat.assistant_message(example[\"sql\"]))\n\n        message_log.append({\"role\": \"user\", \"content\": question})\n\n        return message_log\n\n    def get_followup_questions_prompt(\n        self,\n        question: str,\n        df: pd.DataFrame,\n        question_sql_list: List,\n        ddl_list: List,\n        doc_list: List,\n        **kwargs,\n    ):\n        initial_prompt = f\"The user initially asked the question: '{question}': \\n\\n\"\n\n        initial_prompt = ZhipuAI_Chat.add_ddl_to_prompt(\n            initial_prompt, ddl_list, max_tokens=14000\n        )\n\n        initial_prompt = ZhipuAI_Chat.add_documentation_to_prompt(\n            initial_prompt, doc_list, max_tokens=14000\n        )\n\n        initial_prompt = ZhipuAI_Chat.add_sql_to_prompt(\n            initial_prompt, question_sql_list, max_tokens=14000\n        )\n\n        message_log = [ZhipuAI_Chat.system_message(initial_prompt)]\n        message_log.append(\n            ZhipuAI_Chat.user_message(\n                \"Generate a List of followup questions that the user might ask about this data. Respond with a List of questions, one per line. Do not answer with any explanations \n\n\n\nThe user will give you SQL and you will try to guess what the business question this query is answering. Return just the question without any additional explanation. Do not reference the table name in the question."
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "```[\\w\\s]*python\\n([\\s\\S]*?)```|```([\\s\\S]*?)```\"\n\n        # Find all matches in the markdown string\n        matches = re.findall(pattern, markdown_string, re.IGNORECASE)\n\n        # Extract the Python code from the matches\n        python_code = []\n        for match in matches:\n            python = match[0] if match[0] else match[1]\n            python_code.append(python.strip())\n\n        if len(python_code) == 0:\n            return markdown_string\n\n        return python_code[0]\n\n    def _sanitize_plotly_code(self, raw_plotly_code: str) -> str:\n        # Remove the fig.show() statement from the plotly code\n        plotly_code = raw_plotly_code.replace(\"fig.show()\", \"\")\n\n        return plotly_code\n\n    def generate_plotly_code(\n        self, question: str = None, sql: str = None, df_metadata: str = None, **kwargs\n    ) -> str:\n        if question is not None:\n            system_msg = f\"The following is a pandas DataFrame that contains the results of the query that answers the question the user asked: '{question}'\"\n        else:\n            system_msg = \"The following is a pandas DataFrame \"\n\n        if sql is not None:\n            system_msg += f\"\\n\\nThe DataFrame was produced using this query: {sql}\\n\\n\"\n\n        system_msg += f\"The following is information about the resulting pandas DataFrame 'df': \\n{df_metadata}\"\n\n        message_log = [\n            self.system_message(system_msg),\n            self.user_message(\n                \"Can you generate the Python plotly code to chart the results of the dataframe? Assume the data is in a pandas dataframe called 'df'. If there is only one value in the dataframe, use an Indicator. Respond with only Python code. Do not answer with any explanations \n\n\n\nhttps://ask.vanna.ai/rpc\"\n            if config is None or \"endpoint\" not in config\n            else config[\"endpoint\"]\n        )\n        self.related_training_data = {}\n        self._graphql_endpoint = \"https://functionrag.com/query\"\n        self._graphql_headers = {\n            \"Content-Type\": \"application/json\",\n            \"API-KEY\": self._api_key,\n            \"NAMESPACE\": self._model,\n        }\n\n    def _rpc_call(self, method, params):\n        if method != \"list_orgs\":\n            headers = {\n                \"Content-Type\": \"application/json\",\n                \"Vanna-Key\": self._api_key,\n                \"Vanna-Org\": self._model,\n            }\n        else:\n            headers = {\n                \"Content-Type\": \"application/json\",\n                \"Vanna-Key\": self._api_key,\n                \"Vanna-Org\": \"demo-tpc-h\",\n            }\n\n        data = {\n            \"method\": method,\n            \"params\": [self._dataclass_to_dict(obj) for obj in params],\n        }\n\n        response = requests.post(self._endpoint, headers=headers, data=json.dumps(data))\n        return response.json()\n\n    def _dataclass_to_dict(self, obj):\n        return dataclasses.asdict(obj)\n\n    def get_all_functions(self) -> list:\n        query = \"\"\"\n            {\n                get_all_sql_functions {\n                    function_name\n                    description\n                    post_processing_code_template\n                    arguments {\n                        name\n                        description\n                        general_type\n                        is_user_editable\n                        available_values\n                    }\n                    sql_template\n                }\n            }\n        \"\"\"\n\n        response = requests.post(self._graphql_endpoint, headers=self._graphql_headers, json={'query': query})\n        response_json = response.json()\n        if response.status_code == 200 and 'data' in response_json and 'get_all_sql_functions' in response_json['data']:\n            self.log(response_json['data']['get_all_sql_functions'])\n            resp = response_json['data']['get_all_sql_functions']\n\n            print(resp)\n\n            return resp\n        else:\n            raise Exception(f\"Query failed to run by returning code of {response.status_code}. {response.text}\")\n\n\n    def get_function(self, question: str, additional_data: dict = {}) -> dict:\n        query = \"\"\"\n        query GetFunction($question: String!, $staticFunctionArguments: [StaticFunctionArgument]) {\n            get_and_instantiate_function(question: $question, static_function_arguments: $staticFunctionArguments) {\n                ... on SQLFunction {\n                function_name\n                description\n                post_processing_code_template\n                instantiated_post_processing_code\n                arguments {\n                    name\n                    description\n                    general_type\n                    is_user_editable\n                    instantiated_value\n                    available_values\n                }\n                sql_template\n                instantiated_sql\n            }\n            }\n        }\n        \"\"\"\n        static_function_arguments = [{\"name\": key, \"value\": str(value)} for key, value in additional_data.items()]\n        variables = {\"question\": question, \"staticFunctionArguments\": static_function_arguments}\n        response = requests.post(self._graphql_endpoint, headers=self._graphql_headers, json={'query': query, 'variables': variables})\n        response_json = response.json()\n        if response.status_code == 200 and 'data' in response_json and 'get_and_instantiate_function' in response_json['data']:\n            self.log(response_json['data']['get_and_instantiate_function'])\n            resp = response_json['data']['get_and_instantiate_function']\n\n            print(resp)\n\n            return resp\n        else:\n            raise Exception(f\"Query failed to run by returning code of {response.status_code}. {response.text}\")\n\n    def create_function(self, question: str, sql: str, plotly_code: str, **kwargs) -> dict:\n        query = \"\"\"\n        mutation CreateFunction($question: String!, $sql: String!, $plotly_code: String!) {\n            generate_and_create_sql_function(question: $question, sql: $sql, post_processing_code: $plotly_code) {\n                function_name\n                description\n                arguments {\n                    name\n                    description\n                    general_type\n                    is_user_editable\n                }\n                sql_template\n                post_processing_code_template\n            }\n        }\n        \"\"\"\n        variables = {\"question\": question, \"sql\": sql, \"plotly_code\": plotly_code}\n        response = requests.post(self._graphql_endpoint, headers=self._graphql_headers, json={'query': query, 'variables': variables})\n        response_json = response.json()\n        if response.status_code == 200 and 'data' in response_json and response_json['data'] is not None and 'generate_and_create_sql_function' in response_json['data']:\n            resp = response_json['data']['generate_and_create_sql_function']\n\n            print(resp)\n\n            return resp\n        else:\n            raise Exception(f\"Query failed to run by returning code of {response.status_code}. {response.text}\")\n\n    def update_function(self, old_function_name: str, updated_function: dict) -> bool:"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "\"\n        Update an existing SQL function based on the provided parameters.\n\n        Args:\n            old_function_name (str): The current name of the function to be updated.\n            updated_function (dict): A dictionary containing the updated function details. Expected keys:\n                - 'function_name': The new name of the function.\n                - 'description': The new description of the function.\n                - 'arguments': A list of dictionaries describing the function arguments.\n                - 'sql_template': The new SQL template for the function.\n                - 'post_processing_code_template': The new post-processing code template.\n\n        Returns:\n            bool: True if the function was successfully updated, False otherwise."
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "\"\n        mutation = \"\"\"\n        mutation UpdateSQLFunction($input: SQLFunctionUpdate!) {\n            update_sql_function(input: $input)\n        }"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "\"\n\n        SQLFunctionUpdate = {\n            'function_name', 'description', 'arguments', 'sql_template', 'post_processing_code_template'\n        }\n\n        # Define the expected keys for each argument in the arguments list\n        ArgumentKeys = {'name', 'general_type', 'description', 'is_user_editable', 'available_values'}\n\n        # Function to validate and transform arguments\n        def validate_arguments(args):\n            return [\n                {key: arg[key] for key in arg if key in ArgumentKeys}\n                for arg in args\n            ]\n\n        # Keep only the keys that conform to the SQLFunctionUpdate GraphQL input type\n        updated_function = {key: value for key, value in updated_function.items() if key in SQLFunctionUpdate}\n\n        # Special handling for 'arguments' to ensure they conform to the spec\n        if 'arguments' in updated_function:\n            updated_function['arguments'] = validate_arguments(updated_function['arguments'])\n\n        variables = {"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ": {\n                \"old_function_name\": old_function_name,\n                **updated_function\n            }\n        }\n\n        print("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ", variables)\n\n        response = requests.post(self._graphql_endpoint, headers=self._graphql_headers, json={'query': mutation, 'variables': variables})\n        response_json = response.json()\n        if response.status_code == 200 and 'data' in response_json and response_json['data'] is not None and 'update_sql_function' in response_json['data']:\n            return response_json['data']['update_sql_function']\n        else:\n            raise Exception(f"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ")\n\n    def delete_function(self, function_name: str) -> bool:\n        mutation ="
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "\"\n        mutation DeleteSQLFunction($function_name: String!) {\n            delete_sql_function(function_name: $function_name)\n        }"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "\"\n        variables = {\"function_name\": function_name}\n        response = requests.post(self._graphql_endpoint, headers=self._graphql_headers, json={'query': mutation, 'variables': variables})\n        response_json = response.json()\n        if response.status_code == 200 and 'data' in response_json and response_json['data'] is not None and 'delete_sql_function' in response_json['data']:\n            return response_json['data']['delete_sql_function']\n        else:\n            raise Exception(f"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ")\n\n    def create_model(self, model: str, **kwargs) -> bool:\n        \"\"\"\n        **Example:**\n        ```python\n        success = vn.create_model(\"my_model\")\n        ```\n        Create a new model.\n\n        Args:\n            model (str): The name of the model to create.\n\n        Returns:\n            bool: True if the model was created, False otherwise.\n        \"\"\"\n        model = sanitize_model_name(model)\n        params = [NewOrganization(org_name=model, db_type=\"\")]\n\n        d = self._rpc_call(method=\"create_org\", params=params)\n\n        if \"result\" not in d:\n            return False\n\n        status = Status(**d[\"result\"])\n\n        return status.success\n\n    def get_models(self) -> list:\n        \"\"\"\n        **Example:**\n        ```python\n        models = vn.get_models()\n        ```\n\n        List the models that belong to the user.\n\n        Returns:\n            List[str]: A list of model names.\n        \"\"\"\n        d = self._rpc_call(method=\"list_my_models\", params=[])\n\n        if \"result\" not in d:\n            return []\n\n        orgs = OrganizationList(**d[\"result\"])\n\n        return orgs.organizations\n\n    def generate_embedding(self, data: str, **kwargs) -> list[float]:\n        # This is done server-side\n        pass\n\n    def add_question_sql(self, question: str, sql: str, **kwargs) -> str:\n        if \"tag\" in kwargs:\n            tag = kwargs[\"tag\"]\n        else:\n            tag = \"Manually Trained\"\n\n        params = [QuestionSQLPair(question=question, sql=sql, tag=tag)]\n\n        d = self._rpc_call(method=\"add_sql\", params=params)\n\n        if \"result\" not in d:\n            raise Exception(\"Error adding question and SQL pair\", d)\n\n        status = StatusWithId(**d["
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "])\n\n        return status.id\n\n    def add_ddl(self, ddl: str, **kwargs) -> str:\n        params = [StringData(data=ddl)]\n\n        d = self._rpc_call(method=\"add_ddl\", params=params)\n\n        if \"result\" not in d:\n            raise Exception(\"Error adding DDL\", d)\n\n        status = StatusWithId(**d["
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "])\n\n        return status.id\n\n    def add_documentation(self, documentation: str, **kwargs) -> str:\n        params = [StringData(data=documentation)]\n\n        d = self._rpc_call(method=\"add_documentation\", params=params)\n\n        if \"result\" not in d:\n            raise Exception(\"Error adding documentation\", d)\n\n        status = StatusWithId(**d["
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "No SQL Generated\"\n    SQL_UNABLE_TO_RUN = \"SQL Unable to Run\"\n    BOOTSTRAP_TRAINING_QUERY = \"Bootstrap Training Query\"\n    SQL_RAN = \"SQL Ran Successfully\"\n    FLAGGED_FOR_REVIEW = \"Flagged for Review\"\n    REVIEWED_AND_APPROVED = \"Reviewed and Approved\"\n    REVIEWED_AND_REJECTED = \"Reviewed and Rejected\"\n    REVIEWED_AND_UPDATED ="
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "path\", \".\")\n        self.embedding_function = config.get(\"embedding_function\", default_ef)\n        curr_client = config.get(\"client\", \"persistent\")\n        collection_metadata = config.get(\"collection_metadata\", None)\n        self.n_results_sql = config.get(\"n_results_sql\", config.get(\"n_results\", 10))\n        self.n_results_documentation = config.get(\"n_results_documentation\", config.get(\"n_results\", 10))\n        self.n_results_ddl = config.get(\"n_results_ddl\", config.get(\"n_results\", 10))\n\n        if curr_client == \"persistent\":\n            self.chroma_client = chromadb.PersistentClient(\n                path=path, settings=Settings(anonymized_telemetry=False)\n            )\n        elif curr_client == \"in-memory\":\n            self.chroma_client = chromadb.EphemeralClient(\n                settings=Settings(anonymized_telemetry=False)\n            )\n        elif isinstance(curr_client, chromadb.api.client.Client):\n            # allow providing client directly\n            self.chroma_client = curr_client\n        else:\n            raise ValueError(f\"Unsupported client was set in config: {curr_client}\")\n\n        self.documentation_collection = self.chroma_client.get_or_create_collection(\n            name=\"documentation\",\n            embedding_function=self.embedding_function,\n            metadata=collection_metadata,\n        )\n        self.ddl_collection = self.chroma_client.get_or_create_collection(\n            name=\"ddl\",\n            embedding_function=self.embedding_function,\n            metadata=collection_metadata,\n        )\n        self.sql_collection = self.chroma_client.get_or_create_collection(\n            name=\"sql\",\n            embedding_function=self.embedding_function,\n            metadata=collection_metadata,\n        )\n\n    def generate_embedding(self, data: str, **kwargs) -> List[float]:\n        embedding = self.embedding_function([data])\n        if len(embedding) == 1:\n            return embedding[0]\n        return embedding\n\n    def add_question_sql(self, question: str, sql: str, **kwargs) -> str:\n        question_sql_json = json.dumps(\n            {\n                \"question\": question,\n                \"sql\": sql,\n            },\n            ensure_ascii=False,\n        )\n        id = deterministic_uuid(question_sql_json) + \"-sql\"\n        self.sql_collection.add(\n            documents=question_sql_json,\n            embeddings=self.generate_embedding(question_sql_json),\n            ids=id,\n        )\n\n        return id\n\n    def add_ddl(self, ddl: str, **kwargs) -> str:\n        id = deterministic_uuid(ddl) + \"-ddl\"\n        self.ddl_collection.add(\n            documents=ddl,\n            embeddings=self.generate_embedding(ddl),\n            ids=id,\n        )\n        return id\n\n    def add_documentation(self, documentation: str, **kwargs) -> str:\n        id = deterministic_uuid(documentation) + \"-doc\"\n        self.documentation_collection.add(\n            documents=documentation,\n            embeddings=self.generate_embedding(documentation),\n            ids=id,\n        )\n        return id\n\n    def get_training_data(self, **kwargs) -> pd.DataFrame:\n        sql_data = self.sql_collection.get()\n\n        df = pd.DataFrame()\n\n        if sql_data is not None:\n            # Extract the documents and ids\n            documents = [json.loads(doc) for doc in sql_data[\"documents\"]]\n            ids = sql_data[\"ids\"]\n\n            # Create a DataFrame\n            df_sql = pd.DataFrame(\n                {\n                    \"id\": ids,\n                    \"question\": [doc[\"question\"] for doc in documents],\n                    \"content\": [doc[\"sql\"] for doc in documents],\n                }\n            )\n\n            df_sql[\"training_data_type\"] = \"sql\"\n\n            df = pd.concat([df, df_sql])\n\n        ddl_data = self.ddl_collection.get()\n\n        if ddl_data is not None:\n            # Extract the documents and ids\n            documents = [doc for doc in ddl_data[\"documents\"]]\n            ids = ddl_data[\"ids\"]\n\n            # Create a DataFrame\n            df_ddl = pd.DataFrame(\n                {\n                    \"id\": ids,\n                    \"question\": [None for doc in documents],\n                    \"content\": [doc for doc in documents],\n                }\n            )\n\n            df_ddl[\"training_data_type\"] = \"ddl\"\n\n            df = pd.concat([df, df_ddl])\n\n        doc_data = self.documentation_collection.get()\n\n        if doc_data is not None:\n            # Extract the documents and ids\n            documents = [doc for doc in doc_data[\"documents\"]]\n            ids = doc_data[\"ids\"]\n\n            # Create a DataFrame\n            df_doc = pd.DataFrame(\n                {\n                    \"id\": ids,\n                    \"question\": [None for doc in documents],\n                    \"content\": [doc for doc in documents],\n                }\n            )\n\n            df_doc[\"training_data_type\"] = \"documentation\"\n\n            df = pd.concat([df, df_doc])\n\n        return df\n\n    def remove_training_data(self, id: str, **kwargs) -> bool:\n        if id.endswith("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "):\n            self.sql_collection.delete(ids=id)\n            return True\n        elif id.endswith("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "):\n            self.ddl_collection.delete(ids=id)\n            return True\n        elif id.endswith("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "):\n            self.documentation_collection.delete(ids=id)\n            return True\n        else:\n            return False\n\n    def remove_collection(self, collection_name: str) -> bool:"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "\"\n        This function can reset the collection to empty state.\n\n        Args:\n            collection_name (str): sql or ddl or documentation\n\n        Returns:\n            bool: True if collection is deleted, False otherwise"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "\"\n        if collection_name == \"sql\":\n            self.chroma_client.delete_collection(name="
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ")\n            self.sql_collection = self.chroma_client.get_or_create_collection(\n                name=\"sql\", embedding_function=self.embedding_function\n            )\n            return True\n        elif collection_name == \"ddl\":\n            self.chroma_client.delete_collection(name="
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ")\n            self.ddl_collection = self.chroma_client.get_or_create_collection(\n                name=\"ddl\", embedding_function=self.embedding_function\n            )\n            return True\n        elif collection_name == \"documentation\":\n            self.chroma_client.delete_collection(name="
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "api_key\" not in config:\n      raise Exception(\"Missing api_key in config\")\n    self.api_key = config[\"api_key\"]\n\n    if \"secret_key\" not in config:\n      raise Exception(\"Missing secret_key in config\")\n    self.secret_key = config[\"secret_key\"]\n\n    # default parameters - can be overrided using config\n    self.temperature = 0.9\n    self.max_tokens = 1024\n\n    if \"temperature\" in config:\n      self.temperature = config[\"temperature\"]\n\n    if \"max_tokens\" in config:\n      self.max_tokens = config[\"max_tokens\"]\n\n    self.model = config[\"model\"] if \"model\" in config else \"ERNIE-Speed\"\n\n    if client is not None:\n      self.client = client\n      return\n\n    self.client = qianfan.ChatCompletion(ak=self.api_key,\n                                         sk=self.secret_key)\n\n  def system_message(self, message: str) -> any:\n    return {\"role\": \"system\", \"content\": message}\n\n  def user_message(self, message: str) -> any:\n    return {\"role\": \"user\", \"content\": message}\n\n  def assistant_message(self, message: str) -> any:\n    return {\"role\": \"assistant\", \"content\": message}\n\n  def get_sql_prompt(\n    self,\n    initial_prompt: str,\n    question: str,\n    question_sql_list: list,\n    ddl_list: list,\n    doc_list: list,\n    **kwargs,\n  ):\n    \"\"\"\n    Example:\n    ```python\n    vn.get_sql_prompt(\n        question=\"What are the top 10 customers by sales?\",\n        question_sql_list=[{\"question\": \"What are the top 10 customers by sales?\", \"sql\": \"SELECT * FROM customers ORDER BY sales DESC LIMIT 10"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "\"\"\n    AzureAISearch_VectorStore is a class that provides a vector store for Azure AI Search.\n\n    Args:\n        config (dict): Configuration dictionary. Defaults to {}. You must provide an API key in the config.\n            - azure_search_endpoint (str, optional): Azure Search endpoint. Defaults to \"https://azcognetive.search.windows.net\".\n            - azure_search_api_key (str): Azure Search API key.\n            - dimensions (int, optional): Dimensions of the embeddings. Defaults to 384 which corresponds to the dimensions of BAAI/bge-small-en-v1.5.\n            - fastembed_model (str, optional): Fastembed model to use. Defaults to \"BAAI/bge-small-en-v1.5\".\n            - index_name (str, optional): Name of the index. Defaults to \"vanna-index\".\n            - n_results (int, optional): Number of results to return. Defaults to 10.\n            - n_results_ddl (int, optional): Number of results to return for DDL queries. Defaults to the value of n_results.\n            - n_results_sql (int, optional): Number of results to return for SQL queries. Defaults to the value of n_results.\n            - n_results_documentation (int, optional): Number of results to return for documentation queries. Defaults to the value of n_results.\n\n    Raises:\n        ValueError: If config is None, or if 'azure_search_api_key' is not provided in the config.\n    \"\"\"\n    def __init__(self, config=None):\n        VannaBase.__init__(self, config=config)\n\n        self.config = config or None\n\n        if config is None:\n            raise ValueError(\n                \"config is required, pass an API key, 'azure_search_api_key', in the config.\"\n            )\n\n        azure_search_endpoint = config.get(\"azure_search_endpoint\", \"https://azcognetive.search.windows.net\")\n        azure_search_api_key = config.get(\"azure_search_api_key\")\n\n        self.dimensions = config.get(\"dimensions\", 384)\n        self.fastembed_model = config.get(\"fastembed_model\", \"BAAI/bge-small-en-v1.5\")\n\n        self.index_name = config.get(\"index_name\", \"vanna-index\")\n\n        self.n_results_ddl = config.get(\"n_results_ddl\", config.get(\"n_results\", 10))\n        self.n_results_sql = config.get(\"n_results_sql\", config.get(\"n_results\", 10))\n        self.n_results_documentation = config.get(\"n_results_documentation\", config.get(\"n_results\", 10))\n\n        if not azure_search_api_key:\n            raise ValueError(\n                \"'azure_search_api_key' is required in config to use AzureAISearch_VectorStore\"\n        )\n\n        self.index_client = SearchIndexClient(\n            endpoint=azure_search_endpoint,\n            credential=AzureKeyCredential(azure_search_api_key)\n        )\n\n        self.search_client = SearchClient(\n            endpoint=azure_search_endpoint,\n            index_name=self.index_name,\n            credential=AzureKeyCredential(azure_search_api_key)\n        )\n\n        if self.index_name not in self._get_indexes():\n            self._create_index()\n\n    def _create_index(self) -> bool:\n        fields = [\n            SearchableField(name=\"id\", type=SearchFieldDataType.String, key=True, filterable=True),\n            SearchableField(name=\"document\", type=SearchFieldDataType.String, searchable=True, filterable=True),\n            SearchField(name=\"type\", type=SearchFieldDataType.String, filterable=True, searchable=True),\n            SearchField(name=\"document_vector\", type=SearchFieldDataType.Collection(SearchFieldDataType.Single), searchable=True, vector_search_dimensions=self.dimensions, vector_search_profile_name=\"ExhaustiveKnnProfile\"),\n        ]\n\n        vector_search = VectorSearch(\n            algorithms=[\n                ExhaustiveKnnAlgorithmConfiguration(\n                    name=\"ExhaustiveKnn\",\n                    kind=VectorSearchAlgorithmKind.EXHAUSTIVE_KNN,\n                    parameters=ExhaustiveKnnParameters(\n                        metric=VectorSearchAlgorithmMetric.COSINE\n                    )\n                )\n            ],\n            profiles=[\n                VectorSearchProfile(\n                    name=\"ExhaustiveKnnProfile\",\n                    algorithm_configuration_name=\"ExhaustiveKnn\",\n                )\n            ]\n        )\n\n        index = SearchIndex(name=self.index_name, fields=fields, vector_search=vector_search)\n        result = self.index_client.create_or_update_index(index)\n        print(f'{result.name} created')\n\n    def _get_indexes(self) -> list:\n        return [index for index in self.index_client.list_index_names()]\n\n    def add_ddl(self, ddl: str) -> str:\n        id = deterministic_uuid(ddl) +"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "document = {\n            \"id\": id,\n            \"document\": ddl,\n            \"type\": \"ddl\",\n            \"document_vector\": self.generate_embedding(ddl)\n        }\n        self.search_client.upload_documents(documents=[document])\n        return id\n\n    def add_documentation(self, doc: str) -> str:\n        id = deterministic_uuid(doc) + \"-doc\"\n        document = {\n            \"id\": id,\n            \"document\": doc,\n            \"type\": \"doc\",\n            \"document_vector\": self.generate_embedding(doc)\n        }\n        self.search_client.upload_documents(documents=[document])\n        return id\n\n    def add_question_sql(self, question: str, sql: str) -> str:\n        question_sql_json = json.dumps({\"question\": question, \"sql\": sql}, ensure_ascii=False)\n        id = deterministic_uuid(question_sql_json) + \"-sql\"\n        document = {\n            \"id\": id,\n            \"document\": question_sql_json,\n            \"type\": \"sql\",\n            \"document_vector\": self.generate_embedding(question_sql_json)\n        }\n        self.search_client.upload_documents(documents=[document])\n        return id\n\n    def get_related_ddl(self, text: str) -> List[str]:\n        result = []\n        vector_query = VectorizedQuery(vector=self.generate_embedding(text), fields=\"document_vector\")\n        df = pd.DataFrame(\n            self.search_client.search(\n                top=self.n_results_ddl,\n                vector_queries=[vector_query],\n                select=["
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ", \"document\", \"type\"],\n                filter=f\"type eq 'ddl'\"\n            )\n        )\n\n        if len(df):\n            result = df[\"document\"].tolist()\n        return result\n\n    def get_related_documentation(self, text: str) -> List[str]:\n        result = []\n        vector_query = VectorizedQuery(vector=self.generate_embedding(text), fields=\"document_vector\")\n\n        df = pd.DataFrame(\n            self.search_client.search(\n                top=self.n_results_documentation,\n                vector_queries=[vector_query],\n                select=["
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ", \"document\", \"type\"],\n                filter=f\"type eq 'doc'\",\n                vector_filter_mode=VectorFilterMode.PRE_FILTER\n            )\n        )\n\n        if len(df):\n            result = df[\"document\"].tolist()\n        return result\n\n    def get_similar_question_sql(self, question: str) -> List[str]:\n        result = []\n        # Vectorize the text\n        vector_query = VectorizedQuery(vector=self.generate_embedding(question), fields=\"document_vector\")\n        df = pd.DataFrame(\n            self.search_client.search(\n                top=self.n_results_sql,\n                vector_queries=[vector_query],\n                select=["
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ", \"document\", \"type\"],\n                filter=f\"type eq 'sql'\"\n            )\n        )\n\n        if len(df): # Check if there is similar query and the result is not empty\n            result = [ast.literal_eval(element) for element in df[\"document\"].tolist()]\n\n        return result\n\n    def get_training_data(self) -> List[str]:\n\n        search = self.search_client.search(\n            search_text=\"*\",\n            select=['id', 'document', 'type'],\n            filter=f"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "sql') or (type eq 'ddl') or (type eq 'doc')\"\n        ).by_page()\n\n        df = pd.DataFrame([item for page in search for item in page])\n\n        if len(df):\n            df.loc[df[\"type\"] == \"sql\", \"question\"] = df.loc[df[\"type\"] == \"sql\"][\"document\"].apply(lambda x: json.loads(x)[\"question\"])\n            df.loc[df[\"type\"] == \"sql\", \"content\"]  = df.loc[df[\"type\"] == \"sql\"][\"document\"].apply(lambda x: json.loads(x)[\"sql\"])\n            df.loc[df[\"type\"] != \"sql\", \"content\"]  = df.loc[df[\"type\"] != \"sql\"][\"document\"]\n\n            return df[[\"id\", \"question\", \"content\", \"type\"]]\n\n        return pd.DataFrame()\n\n    def remove_training_data(self, id: str) -> bool:\n        result = self.search_client.delete_documents(documents=[{"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "vanna_document_index\"\n    ddl_index = \"vanna_ddl_index\"\n    question_sql_index = \"vanna_questions_sql_index\"\n    if config is not None and \"es_document_index\" in config:\n      document_index = config[\"es_document_index\"]\n    if config is not None and \"es_ddl_index\" in config:\n      ddl_index = config[\"es_ddl_index\"]\n    if config is not None and \"es_question_sql_index\" in config:\n      question_sql_index = config[\"es_question_sql_index\"]\n\n    self.document_index = document_index\n    self.ddl_index = ddl_index\n    self.question_sql_index = question_sql_index\n    print(\"OpenSearch_VectorStore initialized with document_index:"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "ddl_index: \", ddl_index, \" question_sql_index: \",\n          question_sql_index)\n\n    document_index_settings = {\n      \"settings\": {\n        \"index\": {\n          \"number_of_shards\": 6,\n          \"number_of_replicas\": 2\n        }\n      },\n      \"mappings\": {\n        \"properties\": {\n          \"question\": {\n            \"type\": \"text\",\n          },\n          \"doc\": {\n            \"type\": \"text\",\n          }\n        }\n      }\n    }\n\n    ddl_index_settings = {\n      \"settings\": {\n        \"index\": {\n          \"number_of_shards\": 6,\n          \"number_of_replicas\": 2\n        }\n      },\n      \"mappings\": {\n        \"properties\": {\n          \"ddl\": {\n            \"type\": \"text\",\n          },\n          \"doc\": {\n            \"type\": \"text\",\n          }\n        }\n      }\n    }\n\n    question_sql_index_settings = {\n      \"settings\": {\n        \"index\": {\n          \"number_of_shards\": 6,\n          \"number_of_replicas\": 2\n        }\n      },\n      \"mappings\": {\n        \"properties\": {\n          \"question\": {\n            \"type\": \"text\",\n          },\n          \"sql\": {\n            \"type\": \"text\",\n          }\n        }\n      }\n    }\n\n    if config is not None and \"es_document_index_settings\" in config:\n      document_index_settings = config[\"es_document_index_settings\"]\n    if config is not None and \"es_ddl_index_settings\" in config:\n      ddl_index_settings = config[\"es_ddl_index_settings\"]\n    if config is not None and \"es_question_sql_index_settings\" in config:\n      question_sql_index_settings = config[\"es_question_sql_index_settings\"]\n\n    self.document_index_settings = document_index_settings\n    self.ddl_index_settings = ddl_index_settings\n    self.question_sql_index_settings = question_sql_index_settings\n\n    es_urls = None\n    if config is not None and \"es_urls\" in config:\n      es_urls = config[\"es_urls\"]\n\n    # Host and port\n    if config is not None and \"es_host\" in config:\n      host = config[\"es_host\"]\n    else:\n      host = \"localhost\"\n\n    if config is not None and \"es_port\" in config:\n      port = config[\"es_port\"]\n    else:\n      port = 9200\n\n    if config is not None and \"es_ssl\" in config:\n      ssl = config[\"es_ssl\"]\n    else:\n      ssl = False\n\n    if config is not None and \"es_verify_certs\" in config:\n      verify_certs = config[\"es_verify_certs\"]\n    else:\n      verify_certs = False\n\n    # Authentication\n    if config is not None and \"es_user\" in config:\n      auth = (config[\"es_user\"], config[\"es_password\"])\n    else:\n      # Default to admin:admin\n      auth = None\n\n    headers = None\n    # base64 authentication\n    if config is not None and \"es_encoded_base64\" in config and \"es_user\" in config and \"es_password\" in config:\n      if config[\"es_encoded_base64\"]:\n        encoded_credentials = base64.b64encode(\n          (config[\"es_user\"] + \":\" + config[\"es_password\"]).encode(\"utf-8\")\n        ).decode(\"utf-8\")\n        headers = {\n          'Authorization': 'Basic ' + encoded_credentials\n        }\n        # remove auth from config\n        auth = None\n\n    # custom headers\n    if config is not None and \"es_headers\" in config:\n      headers = config[\"es_headers\"]\n\n    if config is not None and \"es_timeout\" in config:\n      timeout = config[\"es_timeout\"]\n    else:\n      timeout = 60\n\n    if config is not None and \"es_max_retries\" in config:\n      max_retries = config[\"es_max_retries\"]\n    else:\n      max_retries = 10\n\n    if config is not None and \"es_http_compress\" in config:\n      es_http_compress = config[\"es_http_compress\"]\n    else:\n      es_http_compress = False\n\n    print(\"OpenSearch_VectorStore initialized with es_urls:"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "host: \", host, \" port: \", port, \" ssl: \", ssl, \" verify_certs: \",\n          verify_certs, \" timeout: \", timeout, \" max_retries: \", max_retries)\n    if es_urls is not None:\n      # Initialize the OpenSearch client by passing a list of URLs\n      self.client = OpenSearch(\n        hosts=[es_urls],\n        http_compress=es_http_compress,\n        use_ssl=ssl,\n        verify_certs=verify_certs,\n        timeout=timeout,\n        max_retries=max_retries,\n        retry_on_timeout=True,\n        http_auth=auth,\n        headers=headers\n      )\n    else:\n      # Initialize the OpenSearch client by passing a host and port\n      self.client = OpenSearch(\n        hosts=[{'host': host, 'port': port}],\n        http_compress=es_http_compress,\n        use_ssl=ssl,\n        verify_certs=verify_certs,\n        timeout=timeout,\n        max_retries=max_retries,\n        retry_on_timeout=True,\n        http_auth=auth,\n        headers=headers\n      )\n\n      print(\"OpenSearch_VectorStore initialized with client over"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "Connected to OpenSearch cluster:')\n      info = self.client.info()\n      print('OpenSearch cluster info:', info)\n    except Exception as e:\n      print('Error connecting to OpenSearch cluster:', e)\n\n    # Create the indices if they don't exist\n    self.create_index_if_not_exists(self.document_index,\n                                    self.document_index_settings)\n    self.create_index_if_not_exists(self.ddl_index, self.ddl_index_settings)\n    self.create_index_if_not_exists(self.question_sql_index,\n                                    self.question_sql_index_settings)\n\n  def create_index(self):\n    for index in [self.document_index, self.ddl_index,\n                  self.question_sql_index]:\n      try:\n        self.client.indices.create(index)\n      except Exception as e:\n        print(\"Error creating index: \", e)\n        print(f\"opensearch index {index} already exists\")\n        pass\n\n  def create_index_if_not_exists(self, index_name: str,\n                                 index_settings: dict) -> bool:\n    try:\n      if not self.client.indices.exists(index_name):\n        print(f\"Index {index_name} does not exist. Creating...\")\n        self.client.indices.create(index=index_name, body=index_settings)\n        return True\n      else:\n        print(f\"Index {index_name} already exists.\")\n        return False\n    except Exception as e:\n      print(f\"Error creating index: {index_name} \", e)\n      return False\n\n  def add_ddl(self, ddl: str, **kwargs) -> str:\n    # Assuming that you have a DDL index in your OpenSearch\n    id = str(uuid.uuid4()) + \"-ddl\"\n    ddl_dict = {\n      \"ddl\": ddl\n    }\n    response = self.client.index(index=self.ddl_index, body=ddl_dict, id=id,\n                                 **kwargs)\n    return response['_id']\n\n  def add_documentation(self, doc: str, **kwargs) -> str:\n    # Assuming you have a documentation index in your OpenSearch\n    id = str(uuid.uuid4()) + \"-doc\"\n    doc_dict = {\n      \"doc\": doc\n    }\n    response = self.client.index(index=self.document_index, id=id,\n                                 body=doc_dict, **kwargs)\n    return response['_id']\n\n  def add_question_sql(self, question: str, sql: str, **kwargs) -> str:\n    # Assuming you have a Questions and SQL index in your OpenSearch\n    id = str(uuid.uuid4()) + \"-sql\"\n    question_sql_dict = {\n      \"question\": question,\n      \"sql\": sql\n    }\n    response = self.client.index(index=self.question_sql_index,\n                                 body=question_sql_dict, id=id,\n                                 **kwargs)\n    return response['_id']\n\n  def get_related_ddl(self, question: str, **kwargs) -> List[str]:\n    # Assume you have some vector search mechanism associated with your data\n    query = {\n      \"query\": {\n        \"match\": {\n          \"ddl\": question\n        }\n      }\n    }\n    print(query)\n    response = self.client.search(index=self.ddl_index, body=query,\n                                  **kwargs)\n    return [hit["
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "]['ddl'] for hit in response['hits']['hits']]\n\n  def get_related_documentation(self, question: str, **kwargs) -> List[str]:\n    query = {\n      \"query\": {\n        \"match\": {\n          \"doc\": question\n        }\n      }\n    }\n    print(query)\n    response = self.client.search(index=self.document_index,\n                                  body=query,\n                                  **kwargs)\n    return [hit['_source']['doc'] for hit in response['hits']['hits']]\n\n  def get_similar_question_sql(self, question: str, **kwargs) -> List[str]:\n    query = {\n      \"query\": {\n        \"match\": {\n          \"question\": question\n        }\n      }\n    }\n    print(query)\n    response = self.client.search(index=self.question_sql_index,\n                                  body=query,\n                                  **kwargs)\n    return [(hit['_source']['question'], hit['_source']['sql']) for hit in\n            response['hits']['hits']]\n\n  def get_training_data(self, **kwargs) -> pd.DataFrame:\n    # This will be a simple example pulling all data from an index\n    # WARNING: Do not use this approach in production for large indices!\n    data = []\n    response = self.client.search(\n      index=self.document_index,\n      body={\"query\": {\"match_all\": {}}},\n      size=1000\n    )\n    print(query)\n    # records = [hit['_source'] for hit in response['hits']['hits']]\n    for hit in response['hits']['hits']:\n      data.append(\n        {\n          \"id\": hit[\"_id\"],\n          \"training_data_type\": \"documentation\",\n          \"question\": \"\",\n          \"content\": hit[\"_source\"]['doc'],\n        }\n      )\n\n    response = self.client.search(\n      index=self.question_sql_index,\n      body={\"query\": {\"match_all\": {}}},\n      size=1000\n    )\n    # records = [hit['_source'] for hit in response['hits']['hits']]\n    for hit in response['hits']['hits']:\n      data.append(\n        {\n          \"id\": hit[\"_id\"],\n          \"training_data_type\": \"sql\",\n          \"question\": hit.get(\"_source\", {}).get(\"question\", \"\"),\n          \"content\": hit.get(\"_source\", {}).get(\"sql\", \"\"),\n        }\n      )\n\n    response = self.client.search(\n      index=self.ddl_index,\n      body={\"query\": {\"match_all\": {}}},\n      size=1000\n    )\n    # records = [hit['_source'] for hit in response['hits']['hits']]\n    for hit in response['hits']['hits']:\n      data.append(\n        {\n          \"id\": hit[\"_id\"],\n          \"training_data_type\": \"ddl\",\n          \"question\": \"\",\n          \"content\": hit[\"_source\"]['ddl'],\n        }\n      )\n\n    return pd.DataFrame(data)\n\n  def remove_training_data(self, id: str, **kwargs) -> bool:\n    try:\n      if id.endswith(\"-sql\"):\n        self.client.delete(index=self.question_sql_index, id=id)\n        return True\n      elif id.endswith(\"-ddl\"):\n        self.client.delete(index=self.ddl_index, id=id, **kwargs)\n        return True\n      elif id.endswith(\"-doc\"):\n        self.client.delete(index=self.document_index, id=id, **kwargs)\n        return True\n      else:\n        return False\n    except Exception as e:\n      print(\"Error deleting training dataError deleting training data: \", e)\n      return False\n\n  def generate_embedding(self, data: str, **kwargs) -> list[float]:\n    # opensearch doesn"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "embedding_function\" in config:\n      self.embedding_function = config.get(\"embedding_function\")\n    else:\n      from langchain_huggingface import HuggingFaceEmbeddings\n      self.embedding_function = HuggingFaceEmbeddings(model_name=\"all-MiniLM-L6-v2\")\n\n    self.n_results_sql = config.get(\"n_results_sql\", config.get(\"n_results\", 10))\n    self.n_results_documentation = config.get(\"n_results_documentation\", config.get(\"n_results\", 10))\n    self.n_results_ddl = config.get(\"n_results_ddl\", config.get(\"n_results\", 10))\n\n    self.document_index = config.get(\"es_document_index\", \"vanna_document_index\")\n    self.ddl_index = config.get(\"es_ddl_index\", \"vanna_ddl_index\")\n    self.question_sql_index = config.get(\"es_question_sql_index\", \"vanna_questions_sql_index\")\n\n    self.log(f\"OpenSearch_Semantic_VectorStore initialized with document_index: {self.document_index}, ddl_index: {self.ddl_index}, question_sql_index: {self.question_sql_index}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "es_urls\", \"https://localhost:9200\")\n    ssl = config.get(\"es_ssl\", True)\n    verify_certs = config.get(\"es_verify_certs\", True)\n\n    if \"es_user\" in config:\n      auth = (config[\"es_user\"], config[\"es_password\"])\n    else:\n      auth = None\n\n    headers = config.get(\"es_headers\", None)\n    timeout = config.get(\"es_timeout\", 60)\n    max_retries = config.get(\"es_max_retries\", 10)\n\n    common_args = {\n        \"opensearch_url\": es_urls,\n        \"embedding_function\": self.embedding_function,\n        \"engine\": \"faiss\",\n        \"http_auth\": auth,\n        \"use_ssl\": ssl,\n        \"verify_certs\": verify_certs,\n        \"timeout\": timeout,\n        \"max_retries\": max_retries,\n        \"retry_on_timeout\": True,\n        \"headers\": headers,\n    }\n\n    self.documentation_store = OpenSearchVectorSearch(index_name=self.document_index, **common_args)\n    self.ddl_store = OpenSearchVectorSearch(index_name=self.ddl_index, **common_args)\n    self.sql_store = OpenSearchVectorSearch(index_name=self.question_sql_index, **common_args)\n\n  def add_ddl(self, ddl: str, **kwargs) -> str:\n    _id = deterministic_uuid(ddl) + \"-ddl\"\n    self.ddl_store.add_texts(texts=[ddl], ids=[_id], **kwargs)\n    return _id\n\n  def add_documentation(self, documentation: str, **kwargs) -> str:\n    _id = deterministic_uuid(documentation) + \"-doc\"\n    self.documentation_store.add_texts(texts=[documentation], ids=[_id], **kwargs)\n    return _id\n\n  def add_question_sql(self, question: str, sql: str, **kwargs) -> str:\n    question_sql_json = json.dumps(\n      {\n        \"question\": question,\n        \"sql\": sql,\n      },\n      ensure_ascii=False,\n    )\n\n    _id = deterministic_uuid(question_sql_json) + \"-sql\"\n    self.sql_store.add_texts(texts=[question_sql_json], ids=[_id], **kwargs)\n    return _id\n\n  def get_related_ddl(self, question: str, **kwargs) -> list:\n    documents = self.ddl_store.similarity_search(query=question, k=self.n_results_ddl)\n    return [document.page_content for document in documents]\n\n  def get_related_documentation(self, question: str, **kwargs) -> list:\n    documents = self.documentation_store.similarity_search(query=question, k=self.n_results_documentation)\n    return [document.page_content for document in documents]\n\n  def get_similar_question_sql(self, question: str, **kwargs) -> list:\n    documents = self.sql_store.similarity_search(query=question, k=self.n_results_sql)\n    return [json.loads(document.page_content) for document in documents]\n\n  def get_training_data(self, **kwargs) -> pd.DataFrame:\n    data = []\n    query = {\n      \"query\": {\n        \"match_all\": {}\n      }\n    }\n\n    indices = [\n      {\"index\": self.document_index, \"type\": \"documentation\"},\n      {\"index\": self.question_sql_index, \"type\": \"sql\"},\n      {\"index\": self.ddl_index, \"type\": \"ddl\"},\n    ]\n\n    # Use documentation_store.client consistently for search on all indices\n    opensearch_client = self.documentation_store.client\n\n    for index_info in indices:\n      index_name = index_info[\"index\"]\n      training_data_type = index_info[\"type\"]\n      scroll = '1m'  # keep scroll context for 1 minute\n      response = opensearch_client.search(\n        index=index_name,\n        ignore_unavailable=True,\n        body=query,\n        scroll=scroll,\n        size=1000\n      )\n\n      scroll_id = response.get('_scroll_id')\n\n      while scroll_id:\n        hits = response['hits']['hits']\n        if not hits:\n          break  # No more hits, exit loop\n\n        for hit in hits:\n          source = hit['_source']\n          if training_data_type == \"sql\":\n            try:\n              doc_dict = json.loads(source['text'])\n              content = doc_dict.get(\"sql\")\n              question = doc_dict.get(\"question\")\n            except json.JSONDecodeError as e:\n              self.log(f\"Skipping row with custom_id {hit['_id']} due to JSON parsing error: {e}"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "Error\")\n              continue\n          else:  # documentation or ddl\n            content = source['text']\n            question = None\n\n          data.append({\n            \"id\": hit[\"_id\"],\n            \"training_data_type\": training_data_type,\n            \"question\": question,\n            \"content\": content,\n          })\n\n        # Get next batch of results, using documentation_store.client.scroll\n        response = opensearch_client.scroll(scroll_id=scroll_id, scroll=scroll)\n        scroll_id = response.get('_scroll_id')\n\n    return pd.DataFrame(data)\n\n  def remove_training_data(self, id: str, **kwargs) -> bool:\n    try:\n      if id.endswith("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "):\n        return self.sql_store.delete(ids=[id], **kwargs)\n      elif id.endswith("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "):\n        return self.ddl_store.delete(ids=[id], **kwargs)\n      elif id.endswith("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "):\n        return self.documentation_store.delete(ids=[id], **kwargs)\n      else:\n        return False\n    except Exception as e:\n      self.log(f"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "temperature\" in config:\n            self.temperature = config[\"temperature\"]\n\n        if \"model_name\" in config:\n            model_name = config[\"model_name\"]\n        else:\n            model_name = \"gemini-1.5-pro\"\n\n        self.google_api_key = None\n\n        if \"api_key\" in config or os.getenv(\"GOOGLE_API_KEY\"):\n            \"\"\"\n            If Google api_key is provided through config\n            or set as an environment variable, assign it.\n            \"\"\"\n            import google.generativeai as genai\n\n            genai.configure(api_key=config[\"api_key\"])\n            self.chat_model = genai.GenerativeModel(model_name)\n        else:\n            # Authenticate using VertexAI\n            import google.auth\n            import vertexai\n            from vertexai.generative_models import GenerativeModel\n\n            json_file_path = config.get(\"google_credentials\")  # Assuming the JSON file path is provided in the config\n\n            if not json_file_path or not os.path.exists(json_file_path):\n                raise FileNotFoundError(f\"JSON credentials file not found at: {json_file_path}\")\n\n            try:\n                # Validate and set the JSON file path for GOOGLE_APPLICATION_CREDENTIALS\n                os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = json_file_path\n\n                # Initialize VertexAI with the credentials\n                credentials, _ = google.auth.default()\n                vertexai.init(credentials=credentials)\n                self.chat_model = GenerativeModel(model_name)\n            except google.auth.exceptions.DefaultCredentialsError as e:\n                raise RuntimeError(f"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "n_results_sql\", config.get(\"n_results\", 10))\n        self.n_results_documentation = config.get(\"n_results_documentation\", config.get(\"n_results\", 10))\n        self.n_results_ddl = config.get(\"n_results_ddl\", config.get(\"n_results\", 10))\n\n        if \"api_key\" in config or os.getenv(\"GOOGLE_API_KEY\"):\n            \"\"\"\n            If Google api_key is provided through config\n            or set as an environment variable, assign it.\n            \"\"\"\n            print(\"Configuring genai\")\n            self.type = \"GEMINI\"\n            import google.generativeai as genai\n\n            genai.configure(api_key=config[\"api_key\"])\n\n            self.genai = genai\n        else:\n            self.type = \"VERTEX_AI\"\n            # Authenticate using VertexAI\n\n        if self.config.get(\"project_id\"):\n            self.project_id = self.config.get(\"project_id\")\n        else:\n            self.project_id = os.getenv(\"GOOGLE_CLOUD_PROJECT\")\n\n        if self.project_id is None:\n            raise ValueError(\"Project ID is not set\")\n\n        self.conn = bigquery.Client(project=self.project_id)\n\n        dataset_name = self.config.get('bigquery_dataset_name', 'vanna_managed')\n        self.dataset_id = f\"{self.project_id}.{dataset_name}\"\n        dataset = bigquery.Dataset(self.dataset_id)\n\n        try:\n            self.conn.get_dataset(self.dataset_id)  # Make an API request.\n            print(f\"Dataset {self.dataset_id} already exists\")\n        except Exception:\n            # Dataset does not exist, create it\n            dataset.location = \"US\"\n            self.conn.create_dataset(dataset, timeout=30)  # Make an API request.\n            print(f\"Created dataset {self.dataset_id}\")\n\n        # Create a table called training_data in the dataset that contains the columns:\n        # id, training_data_type, question, content, embedding, created_at\n\n        self.table_id = f\"{self.dataset_id}.training_data\"\n        schema = [\n            bigquery.SchemaField(\"id\", \"STRING\", mode=\"REQUIRED\"),\n            bigquery.SchemaField(\"training_data_type\", \"STRING\", mode=\"REQUIRED\"),\n            bigquery.SchemaField(\"question\", \"STRING\", mode=\"REQUIRED\"),\n            bigquery.SchemaField(\"content\", \"STRING\", mode=\"REQUIRED\"),\n            bigquery.SchemaField(\"embedding\", \"FLOAT64\", mode=\"REPEATED\"),\n            bigquery.SchemaField(\"created_at\", \"TIMESTAMP\", mode=\"REQUIRED\"),\n        ]\n\n        table = bigquery.Table(self.table_id, schema=schema)\n\n        try:\n            self.conn.get_table(self.table_id)  # Make an API request.\n            print(f\"Table {self.table_id} already exists\")\n        except Exception:\n            # Table does not exist, create it\n            self.conn.create_table(table, timeout=30)  # Make an API request.\n            print(f\"Created table {self.table_id}\")\n\n        # Create VECTOR INDEX IF NOT EXISTS\n        # TODO: This requires 5000 rows before it can be created\n        # vector_index_query = f\"\"\"\n        # CREATE VECTOR INDEX IF NOT EXISTS my_index\n        # ON `{self.table_id}`(embedding)\n        # OPTIONS(\n        #     distance_type='COSINE',\n        #     index_type='IVF',\n        #     ivf_options='{{\"num_lists\": 1000}}'\n        # )\n        # \"\"\"\n\n        # try:\n        #     self.conn.query(vector_index_query).result()  # Make an API request.\n        #     print(f\"Vector index on {self.table_id} created or already exists\")\n        # except Exception as e:\n        #     print(f\"Failed to create vector index: {e}\")\n\n    def store_training_data(self, training_data_type: str, question: str, content: str, embedding: List[float], **kwargs) -> str:\n        id = str(uuid.uuid4())\n        created_at = datetime.datetime.now()\n        self.conn.insert_rows_json(self.table_id, [{"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ": id,\n            \"training_data_type\": training_data_type,\n            \"question\": question,\n            \"content\": content,\n            \"embedding\": embedding,\n            \"created_at\": created_at.isoformat()\n        }])\n\n        return id\n\n    def fetch_similar_training_data(self, training_data_type: str, question: str, n_results, **kwargs) -> pd.DataFrame:\n        question_embedding = self.generate_question_embedding(question)\n\n        query = f\"\"\"\n        SELECT\n            base.id as id,\n            base.question as question,\n            base.training_data_type as training_data_type,\n            base.content as content,\n            distance\n        FROM\n            VECTOR_SEARCH(\n                TABLE `{self.table_id}`,\n                'embedding',\n                (SELECT * FROM UNNEST([STRUCT({question_embedding})])),\n                top_k => 5,\n                distance_type => 'COSINE',\n                options => '{{"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ":true}}'\n            )\n        WHERE\n            base.training_data_type = '{training_data_type}'\n        \"\"\"\n\n        results = self.conn.query(query).result().to_dataframe()\n        return results\n\n    def get_embeddings(self, data: str, task: str) -> List[float]:\n        embeddings = None\n\n        if self.type == \"VERTEX_AI\":\n          input = [TextEmbeddingInput(data, task)]\n          model = TextEmbeddingModel.from_pretrained(\"text-embedding-004\")\n\n          result = model.get_embeddings(input)\n\n          if len(result) > 0:\n              embeddings = result[0].values\n        else:\n          # Use Gemini Consumer API\n          result = self.genai.embed_content(\n            model=\"models/text-embedding-004\",\n            content=data,\n            task_type=task)\n\n          if 'embedding' in result:\n            embeddings = result['embedding']\n\n        return embeddings\n\n    def generate_question_embedding(self, data: str, **kwargs) -> List[float]:\n        result = self.get_embeddings(data, \"RETRIEVAL_QUERY\")\n\n        if result != None:\n            return result\n        else:\n            raise ValueError(\"No embeddings returned\")\n\n    def generate_storage_embedding(self, data: str, **kwargs) -> List[float]:\n        result = self.get_embeddings(data, \"RETRIEVAL_DOCUMENT\")\n\n        if result != None:\n            return result\n        else:\n            raise ValueError(\"No embeddings returned\")\n\n        # task = \"RETRIEVAL_DOCUMENT\"\n        # inputs = [TextEmbeddingInput(data, task)]\n        # embeddings = self.vertex_embedding_model.get_embeddings(inputs)\n\n        # if len(embeddings) == 0:\n        #     raise ValueError(\"No embeddings returned\")\n\n        # return embeddings[0].values\n\n        return result\n\n    def generate_embedding(self, data: str, **kwargs) -> List[float]:\n        return self.generate_storage_embedding(data, **kwargs)\n\n    def get_similar_question_sql(self, question: str, **kwargs) -> list:\n        df = self.fetch_similar_training_data(training_data_type=\"sql\", question=question, n_results=self.n_results_sql)\n\n        # Return a list of dictionaries with only question, sql fields. The content field needs to be renamed to sql\n        return df.rename(columns={"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ": \"sql\"})[[\"question\", \"sql\"]].to_dict(orient=\"records\")\n\n    def get_related_ddl(self, question: str, **kwargs) -> list:\n        df = self.fetch_similar_training_data(training_data_type=\"ddl\", question=question, n_results=self.n_results_ddl)\n\n        # Return a list of strings of the content\n        return df[\"content\"].tolist()\n\n    def get_related_documentation(self, question: str, **kwargs) -> list:\n        df = self.fetch_similar_training_data(training_data_type=\"documentation\", question=question, n_results=self.n_results_documentation)\n\n        # Return a list of strings of the content\n        return df[\"content\"].tolist()\n\n    def add_question_sql(self, question: str, sql: str, **kwargs) -> str:\n        doc = {\n            \"question\": question,\n            \"sql\": sql\n        }\n\n        embedding = self.generate_embedding(str(doc))\n\n        return self.store_training_data(training_data_type=\"sql\", question=question, content=sql, embedding=embedding)\n\n    def add_ddl(self, ddl: str, **kwargs) -> str:\n        embedding = self.generate_embedding(ddl)\n\n        return self.store_training_data(training_data_type=\"ddl\", question=\"\", content=ddl, embedding=embedding)\n\n    def add_documentation(self, documentation: str, **kwargs) -> str:\n        embedding = self.generate_embedding(documentation)\n\n        return self.store_training_data(training_data_type=\"documentation\", question=\"\", content=documentation, embedding=embedding)\n\n    def get_training_data(self, **kwargs) -> pd.DataFrame:\n        query = f\"SELECT id, training_data_type, question, content FROM `{self.table_id}`"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "DELETE FROM `{self.table_id}` WHERE id = '{id}'"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "connection_string\" not in config:\n            raise ValueError(\n                \"A valid 'config' dictionary with a 'connection_string' is required."
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "connection_string\" in config:\n            self.connection_string = config.get(\"connection_string\")\n            self.n_results = config.get(\"n_results\", 10)\n\n        if config and \"embedding_function\" in config:\n            self.embedding_function = config.get(\"embedding_function\")\n        else:\n            from langchain_huggingface import HuggingFaceEmbeddings\n            self.embedding_function = HuggingFaceEmbeddings(model_name=\"all-MiniLM-L6-v2\")\n\n        self.sql_collection = PGVector(\n            embeddings=self.embedding_function,\n            collection_name=\"sql\",\n            connection=self.connection_string,\n        )\n        self.ddl_collection = PGVector(\n            embeddings=self.embedding_function,\n            collection_name=\"ddl\",\n            connection=self.connection_string,\n        )\n        self.documentation_collection = PGVector(\n            embeddings=self.embedding_function,\n            collection_name=\"documentation\",\n            connection=self.connection_string,\n        )\n\n    def add_question_sql(self, question: str, sql: str, **kwargs) -> str:\n        question_sql_json = json.dumps(\n            {\n                \"question\": question,\n                \"sql\": sql,\n            },\n            ensure_ascii=False,\n        )\n        id = str(uuid.uuid4()) + \"-sql\"\n        createdat = kwargs.get(\"createdat\")\n        doc = Document(\n            page_content=question_sql_json,\n            metadata={\"id\": id, \"createdat\": createdat},\n        )\n        self.sql_collection.add_documents([doc], ids=[doc.metadata[\"id\"]])\n\n        return id\n\n    def add_ddl(self, ddl: str, **kwargs) -> str:\n        _id = str(uuid.uuid4()) + \"-ddl\"\n        doc = Document(\n            page_content=ddl,\n            metadata={\"id\": _id},\n        )\n        self.ddl_collection.add_documents([doc], ids=[doc.metadata[\"id\"]])\n        return _id\n\n    def add_documentation(self, documentation: str, **kwargs) -> str:\n        _id = str(uuid.uuid4()) + \"-doc\"\n        doc = Document(\n            page_content=documentation,\n            metadata={\"id\": _id},\n        )\n        self.documentation_collection.add_documents([doc], ids=[doc.metadata[\"id\"]])\n        return _id\n\n    def get_collection(self, collection_name):\n        match collection_name:\n            case \"sql\":\n                return self.sql_collection\n            case \"ddl\":\n                return self.ddl_collection\n            case \"documentation\":\n                return self.documentation_collection\n            case _:\n                raise ValueError(\"Specified collection does not exist.\")\n\n    def get_similar_question_sql(self, question: str) -> list:\n        documents = self.sql_collection.similarity_search(query=question, k=self.n_results)\n        return [ast.literal_eval(document.page_content) for document in documents]\n\n    def get_related_ddl(self, question: str, **kwargs) -> list:\n        documents = self.ddl_collection.similarity_search(query=question, k=self.n_results)\n        return [document.page_content for document in documents]\n\n    def get_related_documentation(self, question: str, **kwargs) -> list:\n        documents = self.documentation_collection.similarity_search(query=question, k=self.n_results)\n        return [document.page_content for document in documents]\n\n    def train(\n        self,\n        question: str | None = None,\n        sql: str | None = None,\n        ddl: str | None = None,\n        documentation: str | None = None,\n        plan: TrainingPlan | None = None,\n        createdat: str | None = None,\n    ):\n        if question and not sql:\n            raise ValidationError(\"Please provide a SQL query.\")\n\n        if documentation:\n            logging.info(f\"Adding documentation: {documentation}\")\n            return self.add_documentation(documentation)\n\n        if sql and question:\n            return self.add_question_sql(question=question, sql=sql, createdat=createdat)\n\n        if ddl:\n            logging.info(f\"Adding ddl: {ddl}\")\n            return self.add_ddl(ddl)\n\n        if plan:\n            for item in plan._plan:\n                if item.item_type == TrainingPlanItem.ITEM_TYPE_DDL:\n                    self.add_ddl(item.item_value)\n                elif item.item_type == TrainingPlanItem.ITEM_TYPE_IS:\n                    self.add_documentation(item.item_value)\n                elif item.item_type == TrainingPlanItem.ITEM_TYPE_SQL and item.item_name:\n                    self.add_question_sql(question=item.item_name, sql=item.item_value)\n\n    def get_training_data(self, **kwargs) -> pd.DataFrame:\n        # Establishing the connection\n        engine = create_engine(self.connection_string)\n\n        # Querying the 'langchain_pg_embedding' table\n        query_embedding = \"SELECT cmetadata, document FROM langchain_pg_embedding"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "cmetadata\"][\"id\"]\n            document = row[\"document\"]\n            training_data_type = \"documentation\" if custom_id[-3:] == \"doc\" else custom_id[-3:]\n\n            if training_data_type == \"sql\":\n                # Convert the document string to a dictionary\n                try:\n                    doc_dict = ast.literal_eval(document)\n                    question = doc_dict.get(\"question\")\n                    content = doc_dict.get(\"sql\")\n                except (ValueError, SyntaxError):\n                    logging.info(f\"Skipping row with custom_id {custom_id} due to parsing error."
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "documentation\", \"ddl\"]:\n                question = None  # Default value for question\n                content = document\n            else:\n                # If the suffix is not recognized, skip this row\n                logging.info(f\"Skipping row with custom_id {custom_id} due to unrecognized training data type."
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "id\": custom_id, \"question\": question, \"content\": content, \"training_data_type\": training_data_type}\n            )\n\n        # Create a DataFrame from the list of processed rows\n        df_processed = pd.DataFrame(processed_rows)\n\n        return df_processed\n\n    def remove_training_data(self, id: str, **kwargs) -> bool:\n        # Create the database engine\n        engine = create_engine(self.connection_string)\n\n        # SQL DELETE statement\n        delete_statement = text("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "\"\n            DELETE FROM langchain_pg_embedding\n            WHERE cmetadata ->> 'id' = :id"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "\"\n        )\n\n        # Connect to the database and execute the delete statement\n        with engine.connect() as connection:\n            # Start a transaction\n            with connection.begin() as transaction:\n                try:\n                    result = connection.execute(delete_statement, {"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ": id})\n                    # Commit the transaction if the delete was successful\n                    transaction.commit()\n                    # Check if any row was deleted and return True or False accordingly\n                    return result.rowcount > 0\n                except Exception as e:\n                    # Rollback the transaction in case of error\n                    logging.error(f"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ")\n                    transaction.rollback()\n                    return False\n\n    def remove_collection(self, collection_name: str) -> bool:\n        engine = create_engine(self.connection_string)\n\n        # Determine the suffix to look for based on the collection name\n        suffix_map = {\"ddl\": \"ddl\", \"sql\": \"sql\", \"documentation\": \"doc\"}\n        suffix = suffix_map.get(collection_name)\n\n        if not suffix:\n            logging.info(\"Invalid collection name. Choose from 'ddl', 'sql', or 'documentation'.\")\n            return False\n\n        # SQL query to delete rows based on the condition\n        query = text(\n            f"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "\"\n            DELETE FROM langchain_pg_embedding\n            WHERE cmetadata->>'id' LIKE '%{suffix}'"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "\"\n        )\n\n        # Execute the deletion within a transaction block\n        with engine.connect() as connection:\n            with connection.begin() as transaction:\n                try:\n                    result = connection.execute(query)\n                    transaction.commit()  # Explicitly commit the transaction\n                    if result.rowcount > 0:\n                        logging.info(\n                            f"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "f\"langchain_pg_embedding where collection is {collection_name}.\"\n                        )\n                        return True\n                    else:\n                        logging.info(f\"No rows deleted for collection {collection_name}."
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "id': {0: '19546-ddl',\n  1: '91597-sql',\n  2: '133976-sql',\n  3: '59851-doc',\n  4: '73046-sql'},\n 'training_data_type': {0: 'ddl',\n  1: 'sql',\n  2: 'sql',\n  3: 'documentation',\n  4: 'sql'},\n 'question': {0: None,\n  1: 'What are the top selling genres?',\n  2: 'What are the low 7 artists by sales?',\n  3: None,\n  4: 'What is the total sales for each customer?'},\n 'content': {0: 'CREATE TABLE [Invoice]\\n(\\n    [InvoiceId] INTEGER  NOT NULL,\\n    [CustomerId] INTEGER  NOT NULL,\\n    [InvoiceDate] DATETIME  NOT NULL,\\n    [BillingAddress] NVARCHAR(70),\\n    [BillingCity] NVARCHAR(40),\\n    [BillingState] NVARCHAR(40),\\n    [BillingCountry] NVARCHAR(40),\\n    [BillingPostalCode] NVARCHAR(10),\\n    [Total] NUMERIC(10,2)  NOT NULL,\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\n)"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "SELECT g.Name AS Genre, SUM(il.Quantity) AS TotalSales\\nFROM Genre g\\nJOIN Track t ON g.GenreId = t.GenreId\\nJOIN InvoiceLine il ON t.TrackId = il.TrackId\\nGROUP BY g.GenreId, g.Name\\nORDER BY TotalSales DESC"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "SELECT a.ArtistId, a.Name, SUM(il.Quantity) AS TotalSales\\nFROM Artist a\\nINNER JOIN Album al ON a.ArtistId = al.ArtistId\\nINNER JOIN Track t ON al.AlbumId = t.AlbumId\\nINNER JOIN InvoiceLine il ON t.TrackId = il.TrackId\\nGROUP BY a.ArtistId, a.Name\\nORDER BY TotalSales ASC\\nLIMIT 7"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "This is a SQLite database. For dates rememeber to use SQLite syntax.',\n  4: 'SELECT c.CustomerId, c.FirstName, c.LastName, SUM(i.Total) AS TotalSales\\nFROM Customer c\\nJOIN Invoice i ON c.CustomerId = i.CustomerId\\nGROUP BY c.CustomerId, c.FirstName, c.LastName"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "embedding_function\",\n        default_ef\n      )\n      self.pre_delete_collection = config.get("
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ",\n                                              False)\n      self.cmetadata = config.get(\"cmetadata\", {\"created_by\": \"oracle\"})\n    else:\n      self.embedding_function = default_ef\n      self.pre_delete_collection = False\n      self.cmetadata = {"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ": \"oracle\"}\n\n    self.oracle_conn = oracledb.connect(dsn=config.get(\"dsn\"))\n    self.oracle_conn.call_timeout = 30000\n    self.documentation_collection = \"documentation\"\n    self.ddl_collection = \"ddl\"\n    self.sql_collection = \"sql\"\n    self.n_results = config.get(\"n_results\", 10)\n    self.n_results_ddl = config.get(\"n_results_ddl\", self.n_results)\n    self.n_results_sql = config.get(\"n_results_sql\", self.n_results)\n    self.n_results_documentation = config.get(\"n_results_documentation\",\n                                              self.n_results)\n    self.create_tables_if_not_exists()\n    self.create_collections_if_not_exists(self.documentation_collection)\n    self.create_collections_if_not_exists(self.ddl_collection)\n    self.create_collections_if_not_exists(self.sql_collection)\n\n  def generate_embedding(self, data: str, **kwargs) -> List[float]:\n    embeddings = self.embedding_function([data])\n    if len(embeddings) == 1:\n      return list(embeddings[0].astype(float))\n    return list(embeddings.astype(float))\n\n  def add_question_sql(self, question: str, sql: str, **kwargs) -> str:\n    cmetadata = self.cmetadata.copy()\n    collection = self.get_collection(self.sql_collection)\n    question_sql_json = json.dumps(\n      {\n        \"question\": question,\n        \"sql\": sql,\n      },\n      ensure_ascii=False,\n    )\n    id = str(uuid.uuid4())\n    embeddings = self.generate_embedding(question)\n    custom_id = id + \"-sql\"\n\n    cursor = self.oracle_conn.cursor()\n    cursor.setinputsizes(None, oracledb.DB_TYPE_VECTOR)\n    cursor.execute(\n      \"\"\"\n          INSERT INTO oracle_embedding (\n              collection_id,\n              embedding,\n              document,\n              cmetadata,\n              custom_id,\n              uuid\n          ) VALUES (\n              :1,\n              TO_VECTOR(:2),\n              :3,\n              :4,\n              :5,\n              :6\n          )"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "\", [\n        collection[\"uuid\"],\n        embeddings,\n        question_sql_json,\n        json.dumps(cmetadata),\n        custom_id,\n        id\n      ]\n    )\n\n    self.oracle_conn.commit()\n    cursor.close()\n    return id\n\n  def add_ddl(self, ddl: str, **kwargs) -> str:\n    collection = self.get_collection(self.ddl_collection)\n    question_ddl_json = json.dumps(\n      {\n        \"question\": None,\n        \"ddl\": ddl,\n      },\n      ensure_ascii=False,\n    )\n    id = str(uuid.uuid4())\n    custom_id = id + \"-ddl\"\n    cursor = self.oracle_conn.cursor()\n    cursor.setinputsizes(None, oracledb.DB_TYPE_VECTOR)\n    cursor.execute(\n      \"\"\"\n      INSERT INTO oracle_embedding (\n          collection_id,\n          embedding,\n          document,\n          cmetadata,\n          custom_id,\n          uuid\n      ) VALUES (\n          :1,\n          TO_VECTOR(:2),\n          :3,\n          :4,\n          :5,\n          :6\n      )"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "\", [\n        collection[\"uuid\"],\n        self.generate_embedding(ddl),\n        question_ddl_json,\n        json.dumps(self.cmetadata),\n        custom_id,\n        id\n      ]\n    )\n    self.oracle_conn.commit()\n    cursor.close()\n    return id\n\n  def add_documentation(self, documentation: str, **kwargs) -> str:\n    collection = self.get_collection(self.documentation_collection)\n    question_documentation_json = json.dumps(\n      {\n        \"question\": None,\n        \"documentation\": documentation,\n      },\n      ensure_ascii=False,\n    )\n    id = str(uuid.uuid4())\n    custom_id = id + \"-doc\"\n    cursor = self.oracle_conn.cursor()\n    cursor.setinputsizes(None, oracledb.DB_TYPE_VECTOR)\n    cursor.execute(\n      \"\"\"\n      INSERT INTO oracle_embedding (\n          collection_id,\n          embedding,\n          document,\n          cmetadata,\n          custom_id,\n          uuid\n      ) VALUES (\n          :1,\n          TO_VECTOR(:2),\n          :3,\n          :4,\n          :5,\n          :6\n      )"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "\", [\n        collection[\"uuid\"],\n        self.generate_embedding(documentation),\n        question_documentation_json,\n        json.dumps(self.cmetadata),\n        custom_id,\n        id\n      ]\n    )\n    self.oracle_conn.commit()\n    cursor.close()\n    return id\n\n  def get_training_data(self, **kwargs) -> pd.DataFrame:\n    df = pd.DataFrame()\n\n    cursor = self.oracle_conn.cursor()\n    sql_collection = self.get_collection(self.sql_collection)\n    cursor.execute(\n      \"\"\"\n                    SELECT\n                        document,\n                        uuid\n                    FROM oracle_embedding\n                    WHERE\n                        collection_id = :1"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "\", [\n        sql_collection[\"uuid\"]\n      ]\n    )\n    sql_data = cursor.fetchall()\n\n    if sql_data is not None:\n      # Extract the documents and ids\n      documents = [row_data[0] for row_data in sql_data]\n      ids = [row_data[1] for row_data in sql_data]\n\n      # Create a DataFrame\n      df_sql = pd.DataFrame(\n        {\n          \"id\": ids,\n          \"question\": [\n            json.loads(doc)[\"question\"] if isinstance(doc,\n                                                      str) else\n            doc[\n              \"question\"] for doc in documents],\n          \"content\": [\n            json.loads(doc)[\"sql\"] if isinstance(doc, str) else\n            doc[\"sql\"] for\n            doc in documents],\n        }\n      )\n      df_sql[\"training_data_type\"] = \"sql\"\n      df = pd.concat([df, df_sql])\n\n    ddl_collection = self.get_collection(self.ddl_collection)\n    cursor.execute(\n      \"\"\"\n          SELECT\n              document,\n              uuid\n          FROM oracle_embedding\n          WHERE\n              collection_id = :1"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "\", [ddl_collection[\"uuid\"]])\n    ddl_data = cursor.fetchall()\n\n    if ddl_data is not None:\n      # Extract the documents and ids\n      documents = [row_data[0] for row_data in ddl_data]\n      ids = [row_data[1] for row_data in ddl_data]\n\n      # Create a DataFrame\n      df_ddl = pd.DataFrame(\n        {\n          \"id\": ids,\n          \"question\": [None for _ in documents],\n          \"content\": [\n            json.loads(doc)[\"ddl\"] if isinstance(doc, str) else\n            doc[\"ddl\"] for\n            doc in documents],\n        }\n      )\n      df_ddl[\"training_data_type\"] = \"ddl\"\n      df = pd.concat([df, df_ddl])\n\n    doc_collection = self.get_collection(self.documentation_collection)\n    cursor.execute(\n      \"\"\"\n          SELECT\n              document,\n              uuid\n          FROM oracle_embedding\n          WHERE\n              collection_id = :1"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "\", [doc_collection[\"uuid\"]])\n    doc_data = cursor.fetchall()\n\n    if doc_data is not None:\n      # Extract the documents and ids\n      documents = [row_data[0] for row_data in doc_data]\n      ids = [row_data[1] for row_data in doc_data]\n\n      # Create a DataFrame\n      df_doc = pd.DataFrame(\n        {\n          \"id\": ids,\n          \"question\": [None for _ in documents],\n          \"content\": [\n            json.loads(doc)[\"documentation\"] if isinstance(doc,\n                                                           str) else\n            doc[\n              \"documentation\"] for\n            doc in documents],\n        }\n      )\n      df_doc[\"training_data_type\"] = \"documentation\"\n      df = pd.concat([df, df_doc])\n\n    self.oracle_conn.commit()\n    cursor.close()\n    return df\n\n  def remove_training_data(self, id: str, **kwargs) -> bool:\n    cursor = self.oracle_conn.cursor()\n    cursor.execute(\n      \"\"\"\n          DELETE\n          FROM\n              oracle_embedding\n          WHERE\n          uuid  = :1"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "\", [id])\n\n    self.oracle_conn.commit()\n    cursor.close()\n    return True\n\n  def update_training_data(self, id: str, train_type: str, question: str,\n                           **kwargs) -> bool:\n    print(f"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ")\n    update_content = kwargs["
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": "]\n    if train_type == 'sql':\n      update_json = json.dumps(\n        {"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ": question,\n          \"sql\": update_content,\n        }\n      )\n    elif train_type == 'ddl':\n      update_json = json.dumps(\n        {"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ": None,\n          \"ddl\": update_content,\n        }\n      )\n    elif train_type == 'documentation':\n      update_json = json.dumps(\n        {"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ": None,\n          \"documentation\": update_content,\n        }\n      )\n    else:\n      update_json = json.dumps(\n        {"
    },
    {
        "question": "[請在此處輸入對應此 SQL 的自然語言問題]",
        "sql": ": question,\n          \"sql\": update_content,\n        }\n      )\n    cursor = self.oracle_conn.cursor()\n    cursor.setinputsizes(oracledb.DB_TYPE_VECTOR, oracledb.DB_TYPE_JSON)\n    cursor.execute("
    }
]